Generate a single test case without providing an explanation or a note for to raise the following scenarios in a Java program:

InputMismatchException: Provide an input value that whose data type is different than the one specified. 
ArithmeticException: Test cases that could raise arithmetic exceptions include division by zero, overflow, underflow, and attempts to perform invalid operations such as taking the square root of a negative number.
NullPointerException: Create a scenario where a variable is explicitly set to null before usage.
NumberFormatException: Input a value that cannot be parsed to the expected data type (e.g., a non-numeric string).
ArrayIndexOutOfBoundsException or IndexOutOfBoundsException: Design input values that lead to accessing array or list indices beyond their bounds.

Ensure the test case input is in the following format:
Test Case Input:
<input 1>
<input 2>
...
Generate a single test case without providing an explanation or any additional information for the below Java program:

JAVA PROGRAM:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Main {
        private static  BufferedReader br = null;
        static {
                br = new BufferedReader(new InputStreamReader(System.in));
        }
        public static void main(String[] args) {
                int     point = 0;
                while ((point = parseNum()) != 0) {
                        int[][] map     = new int[point][point];
                        int             route   = parseNum();   
                        int             lantern = 0;
                        for (int i = 0; i < point; i++) {       
                                for (int j = 0; j < point; j++) {
                                        map[i][j] = -1;
                                }
                        }
                        for (int n = 0; n < route; n++) {       
                                int[]   dist = parseDist();     
                                map[dist[0]][dist[1]] = dist[2];
                                map[dist[1]][dist[0]] = dist[2];
                        }
                        for (int n = 0; n < route; n++) {       
                                int     tmp = solve(1 << n, n, map);
                                lantern = (lantern == 0) ? tmp : Math.min(tmp, lantern);
                        }
                        System.out.println(lantern);
                }
        }
        private static int solve(int cbit, int start, int[][] map) {
                int             fbit    = 0;
                int             lantern = 0;
                int             rest    = 0;
                boolean comp    = true;
                for (int n = 0; n < map.length; n++) {
                        if ((cbit & 1 << n) == 0) {
                                if (map[start][n] != -1) {      
                                        fbit |= 1 << n;
                                        lantern += map[start][n];
                                }
                                else {
                                        comp = false;
                                }
                        }
                }
                if (!comp) {
                        for (int n = 0; n < map.length; n++) {  
                                if (map[start][n] != -1 && (fbit & 1 << n) != 0) {
                                        int     tmp = solve(cbit | fbit, n, map);
                                        if (tmp != 0) {
                                                rest = (rest == 0) ? tmp : Math.min(tmp, rest);
                                        }
                                }
                        }
                }
                return lantern + rest;
        }
        private static int[] parseDist() {
                int[]   dist  = null;
                String  strIn = null;
                if ((strIn = parseStdin()) != null) {
                        String[]        split = strIn.split(",");
                        dist    = new int[3];
                        dist[0] = Integer.parseInt(split[0]);   
                        dist[1] = Integer.parseInt(split[1]);   
                        dist[2] = Integer.parseInt(split[2]) / 100 - 1;
                }
                return dist;
        }
        private static int parseNum() {
                int             num   = 0;
                String  strIn = null;
                if ((strIn = parseStdin()) != null) {
                        num = Integer.parseInt(strIn);
                }
                return num;
        }
        private static String parseStdin() {
                String  strNum = null;
                try {
                        String line = br.readLine();
                        if (line != null) {
                                if (!line.isEmpty()) {
                                        strNum = line;
                                }
                        }
                }
                catch (IOException e) {}
                return strNum;
        }
}

