[
    {
        "submission_id": "s638236423",
        "complete_code": "import java.io.IOException;\nimport java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(System.in);\n\t\tint A, B;\n\t\tA = in.nextInt();\n\t\tB = in.nextInt();\n\t\tString S = in.next();\n\t\tPattern p = Pattern.compile(\"^.{\" + A + \"}-[0-9]{\" + B + \"}$\");\n\t\tMatcher m = p.matcher(S);\n\t\tSystem.err.println(S);\n\t\tif(m.find()) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
        "lines_of_code": 21,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException\n2. NoSuchElementException\n3. IllegalStateException"
        ]
    },
    {
        "submission_id": "s712779211",
        "complete_code": "import java.util.*;\npublic class Main{\n  public static void main(String[]args){\n  \tScanner sc = new Scanner(System.in);\n    int a = sc.nextInt();\n    String ans = \"No\";\n    int []kuku = new int [81];\n    int b=0;\n  \tfor(int x=1; x<=9; x++){\n    \tfor(int y=1; y<=9; y++){\n          kuku[b]=x*y;\n          b++;\n        }\n    }\n    for(int i=0; i<=81; i++){\n    \tif(a==kuku[i])\n    \tans=\"Yes\";\n    }\n    System.out.println(ans);\n  }\n}",
        "lines_of_code": 21,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.InputMismatchException\n2. java.lang.ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s858273878",
        "complete_code": "import java.util.*;\npublic class Main {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        int mod = (int)1e9 + 7;\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int block[] = new int[m];\n        for (int i=0; i<m; i++){\n            block[i] = sc.nextInt();\n        }\n        int sums[] = new int[n+1];\n        boolean stone[] = new boolean[n+1];\n        for (int i=0; i<m; i++) {\n            stone[block[i]] = true;\n        }\n        if (block[0]==0) {System.out.println(0);}\n        else if (block[0]==1) {\n            sums[0] = 1;\n            sums[1] = 0;\n            for (int i = 0; i < n - 1; i++) {\n                if (stone[i + 2] == false) {\n                    sums[i + 2] = (sums[i + 1] + sums[i]) % mod;\n                } else if (stone[i + 2] == true) {\n                    sums[i + 2] = 0;\n                }\n            }\n            System.out.println(sums[n] % mod);\n        }\n        else{\n            sums[0] = 1;\n            sums[1] = 1;\n            for (int i = 0; i < n - 1; i++) {\n                if (stone[i + 2] == false) {\n                    sums[i + 2] = (sums[i + 1] + sums[i]) % mod;\n                } else if (stone[i + 2] == true) {\n                    sums[i + 2] = 0;\n                }\n            }\n            System.out.println(sums[n] % mod);\n        }\n    }\n}",
        "lines_of_code": 43,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException\n2. ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s006308236",
        "complete_code": "import java.util.*;\npublic class Main{\n  public static void main(String[]args){\n      Scanner sc = new Scanner(System.in);\n      int n = sc.nextInt();\n      int[] adata = new int[n];\n      int[] bdata = new int[n];\n      int[] cdata = new int[n-1];\n      int sum = 0;\n      for (int i =0 ;i<n ;i++ ) {\n        adata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n ;i++ ) {\n        bdata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n-1 ;i++ ) {\n        cdata[i] = sc.nextInt();\n      }\n      for (int i =0 ;i<n ;i++ ) {\n        sum = sum + bdata[i];\n      }\n      if (n>3) {\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i+1];\n          }\n        }\n      }else if(n==2){\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i];\n          }\n        }\n      }else{\n        for (int i =0 ;i<n-1 ;i++ ) {\n          if (adata[i]==adata[i+1]-1) {\n            sum = sum + cdata[i-1];\n          }\n        }\n      }\n      System.out.println(sum);\n}\n}",
        "lines_of_code": 43,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException"
        ]
    },
    {
        "submission_id": "s390425931",
        "complete_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int[] A = new int[N];\n        for (int i = 0; i < N; i++) {\n            A[i] = sc.nextInt();\n        }\n        int[][] dp = new int[8000+5][80+5];\n        for (int i = 0; i < dp.length; i++ ) {\n            for (int j = 0; j < dp[0].length; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        dp[1000][0] = 0;\n        for (int j = 0; j < dp[0].length; j++ ) {\n            for (int i = 0; i < dp.length; i++) {\n                if (dp[i][j] == -1 || j >= N) continue;\n                int price = A[j];\n                int num = i/price;\n                int remain = i - num*price;\n                if (num > 0) {\n                    dp[remain][j+1] = Math.max(dp[remain][j+1], dp[i][j]+num);\n                }\n                if (dp[i][j] > 0) {\n                    remain = i + dp[i][j]*price;\n                    dp[remain][j+1] = Math.max(dp[remain][j+1], 0);\n                }\n                dp[i][j+1] = Math.max(dp[i][j+1], dp[i][j]);\n            }\n        }\n        int ans = -1;\n        for (int i = 0; i < dp.length; i++) {\n            if (dp[i][N] == -1) continue;\n            ans = i;\n        }\n        System.out.println(ans);\n    }\n}",
        "lines_of_code": 40,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s502305175",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\nclass Main {\n    public static void main(String[] args) {\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader br = new BufferedReader(isr);\n        String str=\"\";\n        int[] a=new int[3];\n        try {\n        \twhile(true){\n        \t\tstr = br.readLine();\n                StringTokenizer st=new StringTokenizer(str,\" \");\n                int i=0;\n    \t\t     while (st.hasMoreTokens()) {\n    \t\t    \t a[i]=Integer.parseInt(st.nextToken());\n    \t\t    \t i++;\n    \t\t     }i=0;\n                if(a[0] < a[1] && a[1] < a[2]){\n                System.out.print(\"YES\");\n                }else{\n                System.out.print(\"NO\");\n                }\n                str=\"\";\n        \t}\n        } catch(IOException e) {\n        \tSystem.exit(0);\n        }\n    }\n}",
        "lines_of_code": 31,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s741249232",
        "complete_code": "import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            String type = sc.next();\n            if (type.equals(\"S\")) {\n                a[i] = sc.nextInt() + 100;\n            } else if (type.equals(\"H\")) {\n                a[i] = sc.nextInt() + 200;\n            } else if (type.equals(\"C\")) {\n                a[i] = sc.nextInt() + 300;\n            } else if (type.equals(\"D\")) {\n                a[i] = sc.nextInt() + 400;\n            }\n        }\n        Arrays.sort(a);\n        for (int i = 1, j = 0; i <= 52; i++) {\n            if (i <= 13) { \n                if (a[j] == 100 + i) {\n                    j++;\n                } else {\n                    System.out.println(\"S \" + i);\n                }\n            } else if (i <= 26) { \n                if (a[j] == 200 + i - 13) {\n                    j++;\n                } else {\n                    System.out.println(\"H \" + (i - 13));\n                }\n            } else if (i <= 39) { \n                if (a[j] == 300 + i - 26) {\n                    j++;\n                } else {\n                    System.out.println(\"C \" + (i - 26));\n                }\n            } else { \n                if (a[j] == 400 + i - 39) {\n                    j++;\n                } else {\n                    System.out.println(\"D \" + (i - 39));\n                }\n            }\n        }\n    }\n}",
        "lines_of_code": 49,
        "vanilla_response": [
            "Possible Runtime Exceptions:\n- InputMismatchException\n- ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s109776224",
        "complete_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    int n = scanner.nextInt();\n    int k = scanner.nextInt();\n    int[] A = new int[n];\n    for (int i = 0; i < n; i++) {\n      A[i] = scanner.nextInt();\n    }\n    List<Integer> pos = new ArrayList<>();\n    List<Integer> neg = new ArrayList<>();\n    for (int i : A) {\n      if (i >= 0) {\n        pos.add(i);\n      } else {\n        neg.add(i);\n      }\n    }\n    pos.sort(Comparator.reverseOrder());\n    neg.sort(Comparator.reverseOrder());\n    long[] posMul = new long[pos.size() + 1];\n    long[] negMul = new long[neg.size() + 1];\n    posMul[0] = 1;\n    negMul[0] = 1;\n    int mod = 1000000007;\n    for (int i = 1; i < posMul.length; i++) {\n      posMul[i] = posMul[i - 1] * pos.get(i - 1);\n      posMul[i] %= mod;\n    }\n    for (int i = 1; i < negMul.length; i++) {\n      negMul[i] = negMul[i - 1] * neg.get(i - 1);\n      negMul[i] %= mod;\n    }\n    long res = Integer.MIN_VALUE;\n    if (neg.size() == 0) {\n      res = posMul[k];\n      System.out.println(res < 0 ? res + mod : res % mod);\n      return;\n    }\n    if (pos.size() == 0) {\n      res = negMul[k];\n      System.out.println(res < 0 ? res + mod : res % mod);\n      return;\n    }\n    for (int i = 1; i <= Math.min(k, posMul.length); i++) {\n      res = Math.max(res, posMul[k] * negMul[k - i]);\n    }\n    System.out.println(res < 0 ? res + mod : res % mod);\n  }\n  private static final Scanner scanner = new Scanner(System.in);\n}",
        "lines_of_code": 51,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nArrayIndexOutOfBoundsException\nArithmeticException"
        ]
    },
    {
        "submission_id": "s657908154",
        "complete_code": "import java.math.BigDecimal;\nimport java.util.*;\nimport static java.util.Arrays.*;\nimport static java.lang.Math.*;\nclass Main {\n\tstatic Scanner sc = new Scanner(System.in);\n\tstatic int n;\n\tstatic char s, t, b;\n\tstatic int[] dx = {-1, 0, 1, 0}, dy = {0, -1, 0, 1};\n\tpublic static void main(String[] args) {\n\t\twhile (read()) {\n\t\t\tsolve();\n\t\t}\n\t}\n\tstatic boolean read() {\n\t\tn = sc.nextInt();\n\t\tif (n == 0) return false;\n\t\ts = sc.next().charAt(0);\n\t\tt = sc.next().charAt(0);\n\t\tb = sc.next().charAt(0);\n\t\treturn true;\n\t}\n\tstatic void solve() {\n\t\tBigDecimal[][][] dp = new BigDecimal[n + 1][5][5];\n\t\tfor (int i = 0; i <= n; i++) { \n\t\t\tfor (int j = 0; j < 5; j++) {\n\t\t\t\tfor (int k = 0; k < 5; k++) {\n\t\t\t\t\tdp[i][j][k] = new BigDecimal(0.0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint pos_s = s - 'A', pos_t = t - 'A', pos_b = b - 'A';\n\t\tint sx = pos_s % 3 + 1, sy = pos_s / 3 + 1;\n\t\tint gx = pos_t % 3 + 1, gy = pos_t / 3 + 1;\n\t\tint bx = pos_b % 3 + 1, by = pos_b / 3 + 1;\n\t\tdp[0][sy][sx] = new BigDecimal(1.0);\n\t\tBigDecimal bf = new BigDecimal(0.25);\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int y = 1; y <= 3; y++) {\n\t\t\t\tfor (int x = 1; x <= 3; x++) {\n\t\t\t\t\tfor (int l = 0; l < 4; l++) {\n\t\t\t\t\t\tint ty = y + dy[l], tx = x + dx[l];\n\t\t\t\t\t\tif ((y == by) && (x == bx)){\n\t\t\t\t\t\t\tty = y; tx = x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdp[i][ty][tx] = dp[i][ty][tx].add(dp[i - 1][y][x].multiply(bf));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.printf(\"%.8f\", dp[n][gy][gx]);\n\t\tSystem.out.println();\n\t}\n}",
        "lines_of_code": 54,
        "vanilla_response": [
            "Possible Runtime Exceptions - None"
        ]
    },
    {
        "submission_id": "s346794332",
        "complete_code": "\nimport java.util.Scanner;\nimport java.util.Arrays;\npublic class Main {\n    public static void main(String[] args) {\n        new Main().solve();\n    }\n    void solve() {\n        Scanner sc = new Scanner(System.in);\n        int A = sc.nextInt();\n        int B = sc.nextInt();\n        int t = 1, y = 1;\n        String S[][] = new String[500][500];\n        for (int i = 0; i < 250; i++) {\n            for (int j = 0; j < 500; j++) {\n                S[i][j] = \"#\";\n            }\n        }\n        for (int i = 250; i < 500; i++) {\n            for (int j = 0; j < 500; j++) {\n                S[i][j] = \".\";\n            }\n        }\n        while (A-- > 0) {\n            S[t][y] = \".\";\n            y += 2;\n            if (y > 500) {\n                t += 2;\n                y = 1;\n            }\n        }\n        t=250;\n        while (B-- > 0) {\n            S[t][y] = \"#\";\n            y += 2;\n            if (y > 500) {\n                t += 2;\n                y = 1;\n            }\n        }\n        for (int i = 0; i < 500; i++) {\n            for (int j = 0; j < 500; j++) {\n                System.out.print(S[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}",
        "lines_of_code": 48,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.NoSuchElementException\n2. java.lang.ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s820572542",
        "complete_code": "import java.util.*;\n\tpublic class Main{\n\t\tpublic static void main(String[] args){\n            Scanner sc = new Scanner(System.in);\n            int n = Integer.parseInt(sc.next());\n            int a = Integer.parseInt(sc.next());\n            int[] nums = new int[n];\n            int max = 1;\n            for(int i=0; i<n; i++){\n            \tnums[i] = Integer.parseInt(sc.next());\n            \tif(max<nums[i]){\n            \t\tmax = nums[i];\n            \t}\n            }\n            long[][][] dp = new long[n+1][n+1][n*max+1];\n            for(int i=0; i<n+1; i++){\n            \tfor(int j=0; j<n*max+1; j++){\n            \t\tdp[0][i][j] = 0;\n            \t\tdp[i][0][j] = 0;\n            \t}\n            }\n            for(int i=0; i<n+1; i++){\n            \tdp[i][0][0] = 1;\n            }\n            for(int k=0; k<n*max+1; k++){\n            \tfor(int j=1; j<n+1; j++){\n            \t\tfor(int i=1; i<n+1; i++){\n            \t\t\tif(i<j){\n            \t\t\t\tdp[i][j][k] = 0;\n            \t\t\t}else{\n            \t\t\t\tdp[i][j][k] = dp[i-1][j][k];\n            \t\t\t\tif(k-nums[i-1] >= 0){\n            \t\t\t\t\tdp[i][j][k] += dp[i-1][j-1][k-nums[i-1]];\n            \t\t\t\t}\n            \t\t\t}\n            \t\t}\n            \t}\n            }\n            long ret = 0;\n            for(int i=1; i*a<n*max+1; i++){\n            \tret += dp[n][i][i*a];\n            }\n            System.out.println(ret);\n            sc.close();\n        }\n    }",
        "lines_of_code": 46,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nNumberFormatException\nArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s016834584",
        "complete_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int a = sc.nextInt();\n    int b = sc.nextInt();\n    System.out.println(100 + \" \" + 100);\n    String[][] grid = new String[100][100];\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(i < 50) {\n          grid[i][j] = \"*\";\n        } else {\n          grid[i][j] = \".\";\n        }\n      }\n    }\n    a--;\n    b--;\n    for(int i = 0; i < 50; i++) {\n      for(int j = 0; j < 100; j++) {\n        if(a == 0) break;\n        if((i % 2 == 0) && (j % 2 == 0)) {\n          grid[i][j] = \".\";\n          a--;\n        }\n      }\n    }\n    for(int i = 99; i > 50; i--) {\n      for(int j = 0; j < 100; j++) {\n        if(b == 0) break;\n        if((i % 2 == 1) && (j % 2 == 0)) {\n          grid[i][j] = \"*\";\n          b--;\n        }\n      }\n    }\n    for(int i = 0; i < 100; i++) {\n      for(int j = 0; j < 100; j++) {\n        System.out.print(grid[i][j]);\n      }\n      System.out.println();\n    }\n  }\n}",
        "lines_of_code": 46,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException"
        ]
    },
    {
        "submission_id": "s304518563",
        "complete_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        final Scanner sc = new Scanner(System.in);\n        final int N = sc.nextInt();\n        final int K = sc.nextInt();\n        final List<Long> posiArray = new ArrayList<Long>();\n        final List<Long> negaArray = new ArrayList<Long>();\n        long input;\n        int count = 0;\n        for (int i = 0; i < N; i++)\n        {\n            input = sc.nextInt();\n            if (input < 0)\n            {\n                negaArray.add(input);\n            } else if (input > 0)\n            {\n                posiArray.add(input);\n            } else\n            {\n                count++;\n            }\n        }\n        int posiIndex = 0;\n        int negaIndex = negaArray.size() - 1;\n        long distance = 0;\n        for (int i = 0; i < N; i++)\n        {\n            if (posiArray.size() == 0 && negaArray.size() == 0)\n            {\n                distance = 0;\n                break;\n            } else if (posiArray.size() == 0)\n            {\n                distance = -negaArray.get(K - 1);\n                break;\n            } else if (negaArray.size() == 0)\n            {\n                distance = posiArray.get(K - 1);\n                break;\n            } else if (posiIndex < posiArray.size() && posiArray.get(posiIndex) < -2 * negaArray.get(negaIndex))\n            {\n                posiIndex++;\n            } else\n            {\n                negaIndex--;\n            }\n            count++;\n            if (count == K)\n            {\n                final long posiDis = posiArray.get(posiIndex - 1);\n                final long negaDis = negaArray.get(negaIndex + 1);\n                if (posiDis - 2 * negaDis > 2 * posiDis - negaDis)\n                {\n                    distance = 2 * posiDis - negaDis;\n                } else\n                {\n                    distance = posiDis - 2 * negaDis;\n                }\n                break;\n            }\n        }\n        System.out.println(distance);\n    }\n}",
        "lines_of_code": 70,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException"
        ]
    },
    {
        "submission_id": "s673186504",
        "complete_code": "import java.util.*;\npublic class Main {\n    void run() {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int sum = n * (n + 1) / 2;\n        if (sum % 2 == 0) {\n            int[] dp = new int[sum + 1];\n            Arrays.fill(dp, 1 << 20);\n            dp[0] = 0;\n            for (int i = 1; i <= n; i++) for (int j = sum - i; j >= 0; j--) if (dp[j] >= 0) {\n                dp[j + i] = Math.min(dp[j + i], i);\n            }\n            debug(dp);\n            HashSet<Integer> a = new HashSet<>();\n            HashSet<Integer> b = new HashSet<>();\n            int p = sum / 2;\n            while (p != 0) {\n                a.add(dp[p]);\n                p = p - dp[p];\n                debug(p);\n            }\n            for (int i = 1; i <= n; i++) if (!a.contains(i)) {\n                b.add(i);\n            }\n            int m = a.size() * b.size();\n            System.out.println(m);\n            for (int i: a) for (int j: b) {\n                System.out.println(i + \" \" + j);\n            }\n        } else {\n            int[] dp = new int[sum + 1];\n            Arrays.fill(dp, 1 << 20);\n            dp[0] = 0;\n            for (int i = 2; i <= n; i++) for (int j = sum - i; j >= 0; j--) if (dp[j] >= 0) {\n                dp[j + i] = Math.min(dp[j + i], i);\n            }\n            debug(dp);\n            HashSet<Integer> a = new HashSet<>();\n            HashSet<Integer> b = new HashSet<>();\n            int p = sum / 2;\n            while (p != 0) {\n                a.add(dp[p]);\n                p = p - dp[p];\n                debug(p);\n            }\n            for (int i = 1; i <= n; i++) if (!a.contains(i)) {\n                b.add(i);\n            }\n            a.add(1);\n            int m = a.size() * b.size() - 1;\n            System.out.println(m);\n            for (int i: a) for (int j: b) {\n                if (i == j) continue;\n                System.out.println(i + \" \" + j);\n            }\n        }\n    }\n    void debug(Object...os) {\n        System.err.println(Arrays.deepToString(os));\n    }\n    public static void main(String[] args) {\n        new Main().run();\n    }\n}",
        "lines_of_code": 65,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s188777614",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint[][] array = new int[3][3];\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tarray[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint N = sc.nextInt();\n\t\tfor (int h = 0; h < N; h++) {\n\t\t\tint number = sc.nextInt();\n\t\t\tfor (int i = 0; i < 3; i++) {\n\t\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\t\tif (array[i][j] == number) {\n\t\t\t\t\t\tarray[i][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsc.close();\n\t\tboolean flag = false;\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[i][j];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[j][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\t\tint sum1 = array[0][0] + array[1][1] + array[2][2];\n\t\t\tif (sum1==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tint sum2 = array[0][3] + array[1][1] + array[3][0];\n\t\t\tif (sum2==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[2-i][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tif(flag) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
        "lines_of_code": 68,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException"
        ]
    },
    {
        "submission_id": "s211375304",
        "complete_code": "import java.math.BigInteger;\nimport java.util.*;\npublic class Main {\n  private static final int MOD = 1_000_000_007;\n  public static void main(String[] args) {\n    int n = scanner.nextInt();\n    int k = scanner.nextInt();\n    int[] A = new int[n];\n    for (int i = 0; i < n; i++) {\n      A[i] = scanner.nextInt();\n    }\n    List<Integer> pos = new ArrayList<>();\n    List<Integer> neg = new ArrayList<>();\n    int zero = 0;\n    for (int i : A) {\n      if (i > 0) {\n        pos.add(i);\n      } else if (i < 0) {\n        neg.add(i);\n      } else {\n        zero++;\n      }\n    }\n    if (pos.size() + neg.size() < k || (n == k && zero > 0)) {\n      System.out.println(0);\n      return;\n    }\n    if (n == k) {\n      long res = 1;\n      for (int i : A) {\n        res = (res * i) % MOD;\n      }\n      System.out.println(Math.floorMod(res, MOD));\n      return;\n    }\n    pos.sort(Comparator.reverseOrder());\n    neg.sort(Comparator.reverseOrder());\n    BigInteger[] posMulLft = new BigInteger[pos.size() + 1];\n    BigInteger[] negMulLft = new BigInteger[neg.size() + 1];\n    BigInteger[] negMulRgt = new BigInteger[neg.size() + 1];\n    posMulLft[0] = BigInteger.ONE;\n    negMulLft[0] = BigInteger.ONE;\n    negMulRgt[negMulRgt.length - 1] = BigInteger.ONE;\n    for (int i = 1; i < Math.min(k + 1, posMulLft.length); i++) {\n      posMulLft[i] = posMulLft[i - 1].multiply(BigInteger.valueOf(pos.get(i - 1)));\n    }\n    for (int i = 1; i < Math.min(k + 1, negMulLft.length); i++) {\n      negMulLft[i] = negMulLft[i - 1].multiply(BigInteger.valueOf(neg.get(i - 1)));\n    }\n    for (int i = negMulRgt.length - 2, j = k; i >= 0 && j > 0; i--, j--) {\n      negMulRgt[i] = negMulRgt[i + 1].multiply(BigInteger.valueOf(neg.get(i)));\n    }\n    BigInteger res = BigInteger.valueOf(Long.MIN_VALUE);\n    for (int i = 0; i < Math.min(k + 1, posMulLft.length); i++) {\n      if (k - i < negMulLft.length) {\n        res = posMulLft[i].multiply(negMulLft[k - i]).max(res);\n      }\n    }\n    for (int i = 0; i < Math.min(k + 1, negMulRgt.length); i++) {\n      if (k - i < posMulLft.length) {\n        res = negMulRgt[negMulRgt.length - 1 - i].multiply(posMulLft[k - i]).max(res);\n      }\n    }\n    System.out.println(res.mod(BigInteger.valueOf(MOD)));\n  }\n  private static final Scanner scanner = new Scanner(System.in);\n}",
        "lines_of_code": 67,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. IOException\n2. NumberFormatException\n3. RuntimeException\n4. NullPointerException"
        ]
    },
    {
        "submission_id": "s612236725",
        "complete_code": "import java.util.*;\npublic class Main {\n    public static void sort(int array[], int array2[], int left, int right){\n        if(left <= right){\n            int p = array[(left + right) >>> 1];\n            int l = left;\n            int r = right;\n            while(l <= r){\n                while (array[l] < p){\n                    l++;\n                }\n                while (array[r] > p){\n                    r--;\n                }\n                if (l <= r){\n                    int tmp = array[l];\n                    array[l] = array[r];\n                    array[r] = tmp;\n                    int tmp2 = array2[l];\n                    array2[l] = array2[r];\n                    array2[r] = tmp2;\n                    l++;\n                    r--;\n                }\n            }\n            Main.sort(array, array2, left, r);\n            Main.sort(array, array2, l, right);\n        }\n    }\n    public static void main(String args[]){\n        Scanner stdIn = new Scanner(System.in);\n        int n = stdIn.nextInt();\n        int c[] = new int[26];\n        int s[][] = new int[n][26];\n        int ind[] = new int[26];\n        for(int i = 0; i < 26; i++){\n            c[i] = stdIn.nextInt();\n            ind[i] = i;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < 26; j++){\n                s[i][j] = stdIn.nextInt();\n            }\n        }\n        for(int i = 0; i < n - 26; i++){\n            int max = 0;\n            int index = 0;\n            for(int j = 0; j < 26; j++){\n                if(s[i][j] > max){\n                    max = s[i][j];\n                    index = j;\n                }\n            }\n            System.out.println(index + 1);\n        }\n        Main.sort(c, ind, 0, n - 1);\n        for(int i = 26; i < 0; i--){\n            System.out.println(ind[i]);\n        }\n    }\n}",
        "lines_of_code": 61,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.NoSuchElementException\n2. java.lang.ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s536612154",
        "complete_code": "import java.util.*;\nclass Main{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        HashSet<Integer>[] map = new HashSet[N+1];\n        for(int i=0;i<=N;i++) map[i]=new HashSet<>();\n        for(int i=1;i<=N-1;i++){\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            map[a].add(b);\n            map[b].add(a);\n        }\n        int[] color = new int[N+1];\n        color[1]=1; \n        color[N]=-1; \n        boolean isBlack = true;\n        LinkedList<Integer> bCur = new LinkedList<>();\n        LinkedList<Integer> bNext = new LinkedList<>();\n        LinkedList<Integer> wCur = new LinkedList<>();\n        LinkedList<Integer> wNext = new LinkedList<>();\n        bCur.add(1);\n        wCur.add(N);\n        while(bCur.size()>0||wCur.size()>0){\n            if(isBlack){\n                int cur = bCur.poll();\n                for(Integer w:map[cur]){\n                    if(color[w]==0){\n                        color[w]=1;\n                        bNext.add(w);\n                    }\n                }\n                if(bCur.size()==0){\n                    bCur = bNext;\n                    bNext = new LinkedList<>();\n                    isBlack = !isBlack;\n                }\n            } else{\n                int cur = wCur.poll();\n                for(Integer w:map[cur]){\n                    if(color[w]==0){\n                        color[w]=-1;\n                        wNext.add(w);\n                    }\n                }\n                if(wCur.size()==0){\n                    wCur = wNext;\n                    wNext = new LinkedList<>();\n                    isBlack = !isBlack;\n                }\n            }\n        }\n        int bCnt = 0;\n        for(int i=1;i<=N;i++){\n            if(color[i]==1) bCnt++;\n        }\n        String ans = \"Snuke\";\n        if(bCnt>N-bCnt) ans = \"Fennec\";\n        System.out.println(ans);\n    }\n}",
        "lines_of_code": 61,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s994136192",
        "complete_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        char[] s = sc.next().toCharArray();\n        List<Integer> one = new ArrayList<>();\n        List<Integer> zero = new ArrayList<>();\n        int oneCnt = 0;\n        int zeroCnt = 0;\n        if (s[0] == '1') {\n            oneCnt++;\n        } else {\n            zeroCnt++;\n            one.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            if (s[i] == '1') {\n                oneCnt++;\n                if (zeroCnt != 0) {\n                    zero.add(zeroCnt);\n                    zeroCnt = 0;\n                }\n            } else {\n                zeroCnt++;\n                if (oneCnt != 0) {\n                    one.add(oneCnt);\n                    oneCnt = 0;\n                }\n            }\n        }\n        if (oneCnt != 0) {\n            one.add(oneCnt);\n        } else if (zeroCnt != 0) {\n            zero.add(zeroCnt);\n            one.add(0);\n        }\n        if (zero.isEmpty() || zero.size() == 1 && one.get(0) == 0 && one.get(1) == 0) {\n            System.out.println(s.length);\n            return;\n        }\n        long oneSum = 0;\n        long zeroSum = 0;\n        for (int i = 0; i < k + 1; i++) {\n            oneSum += one.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            zeroSum += zero.get(i);\n        }\n        long ans = zeroSum + oneSum;\n        for (int i = 1; i < zero.size() - k + 1; i++) {\n            zeroSum += zero.get(i + k - 1) - zero.get(i - 1);\n            oneSum += one.get(i + k) - one.get(i - 1);\n            ans = Math.max(zeroSum + oneSum, ans);\n        }\n        System.out.println(ans);\n    }\n}",
        "lines_of_code": 61,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNumberFormatException\nIOException\nNullPointerException"
        ]
    },
    {
        "submission_id": "s789610965",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = sc.nextInt();\n\t\tint count = 0;\n\t\tint[] input = new int[N];\n\t\tboolean[] flag = new boolean[N];\n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tinput[i] = sc.nextInt();\n\t\t\tflag[i] = checkEqual(i, input[i]);\n\t\t}\n\t\twhile(checker(flag)) {\n\t\t\tfor(int i = 0; i < N; i++) {\n\t\t\t\tif(flag[i]) {\n\t\t\t\t\tif(i != 0) {\n\t\t\t\t\t\tif(checkEqual(i, input[i+1])){\n\t\t\t\t\t\t\tint c = input[i];\n\t\t\t\t\t\t\tinput[i] = input[i + 1];\n\t\t\t\t\t\t\tinput[i+1] = c;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tflag[i] = checkEqual(i, input[i]);\n\t\t\t\t\t\t\tflag[i+1] = checkEqual(i+1, input[i+1]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tint c = input[i];\n\t\t\t\t\t\t\tinput[i] = input[i-1];\n\t\t\t\t\t\t\tinput[i-1] = c;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tflag[i] = checkEqual(i, input[i]);\n\t\t\t\t\t\t\tflag[i-1] = checkEqual(i-1, input[i-1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tint c = input[i];\n\t\t\t\t\t\tinput[i] = input[i + 1];\n\t\t\t\t\t\tinput[i+1] = c;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tflag[i] = checkEqual(i, input[i]);\n\t\t\t\t\t\tflag[i+1] = checkEqual(i+1, input[i+1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n\tpublic static boolean checkEqual(int index, int input) {\n\t\tindex += 1;\n\t\tif(index == input) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tpublic static boolean checker(boolean[] flag) {\n\t\tfor(int i = 0; i < flag.length; i++) {\n\t\t\tif(flag[i]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
        "lines_of_code": 61,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1) java.util.InputMismatchException\n2) java.lang.ArrayIndexOutOfBoundsException\n3) java.lang.ArithmeticException"
        ]
    },
    {
        "submission_id": "s788209959",
        "complete_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tchar[] c = in.next().toCharArray();\n\t\tint index = 0;\n\t\tchar[] answer = new char[10];\n\t\tfor (int i = 0; i < c.length; i++) {\n\t\t\tif (c[i] == '0' || c[i] == '1') {\n\t\t\t\tanswer[index] = c[i];\n\t\t\t\tindex++;\n\t\t\t} else if (index > 0) {\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i <= index; i++) {\n\t\t\tSystem.out.printf(\"%c\", answer[i]);\n\t\t}\n\t}\n}",
        "lines_of_code": 20,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s941266503",
        "complete_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String args[]){\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tlong k = sc.nextLong();\n\t\tint a,b,c;\n\t\tlong total =0;\n\t\tif (k%2 == 1){\n\t\t\ttotal = (n/k)*(n/k)*(n/k);\n\t\t}\n\t\telse {\n\t\t\tif ((n/(k/2))%2 == 1){\n\t\t\t\ttotal = (n/(k/2))*(n/(k/2))*(n/(k/2)) + (n/(k/2)+1)*(n/(k/2)+1)*(n/(k/2)+1);\n\t\t\t}\n\t\t\telse total =(n/(k/2))*(n/(k/2))*(n/(k/2))*2;\n\t\t}\n\t\tSystem.out.println(total);\n\t}\n}",
        "lines_of_code": 20,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException"
        ]
    },
    {
        "submission_id": "s045667758",
        "complete_code": "import java.util.Scanner;\nimport java.util.Arrays;\nclass AOJ10029 {\n\tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++){\n\t\t\ta[i] = scanner.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\tfor (int i = 0; i < n; i++){\n\t\t\tif (i != 0) System.out.print(\" \");\n\t\t\tSystem.out.print(a[i]);\n\t\t}\n\t\tSystem.out.println(\"\");\n\t}\n}",
        "lines_of_code": 18,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException"
        ]
    },
    {
        "submission_id": "s726121335",
        "complete_code": "import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint[] a = new int[1000000001];\n\t\tArrays.fill(a, -1);\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint t = sc.nextInt();\n\t\t\ta[t] = a[t]*(-1);\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tif (a[i] > 0) count++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}",
        "lines_of_code": 19,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. OutOfMemoryError\n2. NegativeArraySizeException\n3. RuntimeException\n4. NullPointerException\n5. IOException"
        ]
    },
    {
        "submission_id": "s353056894",
        "complete_code": "import java.util.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    long A = sc.nextLong();\n    long B = sc.nextLong();\n    long K = sc.nextLong();\n    if (A > K) {\n      A -= K;\n    } else if (A < K) {\n      K -= A;\n      A = 0;\n      B -= K;\n    }\n    System.out.print(A + \" \" + B);\n  }\n}",
        "lines_of_code": 17,
        "vanilla_response": [
            "Possible Runtime Exceptions - None"
        ]
    },
    {
        "submission_id": "s632307817",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint x = in.nextInt();\n      \tint numberof500 = x/500;\n        int remainder = x%500;\n        int numberof5 = remainder/5;\n      System.out.println(1000*numberof500+5*numberof5);\n\t}\n}",
        "lines_of_code": 11,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException"
        ]
    },
    {
        "submission_id": "s078818526",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tint[] intMarkS = new int[13];\n\t\tint[] intMarkH = new int[13];\n\t\tint[] intMarkC = new int[13];\n\t\tint[] intMarkD = new int[13];\n\t\tint intNum = 0;\n\t\ttry {\n\t\t\tBufferedReader insBR = new BufferedReader(new InputStreamReader(\n\t\t\t\t\tSystem.in));\n\t\t\tinsBR.readLine();\n\t\t\twhile (true) {\n\t\t\t\tString strLine = insBR.readLine();\n\t\t\t\tif (strLine.equals(\"\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tString[] strAry = strLine.split(\" \");\n\t\t\t\tif (strAry[0].equals(\"S\")) {\n\t\t\t\t\tintNum = Integer.parseInt(strAry[1]);\n\t\t\t\t\tintMarkS[intNum - 1] = 1;\n\t\t\t\t} else if (strAry[0].equals(\"H\")) {\n\t\t\t\t\tintNum = Integer.parseInt(strAry[1]);\n\t\t\t\t\tintMarkH[intNum - 1] = 1;\n\t\t\t\t} else if (strAry[0].equals(\"C\")) {\n\t\t\t\t\tintNum = Integer.parseInt(strAry[1]);\n\t\t\t\t\tintMarkC[intNum - 1] = 1;\n\t\t\t\t} else if (strAry[0].equals(\"D\")) {\n\t\t\t\t\tintNum = Integer.parseInt(strAry[1]);\n\t\t\t\t\tintMarkD[intNum - 1] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < intMarkS.length; i++) {\n\t\t\t\tif (intMarkS[i] == 0) {\n\t\t\t\t\tSystem.out.println(\"S \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < intMarkH.length; i++) {\n\t\t\t\tif (intMarkH[i] == 0) {\n\t\t\t\t\tSystem.out.println(\"H \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < intMarkC.length; i++) {\n\t\t\t\tif (intMarkC[i] == 0) {\n\t\t\t\t\tSystem.out.println(\"C \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < intMarkD.length; i++) {\n\t\t\t\tif (intMarkD[i] == 0) {\n\t\t\t\t\tSystem.out.println(\"D \" + (i + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(e);\n\t\t} catch (NumberFormatException e) {\n\t\t\tSystem.out.println(\"\u6570\u5b57\u3067\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\");\n\t\t}\n\t}\n}",
        "lines_of_code": 61,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nNumberFormatException"
        ]
    },
    {
        "submission_id": "s188777614",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint[][] array = new int[3][3];\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tarray[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint N = sc.nextInt();\n\t\tfor (int h = 0; h < N; h++) {\n\t\t\tint number = sc.nextInt();\n\t\t\tfor (int i = 0; i < 3; i++) {\n\t\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\t\tif (array[i][j] == number) {\n\t\t\t\t\t\tarray[i][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsc.close();\n\t\tboolean flag = false;\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[i][j];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[j][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\t\tint sum1 = array[0][0] + array[1][1] + array[2][2];\n\t\t\tif (sum1==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tint sum2 = array[0][3] + array[1][1] + array[3][0];\n\t\t\tif (sum2==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tsum = sum + array[2-i][i];\n\t\t\t}\n\t\t\tif (sum==0) {\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\tsum=0;\n\t\t}\n\t\tif(flag) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
        "lines_of_code": 68,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException"
        ]
    },
    {
        "submission_id": "s718125205",
        "complete_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.TreeSet;\nclass Main {\n\tstatic long[] orthometric;  \n\tstatic Long[] sea;  \n\tstatic int num = 0;  \n\tpublic static void main(String[] args) {\n\t\ttry (Scanner sc = new Scanner(System.in)){\n\t\t\tint len = sc.nextInt();\n\t\t\torthometric = new long[len];  \n\t\t\tTreeSet<Long> seas = new TreeSet<Long>();\n\t\t\tlong now = 0l;\n\t\t\tseas.add(0l);  \n\t\t\tfor (int i=0; i<len; i++) {\n\t\t\t\tlong a = sc.nextLong();  \n\t\t\t\tif (a != now) {  \n\t\t\t\t\torthometric[num] = a;  \n\t\t\t\t\tseas.add(a);  \n\t\t\t\t\tnow = a;\n\t\t\t\t\tnum++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsea = new Long[seas.size()];\n\t\t\tseas.toArray(sea);  \n\t\t\tList<int[]> land = new ArrayList<int[]>();\n\t\t\tland.add(new int[]{0,num});  \n\t\t\tint max = findLand(0, land, 0);\n\t\t\tSystem.out.println(max);\n\t\t}\n\t}\n\tpublic static int findLand(int max, List<int[]> land, int pointer) {\n\t\tif (pointer>=sea.length) {\n\t\t\treturn max;\n\t\t} else {\n\t\t\tint count = 0;\n\t\t\tboolean landflag = false;\n\t\t\tList<int[]> l = new ArrayList<int[]>();\n\t\t\tint[] newLand = new int[2];\n\t\t\tfor (int[] j : land) {\n\t\t\t\tfor (int k=j[0]; k<j[1]; k++) {\n\t\t\t\t\tif (orthometric[k]>sea[pointer]) {  \n\t\t\t\t\t\tlandflag = true;  \n\t\t\t\t\t\tnewLand[0] = k;  \n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (landflag) {  \n\t\t\t\t\t\t\tlandflag = false;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tnewLand[1] = k;  \n\t\t\t\t\t\t\tl.add(newLand);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (landflag) { \n\t\t\t\t\t count++;\n\t\t\t\t\t newLand[1] = num;\n\t\t\t\t\t l.add(newLand);\n\t\t\t\t}\n\t\t\t\tmax = Math.max(max, count);\n\t\t\t\tmax = findLand(max, land, pointer+1);\n\t\t\t}\t\t\t\n\t\t}\n\t\treturn max;\n\t}\n}",
        "lines_of_code": 66,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNumberFormatException\nIOException\nRuntimeException"
        ]
    },
    {
        "submission_id": "s156006497",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.CookieHandler;\nimport java.util.*;\npublic class Main {\n    static PrintWriter out = new PrintWriter(System.out);\n    static Scanner sc = new Scanner(System.in);\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    ArrayList<Long> positive, negative, minus_nega;\n    long zeros = 0, k = 0, n = 0;\n    public static void main(String[] args) throws IOException {\n        Main main = new Main();\n        main.solve();\n    }\n    void solve() throws IOException {\n        n = sc.nextInt();\n        k = sc.nextInt();\n        k = n*(n-1)/2+1-k; \n        positive = new ArrayList<>(); negative = new ArrayList<>(); minus_nega = new ArrayList<>();\n        long maxi = Long.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            long a = sc.nextLong();\n            maxi = Math.max(maxi,a*a);\n            if(a>0) positive.add(a);\n            else if(a==0) zeros += 1;\n            else{\n                negative.add(a);\n                minus_nega.add(-a);\n            }\n        }\n        Collections.sort(positive);\n        Collections.sort(negative);\n        Collections.sort(minus_nega);\n        long lo = -maxi, hi = maxi+1;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(legal(mid)) lo = mid;\n            else hi = mid;\n        }\n        System.out.println(lo);\n    }\n    boolean legal(long guess){\n        long ans = 0;\n        if(guess>0){\n            ans += helperPosList(positive,guess);\n            ans += helperPosList(minus_nega,guess);\n            if(ans>=k) return true;\n        }\n        if(guess<=0){\n            ans += zeros*(n-zeros);\n            ans += positive.size()*(positive.size()-1)/2;\n            ans += negative.size()*(negative.size()-1)/2;\n            if(ans>=k) return true;\n        }\n        if(guess < 0){\n            int lenPos = positive.size(), lenNeg = negative.size();\n            if(lenNeg*lenPos>0){\n                int right = 0;\n                for(int i=0;i<lenPos;i++){\n                    long cur = positive.get(i);\n                    while(right<lenNeg&&cur*negative.get(right)<guess) right++;\n                    ans += lenNeg-right;\n                }\n            }\n        }\n        return ans >= k;\n    }\n    long helperPosList(ArrayList<Long> pos, long lower){\n        int len = pos.size(), left=0;\n        long ans = 0;\n        if(len==0||pos.get(len-1)*pos.get(len-1)<lower) return 0;\n        for(int right=len-1;right>=0;right--){\n            long cur = pos.get(right);\n            while(left<len&&pos.get(left)*cur<lower) left++;\n            if(left!=len){\n                if(left<=right) ans += len-left-1;\n                else ans += len-left;\n            }\n        }\n        ans /= 2; \n        return ans;\n    }\n}",
        "lines_of_code": 85,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s159736783",
        "complete_code": "import java.util.Scanner;\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tint m, f, r;\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tboolean flag = true;\n\t\twhile (flag) {\n\t\t\tm = stdIn.nextInt();\n\t\t\tf = stdIn.nextInt();\n\t\t\tr = stdIn.nextInt();\n\t\t\tif (m == -1 || f == -1 && r != -1) {\n\t\t\t\tSystem.out.println(\"F\");\n\t\t\t} else if (m + f >= 80) {\n\t\t\t\tSystem.out.println(\"A\");\n\t\t\t} else if (m + f >= 65) {\n\t\t\t\tSystem.out.println(\"B\");\n\t\t\t} else if (m + f >= 50) {\n\t\t\t\tSystem.out.println(\"C\");\n\t\t\t} else if (m + f >= 30 || r >= 50) {\n\t\t\t\tSystem.out.println(\"D\");\n\t\t\t} else if (m + f + r <= -3) {\n\t\t\t\tflag = false;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"F\");\n\t\t\t}\n\t\t}\n\t}\n}",
        "lines_of_code": 28,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1) InputMismatchException"
        ]
    },
    {
        "submission_id": "s618403331",
        "complete_code": "import java.util.*;\nclass Main {\n    public static void main(String[] args) {\n        final int MOD = 998244353;\n        Scanner sc = new Scanner(System.in);\n        int N = Integer.parseInt(sc.next());\n        int D[] = new int[N];\n        for (int i=0; i<N; i++)\n            D[i] = Integer.parseInt(sc.next());\n        sc.close();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i=0; i<N; i++) {\n            if (map.containsKey(D[i])) {\n                map.put(D[i], map.get(D[i])+1);\n            } else {\n                map.put(D[i], 1);\n            } \n        }\n        int cnt = 1;\n        for (int i=0; i<map.size(); i++) {\n            if (i>0) {\n                cnt *= Math.pow(map.get(i-1) ,map.get(i)) % MOD;\n            } else if (!map.containsKey(0) || map.get(0)!=1) {\n                break;\n            }\n        }\n        System.out.println(cnt);\n    }\n}",
        "lines_of_code": 29,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException"
        ]
    },
    {
        "submission_id": "s193164751",
        "complete_code": "import java.util.*;\npublic class Main {\npublic static void main(String[] args){\nScanner sc = new Scanner(System.in);\nint r=Integer.parseInt(sc.next());\nint c=Integer.parseInt(sc.next());\nint[][] rc=new int[r+1][c+1];\nfor(int i=0;i<r+1;i++){\n    for(int j=0;j<c+1;j++){\n    rc[i][j]=Integer.parseInt(sc.next());\n    rc[i][c]+=rc[i][j];\n    rc[r][j]+=rc[i][j];\n    }\n}\nfor(int i=0;i<r+1;i++){\n    for(int j=0;j<c+1;j++){\n    if(i!=c){System.out.print(\" \"+rc[i][j]+\" \");}else{System.out.println(\" \"+rc[i][j]+\" \");}\n    }\n}\n}\n}",
        "lines_of_code": 21,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException"
        ]
    },
    {
        "submission_id": "s032785761",
        "complete_code": "import java.util.*;\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a =    sc.nextInt();\n\t\tdouble num = 0;\n\t\tint arnum[] = new int[a];\n\t\tint num1 = 0;\n\t\tint num2 = 0;\n\t\tfor(int i = 0; i < a;i++) {\n\t\t\tint b =    sc.nextInt();\n\t\t\tarnum[i] = b;\n\t\t}\n\t\tArrays.sort(arnum);\n\t\tfor(int i = 0; i < arnum.length;i++) {\n\t\t\tarnum[i + 1] = arnum[i] + arnum[i + 1] / 2;\n\t\t}\n       System.out.println(arnum[arnum.length]);\n\t}\n}",
        "lines_of_code": 20,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException\n2. NoSuchElementException\n3. IOException\n4. RuntimeException"
        ]
    },
    {
        "submission_id": "s309698844",
        "complete_code": "import java.util.*;\nclass Main{\n\tpublic static void main(String[] args){\n\t  Scanner scan = new Scanner(System.in);\n\t  int N = scan.nextInt();\n      int num = 0;\n      while(N > 0){\n        num += N%10;\n        N /= 10;\n      }\n      if(num%9==0) System.out.println(\"Yes\");\n      else System.out.println(\"No\");\n\t}\n}",
        "lines_of_code": 14,
        "vanilla_response": [
            "Possible Runtime Exceptions -\nInputMismatchException"
        ]
    },
    {
        "submission_id": "s809643771",
        "complete_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n      \tint n = sc.nextInt();\n      \tint k = sc.nextInt();\n     \tint as[] = new int[n];\n      \tfor(int i = 0;i < n;i++) as[i] = sc.nextInt();\n      \tfor(int i = 0;i < k-1;i++){\n          \tif(as[k + i] > as[i]) System.out.println(\"Yes\");\n          \telse System.out.println(\"No\");\n        }\n\t}\n}",
        "lines_of_code": 14,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException\n2. ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s586173662",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt(), m = sc.nextInt(), k = sc.nextInt();\n        long ans = m;\n        for (int i=1;i<n-k;i++){\n            ans *= m-1;\n            ans %= 998244353;\n        }\n        ans *= combination(n, k);\n        ans %= 998244353;\n        System.out.println(ans);\n    }\n    private static long combination(long n, long k){\n        return k == 0 ? 1 : factorial(n) / (factorial(k) * factorial(n - k));\n    }\n    private static long factorial(long l){\n        return l == 0 ? 1 : l * factorial(l-1);\n    }\n}",
        "lines_of_code": 21,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.InputMismatchException\n2. java.lang.ArithmeticException\n3. java.lang.StackOverflowError"
        ]
    },
    {
        "submission_id": "s703686010",
        "complete_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\tint N = Integer.parseInt(scan.next());\n\t\tint b = Integer.parseInt(scan.next());\n\t\tint r = Integer.parseInt(scan.next());\n\t\tif (b == 0) {\n\t\t\tSystem.out.println(0);\n\t\t}else{\n\t\t\tint shou = N / (b+ r);\n\t\t\tint amari = N % (b+ r);\n\t\t\tSystem.out.println(shou * b + amari);\n\t\t}\n\t}\n}",
        "lines_of_code": 16,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException"
        ]
    },
    {
        "submission_id": "s643161352",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main (String [] args) {\n\t\tScanner scan = new Scanner (System.in);\n\t\tint x = scan.nextInt();\n\t\tint y = scan.nextInt();\n\t\tint gcd = 1;\n\t\tscan.close();\n\t\tif (x > y) {\n\t\t\tfor ( int i = 1; i <= (x % y); i++) {\n\t\t\t\tif ( (x % y) % i == 0) {\n\t\t\t\t\tif ( y % i == 0) {\n\t\t\t\t\t\tgcd = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (x < y){\n\t\t\tfor ( int i = 0; i <= (y % x); i++) {\n\t\t\t\tif ( (y % x) % i == 0) {\n\t\t\t\t\tif ( x % i == 0) {\n\t\t\t\t\t\tgcd = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tgcd = x;\n\t\t}\n\t\tSystem.out.println(gcd);\n\t}\n}",
        "lines_of_code": 30,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException\n2. ArithmeticException\n3. ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s674975369",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong();\n        long[] arr = new long[5];\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < 5; i++) {\n            arr[i] = sc.nextInt();\n            min = Math.min(arr[i], min);\n        }\n        long ans = n / min + 5;\n        System.out.println(ans);\n    }\n}",
        "lines_of_code": 15,
        "vanilla_response": [
            "Possible Runtime Exceptions - None"
        ]
    },
    {
        "submission_id": "s433633528",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tint ans = Integer.parseInt(String.valueOf(n).substring(0, 1)) - 1;\n\t\tint nLen = String.valueOf(n).length();\n\t\tfor (int i = 1; i < nLen; i++) {\n\t\t\tans = ans + 9;\n\t\t}\n\t\tif ( ans == -1) {\n\t\t\tans = 0;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}",
        "lines_of_code": 16,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException\n2. StringIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s898978258",
        "complete_code": "import java.util.*;\npublic class Main{\n    static Scanner kbd = new Scanner(System.in);\n    public static void main(String[] args){\n\twhile(kbd.hasNext()){\n\t    long a = kbd.nextLong();\n\t    long b = kbd.nextLong();\n\t    if(a>b) {\n\t\tlong w = a;\n\t\ta = b; \n\t\tb = w;\n\t    }\n\t    long gcd = a;\n\t    while(a%gcd!=0 || b%gcd!=0) gcd -= 2;\n\t    long lcm = a*b/gcd;\n\t    System.out.println(gcd+\" \"+lcm);\n\t}\n    }\n}",
        "lines_of_code": 19,
        "vanilla_response": [
            "Possible Runtime Exceptions -\n1. InputMismatchException"
        ]
    },
    {
        "submission_id": "s151577872",
        "complete_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(final String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextInt();\n        long a = sc.nextInt();\n        long b = sc.nextInt();\n        long num = (n / (a + b)) * a;\n        long rem = n % (a + b);\n        num += Math.max(a, rem);\n        System.out.println(num);\n    }\n}",
        "lines_of_code": 13,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nArithmeticException"
        ]
    },
    {
        "submission_id": "s181652696",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tint d[];\n\tboolean used[];\n\tint g[][];\n\tfinal int INF = 1 << 28;\n\tint die(int s, int n){\n\t\tused = new boolean[n];\n\t\td = new int[n];\n\t\tfor(int j=0; j<n; ++j){ d[j] = INF; }\n\t\td[s] = 0;\n\t\twhile(true){\n\t\t\tint u = -1;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(!used[v] && (u==-1 || d[v] < d[u])){\n\t\t\t\t\tu = v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(u==-1){ break; }\n\t\t\tused[u] = true;\n\t\t\tfor(int v=0; v<n; ++v){\n\t\t\t\tif(d[v] > d[u] + g[u][v]){\n\t\t\t\t\td[v] = d[u] + g[u][v];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint val = 0;\n\t\tfor(int i=0; i<n; ++i){\n\t\t\tval += d[i];\n\t\t}\n\t\treturn val;\n\t}\n\tvoid io(){\n\t\tjava.util.Scanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint max = 0;\t\n\t\t\tg = new int[10][10];\n\t\t\tfor(int i=0; i<10; ++i){\n\t\t\t\tfor(int j=0; j<10; ++j){\n\t\t\t\t\tg[i][j] = i==j ? 0 : INF;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tfor(int i=0; i<n; ++i){\n\t\t\t\tfinal int a = sc.nextInt();  final int b = sc.nextInt();  final int c = sc.nextInt();\n\t\t\t\tg[a][b] = c;\n\t\t\t\tg[b][a] = c;\n\t\t\t\tif(max < a+1){\n\t\t\t\t\tmax = a+1;\n\t\t\t\t}\n\t\t\t\tif(max < b+1){\n\t\t\t\t\tmax = b+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint min = INF;\n\t\t\tint num = -1;\n\t\t\tfor(int i=0; i<max; ++i){\n\t\t\t\tint res = die(i, max);\n\t\t\t\tif(res < min){\n\t\t\t\t\tmin = res;\n\t\t\t\t\tnum = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(num + \" \" + min);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().io();\n\t}\n}",
        "lines_of_code": 70,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.NoSuchElementException\n2. java.lang.ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s516615317",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tMain mainObj = new Main();\n\t\tmainObj.solve();\n\t}\n\tpublic void solve() throws IOException {\n\t\tFastScanner fs = new FastScanner();\n\t\tString s = fs.next();\n\t\tint k = fs.nextInt();\n\t\tfor(int i = 0; i < k; i++) {\n\t\t\tint charAt = s.charAt(i) - '0';\n\t\t\tif(charAt == 1) {\n\t\t\t\tif(i == k-1) {\n\t\t\t\t\tSystem.out.println(charAt);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tSystem.out.println(charAt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tpublic class FastScanner {\n\t\tBufferedReader reader;\n\t\tprivate StringTokenizer st;\n\t\tpublic FastScanner() {\n\t\t\tst = null;\n\t\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\t}\n\t\tpublic String next() throws IOException {\n\t\t\tif (st == null || !st.hasMoreElements()) {\n\t\t\t\tst = new StringTokenizer(reader.readLine());\n\t\t\t}\n\t\t\treturn st.nextToken();\n\t\t}\n\t\tpublic String nextLine() throws IOException {\n\t\t\tst = null;\n\t\t\tString readLine = null;\n\t\t\treadLine = reader.readLine();\n\t\t\treturn readLine;\n\t\t}\n\t\tpublic int nextInt() throws NumberFormatException, IOException {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\t\tpublic long nextLong() throws NumberFormatException, IOException {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\t\tpublic int[] nextIntArr(int n) throws NumberFormatException, IOException {\n\t\t\tint[] retArr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tretArr[i] = nextInt();\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\t\tpublic long[] nextLongArr(int n) throws NumberFormatException, IOException {\n\t\t\tlong[] retArr = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tretArr[i] = nextLong();\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\t\tpublic void close() throws IOException {\n\t\t\treader.close();\n\t\t}\n\t}\n}",
        "lines_of_code": 70,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nNumberFormatException"
        ]
    },
    {
        "submission_id": "s427438430",
        "complete_code": "import java.util.*;\nimport java.io.*;\npublic class Main {\n    static StringTokenizer st;\n    static BufferedReader br;  \n    static PrintWriter out;\n    static int parent[]; \n    public static void main(String[] args) throws IOException {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        int N = nextInt();\n        int M = nextInt();\n        parent = new int [N+1];\n        ArrayList<Integer> matrix [] = new ArrayList [M+1];\n        for (int x=1; x<=N; x++) {\n            matrix[x] = new ArrayList<Integer>();\n        }\n        for (int x=1; x<M; x++) {\n            int one = nextInt();\n            int two = nextInt();\n            matrix[one].add(two);\n            matrix[two].add(one);\n        }\n        bfs(matrix, 1);\n        boolean flag = true;\n        for (int x=1; x<=N; x++) {\n            if(parent[x] == 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            System.out.println(\"Yes\");\n            for (int x=2; x<=N; x++) {\n                System.out.println(parent[x]);\n            }\n        }\n        else{\n            System.out.println(\"No\");\n        }\n    }\n    public static boolean bfs (ArrayList [] matrix,  int start) {\n        Queue <Integer> queue = new LinkedList<Integer>();\n        queue.add(start);\n        while (!queue.isEmpty()) {\n            int cur = queue.poll();\n            for (int x=0; x<matrix[cur].size(); x++) {\n                int now = (int) matrix[cur].get(x);\n                if(parent[now]==0){\n                    parent[now] = cur;\n                    queue.add(now);\n                }\n            }\n        }\n        return false;\n    }\n    public static int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n    public static long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n    public static double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n    static String next() throws IOException {\n        while (st == null || !st.hasMoreTokens())\n            st = new StringTokenizer(br.readLine().trim());\n        return st.nextToken();\n    }\n}",
        "lines_of_code": 70,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s312899095",
        "complete_code": "import java.util.*;\nimport java.lang.*;\nimport java.math.*;\nimport java.io.*;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\npublic class Main{\n\tScanner sc=new Scanner(System.in);\n\tint INF=1<<28;\n\tdouble EPS=1e-9;\n\tint max=1000001;\n\tint[] dp1, a;\n\tint n;\n\tvoid run(){\n\t\tmax=10000;\n\t\tdp1=new int[max];\n\t\ta=new int[max];\n\t\tfill(dp1, INF);\n\t\tdp1[0]=0;\n\t\tfor(int j=0; j<5; j++){\n\t\t\tSystem.arraycopy(dp1, 0, a, 0, max);\n\t\t\tfor(int k=0; k*(k+1)*(k+2)/6<max; k++){\n\t\t\t\tint m=k*(k+1)*(k+2)/6;\n\t\t\t\tfor(int i=0; i+m<max; i++){\n\t\t\t\t\tdp1[i+m]=min(dp1[i+m], a[i]+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(;;){\n\t\t\tn=sc.nextInt();\n\t\t\tif(n==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsolve();\n\t\t}\n\t}\n\tvoid solve(){\n\t\tint[] dp2=new int[n+1];\n\t\tfill(dp2, INF);\n\t\tdp2[0]=0;\n\t\tfor(int j=0;; j++){\n\t\t\tSystem.arraycopy(dp2, 0, a, 0, n+1);\n\t\t\tfor(int k=0; k*(k+1)*(k+2)/6<n+1; k++){\n\t\t\t\tint m=k*(k+1)*(k+2)/6;\n\t\t\t\tif(m%2==0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor(int i=0; i+m<n+1; i++){\n\t\t\t\t\tdp2[i+m]=min(dp2[i+m], a[i]+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp2[n]<INF){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintln(dp1[n]+\" \"+dp2[n]);\n\t}\n\tvoid debug(Object... os){\n\t\tSystem.err.println(Arrays.deepToString(os));\n\t}\n\tvoid print(String s){\n\t\tSystem.out.print(s);\n\t}\n\tvoid println(String s){\n\t\tSystem.out.println(s);\n\t}\n\tpublic static void main(String[] args){\n\t\tnew Main().run();\n\t}\n}",
        "lines_of_code": 70,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNumberFormatException\nRuntimeException\nIOException"
        ]
    },
    {
        "submission_id": "s017045505",
        "complete_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        if (a == 0) {\n            System.out.println(a);\n            return;\n        }\n        if (n - (a + b) >= 0) {\n            int c = n / (a + b);\n            int d = n % (a + b);\n            if (d - a > 0) {\n                System.out.println((c * a) + a);\n            } else {\n                System.out.println((c * a) + d);\n            }\n        } else {\n            if (n - a >= 0) {\n                System.out.println(a);\n            } else {\n                System.out.println(n);\n            }\n        }\n        sc.close();\n    }\n}",
        "lines_of_code": 29,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException\n2. NoSuchElementException"
        ]
    },
    {
        "submission_id": "s244579818",
        "complete_code": "import java.util.*;\npublic class Main{\n  public static void main(String[] args){\n    Scanner sc = new Scanner(System.in);\n\tint r = sc.nextInt();\n\tdouble area = Math.PI * (double)r * (double)r; \n        double cir = Math.PI * 2 * (double)r ;\n\tSystem.out.printf(\"%6f\",area);\n\tSystem.out.printf(\" \");\n\tSystem.out.printf(\"%6f\\n\",cir);\t\n  }\n}",
        "lines_of_code": 12,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException\n2. NoSuchElementException"
        ]
    },
    {
        "submission_id": "s077483082",
        "complete_code": "import java.util.Scanner;\nimport java.util.ArrayList;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s=sc.next();\n\t\tint x =sc.nextInt();\n\t\tint y =sc.nextInt();\n\t\tArrayList<Integer> xlist=new ArrayList<>();\n\t\tArrayList<Integer> ylist=new ArrayList<>();\n\t\tint count=0;\n\t\tboolean isX=true;\n\t\tfor(int i=0; i<s.length(); i++){\n\t\t\tif(s.charAt(i)=='T'){\n\t\t\t\tif(isX){\n\t\t\t\t\txlist.add(count);\n\t\t\t\t}else{\n\t\t\t\t\tylist.add(count);\n\t\t\t\t}\n\t\t\t\tisX=!isX;\n\t\t\t\tcount=0;\n\t\t\t}else{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(isX){\n\t\t\txlist.add(count);\n\t\t}else{\n\t\t\tylist.add(count);\n\t\t}\n\t\tint sumx=0;\n\t\tboolean[][] dpx=new boolean[xlist.size()][16000];\n\t\tboolean[][] dpy=new boolean[ylist.size()+1][16000];\n\t\tint nx=0;\n\t\tint ny=1;\n\t\tfor(int i:xlist){\n\t\t\tif(nx==0){\n\t\t\t\tsumx+=i;\n\t\t\t\tdpx[nx][sumx+7999]=true;\n\t\t\t\tnx++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(int j=-sumx; j<=sumx; j++){\n\t\t\t\tif(dpx[nx-1][j+7999]){\n\t\t\t\t\tdpx[nx][j+7999+i]=true;\n\t\t\t\t\tdpx[nx][j+7999-i]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnx++;\n\t\t\tsumx+=i;\n\t\t}\n\t\tint sumy=0;\n\t\tdpy[0][7999]=true;\n\t\tfor(int i:ylist){\n\t\t\tfor(int j=-sumy; j<=sumy; j++){\n\t\t\t\tif(dpy[ny-1][j+7999]){\n\t\t\t\t\tdpy[ny][j+7999+i]=true;\n\t\t\t\t\tdpy[ny][j+7999-i]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tny++;\n\t\t\tsumy+=i;\n\t\t}\n\t\tif(dpx[xlist.size()-1][7999+x] && dpy[ylist.size()][7999+y]){\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}else{\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}",
        "lines_of_code": 70,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. InputMismatchException\n2. IndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s867545148",
        "complete_code": "import java.io.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\ttry {\n\t\t\tdouble dp[][][][] = new double[15][9][9][9];\n\t\t\tfor(int i=0;i<15;i++){\n\t\t\t\tfor(int j=0;j<9;j++){\n\t\t\t\t\tfor(int k=0;k<9;k++){\n\t\t\t\t\t\tfor(int l=0;l<9;l++){\n\t\t\t\t\t\t\tdp[i][j][k][l] = -1.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString line;\n\t\t\twhile(true){\n\t\t\t\tline = br.readLine();\n\t\t\t\tint n = Integer.parseInt(line);\n\t\t\t\tif(n==0) break;\n\t\t\t\tline = br.readLine();\n\t\t\t\tchar s = line.split(\" \")[0].charAt(0), t = line.split(\" \")[1].charAt(0), b = line.split(\" \")[2].charAt(0);\n\t\t\t\tdouble ans = solve(dp, n,s-'A',t-'A',b-'A');\n\t\t\t\tSystem.out.println(ans);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tpublic static double solve(double[][][][] dp, int n, int s, int t, int b){\n\t\tif(dp[n][s][t][b]>=0) return dp[n][s][t][b];\n\t\tif(n==0){\n\t\t\tif(s==t){\n\t\t\t\tdp[n][s][t][b] = 1.0;\n\t\t\t\treturn 1.0;\n\t\t\t} else {\n\t\t\t\tdp[n][s][t][b] = 0.0;\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t} else {\n\t\t\tdouble ret = 0;\n\t\t\tif(dp[n-1][s>2&&b!=s-3?s-3:s][t][b]>=0){\n\t\t\t\tret += 0.25*dp[n-1][s>2&&b!=s-3?s-3:s][t][b];\n\t\t\t} else {\n\t\t\t\tdp[n-1][s>2&&b!=s-3?s-3:s][t][b] = solve(dp,n-1,s>2&&b!=s-3?s-3:s,t,b); \n\t\t\t\tret += 0.25*dp[n-1][s>2&&b!=s-3?s-3:s][t][b];\n\t\t\t}\n\t\t\tif(dp[n-1][s%3!=2&&b!=s+1?s+1:s][t][b]>=0){\n\t\t\t\tret += 0.25*dp[n-1][s%3!=2&&b!=s+1?s+1:s][t][b];\n\t\t\t} else {\n\t\t\t\tdp[n-1][s%3!=2&&b!=s+1?s+1:s][t][b] = solve(dp,n-1,s%3!=2&&b!=s+1?s+1:s,t,b); \n\t\t\t\tret += 0.25*dp[n-1][s%3!=2&&b!=s+1?s+1:s][t][b];\n\t\t\t}\n\t\t\tif(dp[n-1][s<6&&b!=s+3?s+3:s][t][b]>=0){\n\t\t\t\tret += 0.25*dp[n-1][s<6&&b!=s+3?s+3:s][t][b];\n\t\t\t} else {\n\t\t\t\tdp[n-1][s<6&&b!=s+3?s+3:s][t][b] = solve(dp,n-1,s<6&&b!=s+3?s+3:s,t,b);\n\t\t\t\tret += 0.25*dp[n-1][s<6&&b!=s+3?s+3:s][t][b];\n\t\t\t}\n\t\t\tif(dp[n-1][s%3!=0&&b!=s-1?s-1:s][t][b]>=0){\n\t\t\t\tret += 0.25*dp[n-1][s%3!=0&&b!=s-1?s-1:s][t][b];\n\t\t\t} else {\n\t\t\t\tdp[n-1][s%3!=0&&b!=s-1?s-1:s][t][b] =solve(dp,n-1,s%3!=0&&b!=s-1?s-1:s,t,b);\n\t\t\t\tret += 0.25*dp[n-1][s%3!=0&&b!=s-1?s-1:s][t][b];\n\t\t\t}\n\t\t\tdp[n][s][t][b] = ret;\n\t\t\treturn ret;\n\t\t}\n\t}\n}",
        "lines_of_code": 70,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s412044857",
        "complete_code": "import java.util.*;\nimport java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FastScanner in = new FastScanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n        int n = in.nextInt();\n        int[] nums = in.nextIntArr(n);\n        int[] counts = new int[4];\n        int sum = 0;\n        for (int x : nums) {\n            sum += x;\n            counts[x]++;\n        }\n        double[][][] dp = new double[counts[3] + 1][counts[2] + 1][counts[1] + 1];\n        for (double[][] x : dp) {\n            for (double[] y : x) {\n                Arrays.fill(y, -1);\n            }\n        }\n        out.println(solve(sum, counts, dp));\n        out.close();\n    }\n    static double solve(int sum, int[] counts, double[][][] dp) {\n        if (sum == 0) return 0;\n        if (dp[counts[3]][counts[2]][counts[1]] == -1) {\n            double canChoose = 0;\n            double rest = 0;\n            for (int x : counts) canChoose += x;\n            canChoose -= counts[0];\n            for (int i = 1; i <= 3; i++) {\n                if (counts[i] > 0) {\n                    counts[i]--;\n                    counts[i - 1]++;\n                    rest += solve(sum - 1, counts, dp) * (counts[i] + 1);\n                    counts[i]++;\n                    counts[i - 1]--;\n                }\n            }\n            dp[counts[3]][counts[2]][counts[1]] = ((canChoose + counts[0]) / canChoose) + (rest / canChoose);\n        }\n        return dp[counts[3]][counts[2]][counts[1]];\n    }\n    static class FastScanner {\n        BufferedReader br;\n        StringTokenizer st;\n        public FastScanner(InputStream i) {\n            br = new BufferedReader(new InputStreamReader(i));\n            st = new StringTokenizer(\"\");\n        }\n        public String next() throws IOException {\n            if (st.hasMoreTokens()) {\n                return st.nextToken();\n            }\n            else\n                st = new StringTokenizer(br.readLine());\n            return next();\n        }\n        public int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n        public double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n        public long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n        public String nextLine() throws IOException {\n            if (!st.hasMoreTokens()) {\n                st = new StringTokenizer(br.readLine());\n                return nextLine();\n            }\n            String ret = \"\";\n            while (st.hasMoreTokens()) {\n                ret += st.nextToken();\n            }\n            return ret;\n        }\n        public int[] nextIntArr(int size) throws IOException {\n            int[] arr = new int[size];\n            for (int i = 0; i < arr.length; i++) {\n                arr[i] = nextInt();\n            }\n            return arr;\n        }\n        public long[] nextLongArr(int size) throws IOException {\n            long[] arr = new long[size];\n            for (int i = 0; i < arr.length; i++) {\n                arr[i] = nextLong();\n            }\n            return arr;\n        }\n        public double[] nextDoubleArr(int size) throws IOException {\n            double[] arr = new double[size];\n            for (int i = 0; i < arr.length; i++) {\n                arr[i] = nextDouble();\n            }\n            return arr;\n        }\n    }\n}",
        "lines_of_code": 101,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s115766934",
        "complete_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tString[] s = new String[2];\n\t\twhile(true)\n\t\t{\n\t\t\ts[0] = scan.next();\n\t\t\tif(s[0].equals(\".\")) {break;}\n\t\t\ts[1] = scan.next();\n\t\t\tList<String> ss1 = new ArrayList<String>();\n\t\t\tList<Integer> location = new ArrayList<Integer>();\n\t\t\tint miniCounter = -1;\n\t\t\tint stringDifferences = 0;\n\t\t\tint numOfSs2 = 0;\n\t\t\tboolean done = false;\n\t\t\tfor(int c = 0; c <= 1; c++)\n\t\t\t{\n\t\t\t\tint zure = 0;\n\t\t\t\tint start = -1;\n\t\t\t\tint end = 0;\n\t\t\t\tfor(int i = 0; i < s[c].length(); i++)\n\t\t\t\t{\n\t\t\t\t\tif(c == 1)\n\t\t\t\t\t{\n\t\t\t\t\t}\n\t\t\t\t\tString cur = s[c].substring(i, i+1);\n\t\t\t\t\tif(cur.equals(\"\\\"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(start == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstart = i+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tend = i-1;\n\t\t\t\t\t\t\tif(c == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlocation.add(i);\n\t\t\t\t\t\t\t\tss1.add(s[c].substring(start, end+1));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(c == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnumOfSs2 += 1;\n\t\t\t\t\t\t\t\tminiCounter += 1;\n\t\t\t\t\t\t\t\tString thisOne = s[c].substring(start, end+1);\n\t\t\t\t\t\t\t\tString prevOne = ss1.get(miniCounter);\n\t\t\t\t\t\t\t\tif(!thisOne.equals(prevOne))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstringDifferences += 1;\n\t\t\t\t\t\t\t\t\tif(stringDifferences >= 2)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"DIFFERENT\");\n\t\t\t\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tzure = prevOne.length() - thisOne.length();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstart = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(start == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(c == 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tString cur1 = s[0].substring(i+zure, i+1+zure);\n\t\t\t\t\t\t\t\tString cur2 = s[1].substring(i, i+1);\n\t\t\t\t\t\t\t\tif(!cur1.equals(cur2))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"DIFFERENT\");\n\t\t\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!done)\n\t\t\t{\n\t\t\t\tif(numOfSs2 == ss1.size())\n\t\t\t\t{\n\t\t\t\t\tif(stringDifferences == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"CLOSE\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(stringDifferences == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"IDENTICAL\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"DIFFERENT\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
        "lines_of_code": 108,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. ArrayIndexOutOfBoundsException\n2. NullPointerException"
        ]
    },
    {
        "submission_id": "s272417402",
        "complete_code": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport java.io.BufferedReader;\nimport java.util.Comparator;\nimport java.util.Collections;\nimport java.io.InputStream;\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        FSilverFoxVsMonster solver = new FSilverFoxVsMonster();\n        solver.solve(1, in, out);\n        out.close();\n    }\n    static class FSilverFoxVsMonster {\n        public int llt(ArrayList<Long> a, int l, int r, int x) {\n            int temp = r;\n            int mid = (l + r) / 2;\n            if (a.get(mid) >= x) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n            while (l >= temp) l--;\n            while (l > 0 && a.get(l) > x) l--;\n            return l;\n        }\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n = in.nextInt();\n            int D = in.nextInt();\n            int A = in.nextInt();\n            ArrayList<node> a = new ArrayList<node>();\n            for (int i = 0; i < n; i++) {\n                a.add(new node(in.nextInt(), in.nextInt()));\n            }\n            Collections.sort(a, new Comparator<node>() {\n                public int compare(node o1, node o2) {\n                    return o1.x - o2.x;\n                }\n            });\n            long pre[] = new long[n + 1];\n            ArrayList<Long> d = new ArrayList<>();\n            d.add(-1L);\n            int c = 0;\n            c++;\n            long ans = 0;\n            for (int i = 0; i < n; i++) {\n                int x = a.get(i).x;\n                int y = a.get(i).x - 2 * D;\n                if (y < 0) y = 0;\n                y--;\n                int q = llt(d, 0, c, y);\n                long t = pre[c - 1] - pre[q];\n                a.get(i).y = a.get(i).y - t > 0 ? a.get(i).y - t : 0;\n                long an = (long) Math.ceil((float) a.get(i).y / A);\n                ans += an;\n                pre[c] = pre[c - 1] + an * A;\n                d.add((long) a.get(i).x);\n                c++;\n            }\n            out.println(ans);\n        }\n        class node {\n            int x;\n            long y;\n            node(int x, int y) {\n                this.x = x;\n                this.y = y;\n            }\n        }\n    }\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n    }\n}",
        "lines_of_code": 101,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nRuntimeException\nNumberFormatException\nFileNotFoundException\nNullPointerException\nClassCastException"
        ]
    },
    {
        "submission_id": "s793668538",
        "complete_code": "import java.io.*;\nimport java.util.*;\nclass Main{\n    public static void main(String[] args) throws Exception {\n\t\thayami saori = new hayami();\n\t\tint a = saori.saori_hayami();\n\t\tString s = saori.nextHayami();\n\t\tString[] str = s.split(\"\");\n\t\tint b = a/2;\n\t\tString str2 = null;\n\t\tString str3= null;\n\t\tfor(int i = 0;i < a;i++){\n\t\t\tif(i < b){\n\t\t\t\tstr2 += str[i];\n\t\t\t} else{\n\t\t\t\tstr3 += str[i];\n\t\t\t}\n\t\t}\n\t\tif(str2.equals(str3)){\n\t\t\tSystem.out.println(\"Yes\");\n\t\t} else{\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n    }\n}\nclass hayami implements Closeable {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] hayami = new byte[1024];\n\tprivate int Hayami = 0;\n\tprivate int saori = 0;\n\tprivate boolean HayamiSaori() {\n\t\tif (Hayami < saori) {\n\t\t\treturn true;\n\t\t}else{\n\t\t\tHayami = 0;\n\t\t\ttry {\n\t\t\t\tsaori = in.read(hayami);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tif (saori <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tprivate int SaoriHayami() { \n\t\tif (HayamiSaori()) {\n            return hayami[Hayami++];\n         }else{\n             return -1;\n         }\n\t}\n\tprivate static boolean hayami_saori(int hayami) { \n\t\treturn 33 <= hayami && hayami <= 126;\n\t}\n\tpublic boolean hayamisaori() { \n\t\twhile(HayamiSaori() && !hayami_saori(hayami[Hayami])) Hayami++; return HayamiSaori();\n\t}\n\tpublic String nextHayami() {\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\n\t\tStringBuilder hayamin = new StringBuilder();\n\t\tint saori = SaoriHayami();\n\t\twhile(hayami_saori(saori)) {\n\t\t\thayamin.appendCodePoint(saori);\n\t\t\tsaori = SaoriHayami();\n\t\t}\n\t\treturn hayamin.toString();\n\t}\n\tpublic long saorihayami() {\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\n\t\tlong hayami = 0;\n\t\tboolean misao = false;\n\t\tint saori = SaoriHayami();\n\t\tif (saori == '-') {\n\t\t\tmisao = true;\n\t\t\tsaori = SaoriHayami();\n\t\t}\n\t\tif (saori < '0' || '9' < saori) {\n\t\t\tthrow new NumberFormatException();\n\t\t}\n\t\twhile(true){\n\t\t\tif ('0' <= saori && saori <= '9') {\n\t\t\t\thayami *= 10;\n\t\t\t\thayami += saori - '0';\n\t\t\t}else if(saori == -1 || !hayami_saori(saori)){\n\t\t\t\treturn misao ? -hayami : hayami;\n\t\t\t}else{\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tsaori = SaoriHayami();\n\t\t}\n\t}\n\tpublic int saori_hayami() {\n\t\tlong hayami = saorihayami();\n\t\tif (hayami < Integer.MIN_VALUE || hayami > Integer.MAX_VALUE) throw new NumberFormatException();\n\t\treturn (int) hayami;\n\t}\n\tpublic double Hayamin() { \n\t\treturn Double.parseDouble(nextHayami());\n\t}\n\tpublic void close() {\n\t\ttry {\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t}\n    }\n}",
        "lines_of_code": 108,
        "vanilla_response": [
            "Possible Runtime Exceptions - None"
        ]
    },
    {
        "submission_id": "s548836860",
        "complete_code": "import java.util.*;\nclass Main {\n\tScanner sc = new Scanner(System.in);\n\tpublic void run() {\n\t\tint Case=sc.nextInt();sc.nextLine();\n\t\twhile (Case--!=0){\n\t\t\tString str=sc.nextLine();\n\t\t\tint n=sc.nextInt();sc.nextLine();\n\t\t\tint cursor=0;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tString op=sc.nextLine();\n\t\t\t\tif(\"forward word\".equals(op)){\n\t\t\t\t\tboolean through=false;\n\t\t\t\t\twhile(!through || cursor<str.length() && str.charAt(cursor)!=' '){\n\t\t\t\t\t\tcursor++;\n\t\t\t\t\t\tthrough=true;\n\t\t\t\t\t}\n\t\t\t\t\tif(cursor<str.length())cursor++;\n\t\t\t\t}else if(\"forward char\".equals(op)){\n\t\t\t\t\tif(cursor<str.length()-1)cursor++;\n\t\t\t\t}else if(\"backward word\".equals(op)){\n\t\t\t\t\tboolean through=false;\n\t\t\t\t\twhile(!through ||  cursor>0 && str.charAt(cursor)!=' '){\n\t\t\t\t\t\tcursor--;\n\t\t\t\t\t\tthrough=true;\n\t\t\t\t\t}\n\t\t\t\t\tif(cursor>0)cursor--;\n\t\t\t\t\tif(cursor<0)cursor=0;\n\t\t\t\t}else if(\"backward char\".equals(op)){\n\t\t\t\t\tif(cursor>0)cursor--;\n\t\t\t\t}else if(\"delete char\".equals(op)){\n\t\t\t\t\tif(1<=cursor && cursor <str.length())str=str.substring(0,cursor-1)+str.substring(cursor);\n\t\t\t\t}else if(\"delete word\".equals(op)){\n\t\t\t\t\tif(cursor>str.length())continue;\n\t\t\t\t\tint e=cursor;\n\t\t\t\t\twhile(str.length()>e && str.length()>0 && str.charAt(e)!=' ')e++;\n\t\t\t\t\tstr=str.substring(0,cursor)+str.substring(e);\n\t\t\t\t}else if(op.startsWith(\"insert\")){\n\t\t\t\t\tint s=-1,e=-1;\n\t\t\t\t\tfor(int index=0;index<op.length();index++){\n\t\t\t\t\t\tif(op.charAt(index)=='\"'){\n\t\t\t\t\t\t\tif(s==-1)s=index;\n\t\t\t\t\t\t\telse e=index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tString word=op.substring(s+1,e);\n\t\t\t\t\tstr=str.substring(0,cursor)+word+str.substring(cursor);\n\t\t\t\t\tcursor+=word.length();\n\t\t\t\t}\n\t\t\t}\n\t\t\tln(str.substring(0,cursor)+\"^\"+str.substring(cursor));\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tpublic static void pr(Object o) {\n\t\tSystem.out.print(o);\n\t}\n\tpublic static void ln(Object o) {\n\t\tSystem.out.println(o);\n\t}\n\tpublic static void ln() {\n\t\tSystem.out.println();\n\t}\n}\nclass P {\n\tdouble x, y;\n\tpublic static final double EPS = 1e-10;\n\tP(double _x, double _y) {\n\t\tx = _x;\n\t\ty = _y;\n\t}\n\tpublic static final P Xunit = new P(1, 0);\n\tpublic static final P Yunit = new P(0, 1);\n\tpublic static final P O = new P(0, 0);\n\tpublic static double cross(P a, P b) {\n\t\treturn a.x * b.y - a.y * b.x;\n\t}\n\tpublic P s(P a) {\n\t\treturn new P(x - a.x, y - a.y);\n\t}\n\tpublic static double getS(List<P> plist) {\n\t\tP o1 = plist.get(0);\n\t\tP prev = plist.get(1);\n\t\tdouble S = 0;\n\t\tfor (P p : plist.subList(2, plist.size())) {\n\t\t\tS += getS(o1, prev, p);\n\t\t\tprev = p;\n\t\t}\n\t\treturn S;\n\t}\n\tpublic static double getS(P o, P a, P b) {\n\t\treturn cross(a.s(o), b.s(o)) / 2;\n\t}\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof P) {\n\t\t\tP p = (P) obj;\n\t\t\treturn x == p.x && y == p.y;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic String toString() {\n\t\treturn \"(\" + x + \",\" + y + \")\";\n\t}\n}",
        "lines_of_code": 107,
        "vanilla_response": [
            "Possible Runtime Exceptions:\nInputMismatchException\nIndexOutOfBoundsException\nNullPointerException"
        ]
    },
    {
        "submission_id": "s158079687",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static class Task {\n        public void solve(Scanner sc, PrintWriter pw) throws IOException {\n            int n = sc.nextInt();\n            int[] A = new int[n];\n            int[] B = new int[n];\n            for (int i = 0; i < n; i++) {\n                A[i] = sc.nextInt();\n            }\n            for (int i = 0; i < n; i++) {\n                B[i] = sc.nextInt();\n            }\n            if (Arrays.equals(A, B)) {\n                pw.println(0);\n                return;\n            }\n            boolean[] eq = new boolean[n];\n            int eqCount = 0;\n            for (int i = 0; i < n; i++) {\n                eq[i] = A[i] == B[i];\n                eqCount += eq[i] ? 1 : 0;\n                if (A[i] > B[i]) {\n                    pw.println(-1);\n                    return;\n                }\n            }\n            PriorityQueue<int[]> bPQ = new PriorityQueue<>(new Comparator<int[]>() {\n                @Override\n                public int compare(int[] o1, int[] o2) {\n                    return -o1[0] + o2[0];\n                }\n            });\n            for (int i = 0; i < n; i++) {\n                bPQ.add(new int[]{B[i], i});\n            }\n            long steps = 0;\n            while (eqCount < n) {\n                int[] entry = bPQ.poll();\n                int index = entry[1];\n                int prevVal = B[(index + n - 1) % n];\n                int nextVal = B[(index + 1) % n];\n                int decreOnce = prevVal + nextVal;\n                int atMostDecre = (entry[0] - A[index]) / decreOnce;\n                if (atMostDecre <= 0) {\n                    pw.println(-1);\n                    return;\n                }\n                steps += atMostDecre;\n                int curVal = entry[0] - atMostDecre * decreOnce;\n                B[index] = curVal;\n                if (curVal == A[index]) {\n                    eqCount++;\n                }\n                bPQ.add(new int[]{curVal, index});\n            }\n            pw.println(steps);\n        }\n    }\n    static long TIME_START, TIME_END;\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new FileInputStream(\"input\"));\n        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out));\n        Runtime runtime = Runtime.getRuntime();\n        long usedMemoryBefore = runtime.totalMemory() - runtime.freeMemory();\n        TIME_START = System.currentTimeMillis();\n        Task t = new Task();\n        t.solve(sc, pw);\n        TIME_END = System.currentTimeMillis();\n        long usedMemoryAfter = runtime.totalMemory() - runtime.freeMemory();\n        pw.close();\n        System.err.println(\"Memory increased: \" + (usedMemoryAfter - usedMemoryBefore) / 1000000);\n        System.err.println(\"Time used: \" + (TIME_END - TIME_START) + \".\");\n    }\n    static class Scanner {\n        StringTokenizer st;\n        BufferedReader br;\n        public Scanner(InputStream s) {\n            br = new BufferedReader(new InputStreamReader(s));\n        }\n        public Scanner(FileReader s) throws FileNotFoundException {\n            br = new BufferedReader(s);\n        }\n        public String next() throws IOException {\n            while (st == null || !st.hasMoreTokens())\n                st = new StringTokenizer(br.readLine());\n            return st.nextToken();\n        }\n        public int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n        public long nextLong() throws IOException {\n            return Long.parseLong(next());\n        }\n        public String nextLine() throws IOException {\n            return br.readLine();\n        }\n        public double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n        public boolean ready() throws IOException {\n            return br.ready();\n        }\n    }\n}",
        "lines_of_code": 106,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nFileNotFoundException\nNumberFormatException\nRuntimeException"
        ]
    },
    {
        "submission_id": "s676872160",
        "complete_code": "import java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\npublic class Main {\n\tstatic boolean debug = true;\n\tstatic Scanner sc = new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tint N=sc.nextInt();\n\t\tdouble K=sc.nextInt();\n\t\tMap<Integer,Integer> m= new HashMap();\n\t\tfor(int i=0;i<N;i++){\n\t\t\tint key=sc.nextInt();\n\t\t\tint value=sc.nextInt();\n\t\t\tm.put(key, m.getOrDefault(key, 0)+value);\n\t\t}\n\t\tList<Entry<Integer,Integer>> l= new ArrayList();\n\t\tl.addAll(m.entrySet());\n\t\tCollections.sort(l,(a,b)->a.getKey()-b.getKey());\n\t\tfor(int i=0;i<l.size();i++){\n\t\t\tK-=l.get(i).getValue();\n\t\t\tif(K<=0){\n\t\t\t\tSystem.out.println(l.get(i).getKey());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tprivate static void print(String string) {\n\t\tif (debug)\n\t\t\tSystem.out.println(string);\n\t}\n\tprivate static void print(int[] data) {\n\t\tif (debug) {\n\t\t\tfor (int i = 0; i < data.length; i++)\n\t\t\t\tSystem.out.println(i + \":\" + data[i]);\n\t\t}\n\t}\n\tprivate static void print(String[] data) {\n\t\tif (debug) {\n\t\t\tfor (int i = 0; i < data.length; i++)\n\t\t\t\tSystem.out.println(i + \":\" + data[i]);\n\t\t}\n\t}\n\tprivate static void print(char[] data) {\n\t\tif (debug) {\n\t\t\tfor (int i = 0; i < data.length; i++)\n\t\t\t\tSystem.out.println(i + \":\" + data[i]);\n\t\t}\n\t}\n\tprivate static void print(double[] data) {\n\t\tif (debug) {\n\t\t\tfor (int i = 0; i < data.length; i++)\n\t\t\t\tSystem.out.println(i + \":\" + data[i]);\n\t\t}\n\t}\n\tprivate static void print(int[][] data) {\n\t\tif (debug) {\n\t\t\tfor (int i = 0; i < data.length; i++) {\n\t\t\t\tfor (int j = 0; j < data.length; j++) {\n\t\t\t\t\tSystem.out.print(i + \" \" + j + \":\" + data[i]);\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n\tprivate static void print(char[][] data) {\n\t\tif (debug) {\n\t\t\tfor (int i = 0; i < data.length; i++) {\n\t\t\t\tfor (int j = 0; j < data.length; j++) {\n\t\t\t\t\tSystem.out.print(i + \" \" + j + \":\" + data[i][j] + \" \");\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n\tprivate static void print(String[][] data) {\n\t\tif (debug) {\n\t\t\tfor (int i = 0; i < data.length; i++) {\n\t\t\t\tfor (int j = 0; j < data.length; j++) {\n\t\t\t\t\tSystem.out.print(i + \" \" + j + \":\" + data[i][j] + \" \");\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n\tprivate static void print(double[][] data) {\n\t\tif (debug) {\n\t\t\tfor (int i = 0; i < data.length; i++) {\n\t\t\t\tfor (int j = 0; j < data.length; j++) {\n\t\t\t\t\tSystem.out.print(i + \" \" + j + \":\" + data[i][j] + \" \");\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void inPutData(char[][] c) {\n\t\tfor (int i = 0; i < c.length; i++) {\n\t\t\tc[i] = sc.nextLine().toCharArray();\n\t\t}\n\t}\n}",
        "lines_of_code": 109,
        "vanilla_response": [
            "Possible Runtime Exceptions - None"
        ]
    },
    {
        "submission_id": "s233304402",
        "complete_code": "import java.util.*;\nimport java.io.*;\npublic class Main {\n\tstatic int digits(int n) {\n\t\tint sum = 0; \n\t\twhile(n != 0) {\n\t\t\tn /= 10; \n\t\t\tsum += n%10; \n\t\t}\n\t\treturn sum ; \n\t}\n\tpublic static void main(String[] args) throws IOException {\n\t\tInputReader in = new InputReader(System.in);\n\t\tint n = in.readInt();  \n\t\tint sum = digits(n);\n\t\tSystem.out.println(n % sum == 0 ? \"Yes\":\"No\"); \n\t}\n}\nclass InputReader {\n\tprivate InputStream stream;\n\tprivate byte[] buf = new byte[1024];\n\tprivate int curChar;\n\tprivate int numChars;\n\tprivate SpaceCharFilter filter;\n\tpublic InputReader(InputStream stream) {\n\t\tthis.stream = stream;\n\t}\n\tpublic int read() {\n\t\tif (numChars == -1)\n\t\t\tthrow new InputMismatchException();\n\t\tif (curChar >= numChars) {\n\t\t\tcurChar = 0;\n\t\t\ttry {\n\t\t\t\tnumChars = stream.read(buf);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tif (numChars <= 0)\n\t\t\t\treturn -1;\n\t\t}\n\t\treturn buf[curChar++];\n\t}\n\tpublic int readInt() {\n\t\tint c = read();\n\t\twhile (isSpaceChar(c))\n\t\t\tc = read();\n\t\tint sgn = 1;\n\t\tif (c == '-') {\n\t\t\tsgn = -1;\n\t\t\tc = read();\n\t\t}\n\t\tint res = 0;\n\t\tdo {\n\t\t\tif (c < '0' || c > '9')\n\t\t\t\tthrow new InputMismatchException();\n\t\t\tres *= 10;\n\t\t\tres += c - '0';\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(c));\n\t\treturn res * sgn;\n\t}\n\tpublic String readString() {\n\t\tint c = read();\n\t\twhile (isSpaceChar(c))\n\t\t\tc = read();\n\t\tStringBuilder res = new StringBuilder();\n\t\tdo {\n\t\t\tres.appendCodePoint(c);\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(c));\n\t\treturn res.toString();\n\t}\n\tpublic long readLong() {\n\t\tint c = read();\n\t\twhile (isSpaceChar(c)) {\n\t\t\tc = read();\n\t\t}\n\t\tint sgn = 1;\n\t\tif (c == '-') {\n\t\t\tsgn = -1;\n\t\t\tc = read();\n\t\t}\n\t\tlong res = 0;\n\t\tdo {\n\t\t\tif (c < '0' || c > '9') {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tres *= 10;\n\t\t\tres += c - '0';\n\t\t\tc = read();\n\t\t} while (!isSpaceChar(c));\n\t\treturn res * sgn;\n\t}\n\tpublic boolean isSpaceChar(int c) {\n\t\tif (filter != null)\n\t\t\treturn filter.isSpaceChar(c);\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t}\n\tpublic String next() {\n\t\treturn readString();\n\t}\n\tpublic interface SpaceCharFilter {\n\t\tpublic boolean isSpaceChar(int ch);\n\t}\n}",
        "lines_of_code": 105,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException"
        ]
    },
    {
        "submission_id": "s171725475",
        "complete_code": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nclass Solver extends Main{\n\tSolver(){\n\t}\n}\n@SuppressWarnings(\"unchecked\")\nclass Main{\n\tstatic int imax=Integer.MAX_VALUE;\n\tstatic long lmax=Long.MAX_VALUE;\n\tpublic static void main(String[] args) throws FileNotFoundException{\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=readI(sc);\n\t\tList<Integer> num=new ArrayList<Integer>();\n\t\tfor(int i=0;i<n; i++){\n\t\t\tnum.add(readI(sc)-1);\n\t\t}\n\t\tboolean chain=true;\n\t\tboolean fnd=false;\n\t\tint idx=num.get(0);\n\t\tint cnt=1;\n\t\tMap<Integer,Integer> memo=new HashMap<Integer,Integer>();\n\t\tmemo.put(idx,1);\nif(idx==1){\n\t\t\tfnd=true;\n\t\t\tchain=false;\n\t\t}\n\t\twhile(chain==true){\n\t\t\tidx=num.get(idx);\n\t\t\tif(memo.containsKey(idx)){\n\t\t\t\tmemo.put(idx,1);\n\t\t\t\tcnt+=1;\n\t\t\t\tif(idx==1){\n\t\t\t\t\tfnd=true;\n\t\t\t\t\tchain=false;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tchain=false;\n\t\t\t}\n\t\t}\n\t\tputs(fnd==true ? cnt : -1);\n\t\tnew Solver();\n\t}\n\tstatic int readI(Scanner sc){\n\t\treturn Integer.parseInt(sc.nextLine().trim());\n\t}\n\tstatic long readL(Scanner sc){\n\t\treturn Long.parseLong(sc.nextLine().trim());\n\t}\n\tstatic String readS(Scanner sc){\n\t\treturn sc.nextLine().trim();\n\t}\n\tstatic int[] readlnI(Scanner sc, String dl){\n\t\treturn Arrays.stream(sc.nextLine().trim().split(dl)).mapToInt(Integer::parseInt).toArray();\n\t}\n\tstatic long[] readlnL(Scanner sc, String dl){\n\t\treturn Arrays.stream(sc.nextLine().trim().split(dl)).mapToLong(Long::parseLong).toArray();\n\t}\n\tstatic String[] readlnS(Scanner sc, String dl){\n\t\treturn sc.nextLine().trim().split(dl);\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tstatic <T> void puts(T... args){\n\t\tfor(int i=0; i<args.length-1; i++){\n\t\t\tSystem.out.printf(\"%s \",args[i]);\n\t\t}\n\t\tSystem.out.println(args[args.length-1]);\n\t}\n\tstatic void puts(int[] ary){\n\t\tfor(int i=0; i<ary.length-1; i++){\n\t\t\tSystem.out.printf(\"%d \",ary[i]);\n\t\t}\n\t\tSystem.out.println(ary[ary.length-1]);\n\t}\n\tstatic void puts(long[] ary){\n\t\tfor(int i=0; i<ary.length-1; i++){\n\t\t\tSystem.out.printf(\"%d \",ary[i]);\n\t\t}\n\t\tSystem.out.println(ary[ary.length-1]);\n\t}\n\tstatic void bs(){\n\t\tSystem.out.println(\"\");\n\t}\n\tstatic int sum(int[] ary){\n\t\tint sum=0;\n\t\tfor(int i=0; i<ary.length; i++) sum+=ary[i];\n\t\treturn sum;\n\t}\n\tstatic long sum(long[] ary){\n\t\tlong sum=0;\n\t\tfor(int i=0; i<ary.length; i++) sum+=ary[i];\n\t\treturn sum;\n\t}\n\tstatic void tblSort(int[][] tbl){\n\t\tArrays.sort(tbl, new Comparator<int[]>(){\n\t\t\t@Override\n\t\t\tpublic int compare(int[] a, int[] b){\n\t\t\t\tif(a[0]==b[0]){\n\t\t\t\t\treturn b[1]-a[1];\n\t\t\t\t}else{\n\t\t\t\t\treturn b[0]-a[0];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}",
        "lines_of_code": 108,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nFileNotFoundException\nNumberFormatException\nRuntimeException\nIOException"
        ]
    },
    {
        "submission_id": "s119266682",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.InputMismatchException;\nimport java.util.Set;\nimport java.util.StringTokenizer;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskX solver = new TaskX();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n\tstatic int INF = 1 << 30;\n\tstatic int modP = 1000000007;\n\tstatic class TaskX {\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\t\tchar[] s = in.nextString().toCharArray();\n\t\t\tint n = s.length;\n\t\t\tSet<Character> set = new HashSet<>();\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tset.add(s[i]);\n\t\t\t}\n\t\t\tif (n < 26) {\n\t\t\t\tfor (char c = 'a'; c <= 'z'; c++) {\n\t\t\t\t\tif (!set.contains(c)) {\n\t\t\t\t\t\tout.println(new String(s) + c);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tint pnt = n - 1;\n\t\t\t\tset.remove(s[pnt]);\n\t\t\t\tpnt--;\n\t\t\t\twhile (pnt >= 0) {\n\t\t\t\t\tif (s[pnt] > s[pnt + 1]) {\n\t\t\t\t\t\tset.remove(s[pnt]);\n\t\t\t\t\t\tpnt--;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor (char c = (char)(s[pnt] + 1); c <= 'z'; c++) {\n\t\t\t\t\t\tif (!set.contains(c)) {\n\t\t\t\t\t\t\tout.println(new String(Arrays.copyOf(s, pnt - 1)) + c);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(-1);\n\t\t}\n\t}\n\tstatic class InputReader {\n\t\tBufferedReader in;\n\t\tStringTokenizer tok;\n\t\tpublic String nextString() {\n\t\t\twhile (!tok.hasMoreTokens()) {\n\t\t\t\ttry {\n\t\t\t\t\ttok = new StringTokenizer(in.readLine(), \" \");\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tok.nextToken();\n\t\t}\n\t\tpublic int nextInt() {\n\t\t\treturn Integer.parseInt(nextString());\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\treturn Long.parseLong(nextString());\n\t\t}\n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(nextString());\n\t\t}\n\t\tpublic int[] nextIntArray(int n) {\n\t\t\tint[] res = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tres[i] = nextInt();\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tpublic long[] nextLongArray(int n) {\n\t\t\tlong[] res = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tres[i] = nextLong();\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tpublic InputReader(InputStream inputStream) {\n\t\t\tin = new BufferedReader(new InputStreamReader(inputStream));\n\t\t\ttok = new StringTokenizer(\"\");\n\t\t}\n\t}\n}",
        "lines_of_code": 101,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nInputMismatchException"
        ]
    },
    {
        "submission_id": "s671342009",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint x = sc.nextInt();\n\t\tsc.close();\n\t\tlong ans = 0;\n\t\tint xpos = 0;\n\t\tint ypos = x;\n\t\tint vector = 0;\n\t\tint[][] t = new int[n+1][n+1];\n\t\tfor(int i = 0; i <= n; i++) {\n\t\t\tfor(int j = 0; j <= n; j++) {\n\t\t\t\tt[i][j] = -1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i <= n; i++) {\n\t\t\tt[0][i] = 2;\n\t\t\tt[i][n] = 0;\n\t\t\tt[i][i] = 1;\n\t\t}\n\t\tdo {\n\t\t\tans++;\n\t\t\tswitch(vector) {\n\t\t\tcase 0:\n\t\t\t\txpos++;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\txpos++;\n\t\t\t\typos++;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\typos++;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\txpos--;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\txpos--;\n\t\t\t\typos--;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\typos--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(t[xpos][ypos] == -1) {\n\t\t\t\tt[xpos][ypos] = vector%3;\n\t\t\t} else {\n\t\t\t\tswitch(t[xpos][ypos]) {\n\t\t\t\tcase 0:\n\t\t\t\t\tswitch(vector) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tvector = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tvector = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tvector = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tvector = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tswitch(vector) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tvector = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tvector = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tvector = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tvector = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tswitch(vector) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tvector = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tvector = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tvector = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tvector = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while(!(xpos == 0 && ypos == x));\n\t\tSystem.out.println(ans);\n\t}\n}",
        "lines_of_code": 104,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.InputMismatchException"
        ]
    },
    {
        "submission_id": "s385206173",
        "complete_code": "import java.util.*;\nimport java.io.*;\npublic class Main {\n\tstatic int mod = (int) 1e9 + 7;\n\tstatic int DX[] = { -1, 0, 1, 0 }, DY[] = { 0, -1, 0, 1 };\n\tstatic int n;\n\tstatic long k;\n\tstatic int a[];\n\tpublic static void main(String[] args) {\n\t\tFastScanner fs = new FastScanner(System.in);\n\t\tn = fs.nextInt();\n\t\tk = fs.nextInt();\n\t\ta = fs.nextIntArray(n);\n\t\tArrays.sort(a);\n\t\tlong INF = (long)1e18+100;\n\t\tlong l = -INF;\n\t\tlong r = INF;\n\t\twhile(l+1<r) {\n\t\t\tlong c = (l+r)/2;\n\t\t\tif(check(c))l=c;\n\t\t\telse r = c;\n\t\t}\n\t\tSystem.out.println(l);\n\t}\n\tstatic boolean check(long x) {\n\t\tlong tot = 0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tint now = a[i];\n\t\t\tint l = -1, r = n;\n\t\t\tif(now >= 0) {\n\t\t\t\twhile(l+1<r) {\n\t\t\t\t\tint c = (l+r)/2;\n\t\t\t\t\tif((long)now * a[c] < x) l = c;\n\t\t\t\t\telse r = c;\n\t\t\t\t}\n\t\t\t\tif(l>=i)l--;\n\t\t\t\ttot += (l+1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\twhile(l+1<r) {\n\t\t\t\t\tint c = (l+r)/2;\n\t\t\t\t\tif((long)now * a[c] < x) r = c;\n\t\t\t\t\telse l = c;\n\t\t\t\t}\n\t\t\t\tif(r<=i)r++;\n\t\t\t\ttot += (n - r);\n\t\t\t}\n\t\t}\n\t\tif(tot < 2*k) return true;\n\t\telse return false;\n\t}\n}\nclass FastScanner {\n\tprivate BufferedReader reader = null;\n\tprivate StringTokenizer tokenizer = null;\n\tpublic FastScanner(InputStream in) {\n\t\treader = new BufferedReader(new InputStreamReader(in));\n\t\ttokenizer = null;\n\t}\n\tpublic String next() {\n\t\tif (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn tokenizer.nextToken();\n\t}\n\tpublic String nextLine() {\n\t\tif (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\treturn reader.readLine();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn tokenizer.nextToken(\"\\n\");\n\t}\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n\tpublic int[] nextIntArray(int n) {\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = nextInt();\n\t\treturn a;\n\t}\n\tpublic long[] nextLongArray(int n) {\n\t\tlong[] a = new long[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = nextLong();\n\t\treturn a;\n\t}\n}",
        "lines_of_code": 101,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nRuntimeException"
        ]
    },
    {
        "submission_id": "s742778919",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.InputMismatchException;\nimport java.util.StringTokenizer;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskX solver = new TaskX();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n\tstatic int INF = 1 << 30;\n\tstatic int modP = 1000000007;\n\tstatic class TaskX {\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\t\tint N = in.nextInt(), A = in.nextInt();\n\t\t\tint[] xn = in.nextIntArray(N);\n\t\t\tint X = A;\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tX = Math.max(X, xn[i]);\n\t\t\t}\n\t\t\tint[][][] dp = new int[N+1][N+1][N*X+1];\n\t\t\tdp[0][0][0] = 1;\n\t\t\tfor (int i = 0; i <= N; i++) {\n\t\t\t\tfor (int j = 0; j <= N; j++) {\n\t\t\t\t\tfor (int k = 0; k <= N*X; k++) {\n\t\t\t\t\t\tif (j-1 < 0 && k-xn[i-1]<0) {\n\t\t\t\t\t\t\tdp[i][j][k] = dp[i-1][j][k];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdp[i][j][k] = dp[i-1][j][k] + dp[i-1][j-1][k-xn[i-1]];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong ans = 0;\n\t\t\tfor (int k = 1; k <= N; k++) {\n\t\t\t\tans += dp[N][k][k*A];\n\t\t\t}\n\t\t\tout.println(ans);\n\t\t}\n\t}\n\tstatic class InputReader {\n\t\tBufferedReader in;\n\t\tStringTokenizer tok;\n\t\tpublic String nextString() {\n\t\t\twhile (!tok.hasMoreTokens()) {\n\t\t\t\ttry {\n\t\t\t\t\ttok = new StringTokenizer(in.readLine(), \" \");\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tok.nextToken();\n\t\t}\n\t\tpublic int nextInt() {\n\t\t\treturn Integer.parseInt(nextString());\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\treturn Long.parseLong(nextString());\n\t\t}\n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(nextString());\n\t\t}\n\t\tpublic int[] nextIntArray(int n) {\n\t\t\tint[] res = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tres[i] = nextInt();\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tpublic long[] nextLongArray(int n) {\n\t\t\tlong[] res = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tres[i] = nextLong();\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tpublic InputReader(InputStream inputStream) {\n\t\t\tin = new BufferedReader(new InputStreamReader(inputStream));\n\t\t\ttok = new StringTokenizer(\"\");\n\t\t}\n\t}\n}",
        "lines_of_code": 90,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException"
        ]
    },
    {
        "submission_id": "s130209437",
        "complete_code": "import java.util.*;\npublic class Main {\n    static long INF = 1001001001001001018L;\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int s = sc.nextInt();\n        List<int[]>[] to = new List[n];\n        for (int i = 0; i < n; i++) {\n            to[i] = new ArrayList<int[]>();\n        }\n        for (int i = 0; i < m; i++) {\n            int p = sc.nextInt() - 1;\n            int q = sc.nextInt() - 1;\n            int fee = sc.nextInt();\n            int time = sc.nextInt();\n            to[p].add(new int[]{q, fee, time});\n            to[q].add(new int[]{p, fee, time});\n        }\n        int[] c = new int[n];\n        int[] d = new int[n];\n        for (int i = 0; i < n; i++) {\n            c[i] = sc.nextInt();\n            d[i] = sc.nextInt();\n        }\n        long[][] dp = new long[n][50 * 50];\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(dp[i], INF);\n        }\n        dp[0][s] = 0;\n        boolean[] fix = new boolean[n];\n        long[] ans = new long[n];\n        Arrays.fill(ans, INF);\n        PriorityQueue<Point> que = new PriorityQueue<>();\n        que.add(new Point(0, s, 0));\n        while (!que.isEmpty()) {\n            Point cur = que.poll();\n            int p = cur.name;\n            int cash = cur.cash;\n            long now = cur.time;\n            if (!fix[p]) {\n                ans[p] = now;\n                fix[p] = true;\n            }\n            boolean end = false;\n            for (int i = 0; i < n; i++) {\n                if (!fix[i]) break;\n                if (i == n - 1) end = true;\n            }\n            if (end) break;\n            if (now > dp[p][cash]) continue;\n            que.add(new Point(p, Math.min(cash + c[p], 50 * 50 - 1), now + d[p]));\n            for (int[] qData : to[p]) {\n                int q = qData[0];\n                int fee = qData[1];\n                int time = qData[2];\n                if (cash - fee < 0) continue;\n                if (now + time < dp[q][cash - fee]) {\n                    dp[q][cash - fee] = now + time;\n                    que.add(new Point(q, cash - fee, now + time));\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            long min = INF;\n            for (int j = 0; j < 50 * 50; j++) {\n                min = Math.min(min, dp[i][j]); \n            }\n            System.out.println(min);\n        }\n    }\n}\nclass Point implements Comparable<Point> {\n    int name;\n    int cash;\n    long time;\n    Point(int name, int cash, long time) {\n        this.name = name;\n        this.cash = cash;\n        this.time = time;\n    }\n    @Override\n    public int compareTo(Point o) {\n        if (this.time < o.time) {\n            return -1;\n        } \n        return 1;\n    }\n}",
        "lines_of_code": 90,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException\n2. NoSuchElementException\n3. IOException\n4. RuntimeException\n5. ClassCastException"
        ]
    },
    {
        "submission_id": "s604120319",
        "complete_code": "import java.util.*;\npublic class Main { \n\tpublic static void main(String[] args) {\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tST:while(true) {\n\t\t\tint n = stdIn.nextInt();\n\t\t\tif(n == 0) break;\n\t\t\tint[] a = new int[n];\n\t\t\tboolean[] b = new boolean[n];\n\t\t\tboolean lastB = false;\n\t\t\tboolean km = true;\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tString k = stdIn.next();\n\t\t\t\tif(k.equals(\"x\")) {\n\t\t\t\t\ta[i] = 0;\n\t\t\t\t\tb[i] = true;\n\t\t\t\t\tif(lastB) {\n\t\t\t\t\t\tSystem.out.println(\"none\");\n\t\t\t\t\t\tcontinue ST;\n\t\t\t\t\t}\n\t\t\t\t\tlastB = true;\n\t\t\t\t\tkm = false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta[i] = Integer.parseInt(k);\n\t\t\t\t\tif(!lastB) {\n\t\t\t\t\t\tif(i != 0 && (i+1)%2 == 0) {\n\t\t\t\t\t\t\tif(a[i-1] >= a[i]) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"none\");\n\t\t\t\t\t\t\t\tcontinue ST;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(i != 0 && (i+1)%2 == 1) {\n\t\t\t\t\t\t\tif(a[i-1] <= a[i]) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"none\");\n\t\t\t\t\t\t\t\tcontinue ST;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlastB = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(km) {\n\t\t\t\tSystem.out.println(\"ambiguous\");\n\t\t\t\tcontinue ST;\n\t\t\t}\n\t\t\tint max = Integer.MIN_VALUE;\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tif(b[i]) {\n\t\t\t\t\tif((i+1)%2 == 0) {\n\t\t\t\t\t\tint an = Integer.MIN_VALUE;\n\t\t\t\t\t\tint bn = Integer.MIN_VALUE;\n\t\t\t\t\t\tif(i != 0 && !b[i-1]) {\n\t\t\t\t\t\t\tan = a[i-1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(i != n-1 && !b[i+1]) {\n\t\t\t\t\t\t\tbn = a[i+1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(min > Math.max(an, bn)) {\n\t\t\t\t\t\t\tmin = Math.max(an, bn)+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tint an = Integer.MAX_VALUE;\n\t\t\t\t\t\tint bn = Integer.MAX_VALUE;\n\t\t\t\t\t\tif(i != 0 && !b[i-1]) {\n\t\t\t\t\t\t\tan = a[i-1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(i != n-1 && !b[i+1]) {\n\t\t\t\t\t\t\tbn = a[i+1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(max < Math.min(an, bn)) {\n\t\t\t\t\t\t\tmax = Math.min(an, bn)-1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(min == max) {\n\t\t\t\tSystem.out.println(min);\n\t\t\t}\n\t\t\telse if(min > max && a.length != 2){\n\t\t\t\tSystem.out.println(\"none\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"ambiguous\");\n\t\t\t}\n\t\t}\n\t}\n}",
        "lines_of_code": 90,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nArrayIndexOutOfBoundsException\nNumberFormatException"
        ]
    },
    {
        "submission_id": "s264920513",
        "complete_code": "import java.util.Deque;\nimport java.util.LinkedList;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n, m, p, q, r;\n\t\twhile ((n = in.nextInt()) > 0) {\n\t\t\tm = in.nextInt();\n\t\t\tp = in.nextInt() - 1;\n\t\t\tq = in.nextInt();\n\t\t\tr = in.nextInt();\n\t\t\tDeque<Integer> allDeque = getNewDeque();\n\t\t\tallDeque.add(Integer.valueOf(r));\n\t\t\tallDeque.add(Integer.valueOf(n - r));\n\t\t\tDeque<Integer> a = getNewDeque();\n\t\t\tDeque<Integer> c = getNewDeque();\n\t\t\tboolean top = true;\n\t\t\tboolean bottom = false;\n\t\t\tfor (int i = 0; i < m; i++) {\n\t\t\t\tboolean atop = top, abottm, ctop, cbottom = bottom;\n\t\t\t\tint asize = in.nextInt();\n\t\t\t\ta.clear();\n\t\t\t\twhile (asize >= allDeque.peekFirst().intValue()) {\n\t\t\t\t\ttop = !top;\n\t\t\t\t\tfinal Integer first = allDeque.removeFirst();\n\t\t\t\t\ta.addLast(first);\n\t\t\t\t\tasize -= first.intValue();\n\t\t\t\t}\n\t\t\t\tif (asize != 0) {\n\t\t\t\t\ta.addLast(Integer.valueOf(asize));\n\t\t\t\t\tfinal Integer first = allDeque.removeFirst();\n\t\t\t\t\tallDeque.addFirst(Integer.valueOf(first - asize));\n\t\t\t\t}\n\t\t\t\tabottm = (a.size() % 2 == 1) ? atop : !atop;\n\t\t\t\tint csize = n - in.nextInt();\n\t\t\t\tc.clear();\n\t\t\t\twhile (csize >= allDeque.peekLast().intValue()) {\n\t\t\t\t\tbottom = !bottom;\n\t\t\t\t\tfinal Integer last = allDeque.removeLast();\n\t\t\t\t\tc.addFirst(last);\n\t\t\t\t\tcsize -= last.intValue();\n\t\t\t\t}\n\t\t\t\tif (csize != 0) {\n\t\t\t\t\tc.addFirst(Integer.valueOf(csize));\n\t\t\t\t\tfinal Integer last = allDeque.removeLast();\n\t\t\t\t\tallDeque.addLast(Integer.valueOf(last - csize));\n\t\t\t\t}\n\t\t\t\tctop = (c.size() % 2 == 1) ? cbottom : !cbottom;\n\t\t\t\tif (atop == bottom) {\n\t\t\t\t\tint afirst = a.removeFirst().intValue();\n\t\t\t\t\tallDeque.addLast(Integer.valueOf(afirst\n\t\t\t\t\t\t\t+ allDeque.removeLast().intValue()));\n\t\t\t\t}\n\t\t\t\tif (cbottom == top) {\n\t\t\t\t\tint clast = a.removeLast().intValue();\n\t\t\t\t\tallDeque.addFirst(Integer.valueOf(clast\n\t\t\t\t\t\t\t+ allDeque.removeFirst().intValue()));\n\t\t\t\t}\n\t\t\t\tDeque<Integer> b = allDeque;\n\t\t\t\tallDeque = c;\n\t\t\t\tc = b;\n\t\t\t\tallDeque.addAll(b);\n\t\t\t\tallDeque.addAll(a);\n\t\t\t\ttop = ctop;\n\t\t\t\tbottom = abottm;\n\t\t\t}\n\t\t\twhile (p >= allDeque.peekFirst().intValue()) {\n\t\t\t\tfinal int val = allDeque.removeFirst().intValue();\n\t\t\t\tq -= val;\n\t\t\t\tp -= val;\n\t\t\t\ttop = !top;\n\t\t\t}\n\t\t\tint count = (top) ? -p : 0;\n\t\t\twhile (q >= allDeque.peekFirst().intValue()) {\n\t\t\t\tfinal int intValue = allDeque.removeFirst().intValue();\n\t\t\t\tq -= intValue;\n\t\t\t\tif (top)\n\t\t\t\t\tcount += intValue;\n\t\t\t\ttop = !top;\n\t\t\t}\n\t\t\tif (top) {\n\t\t\t\tcount += q;\n\t\t\t}\n\t\t\tSystem.out.println(count);\n\t\t}\n\t}\n\tprivate static Deque<Integer> getNewDeque() {\n\t\treturn new LinkedList<Integer>();\n\t}\n}",
        "lines_of_code": 91,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNoSuchElementException\nNumberFormatException\nIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s768846481",
        "complete_code": "import java.util.*;\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.text.*;\npublic class Main {\n    static long mod = (long)1e9 + 7;\n    static long lim = (long)1e9 + 6;\n    static long mod1 = 998244353;\n    static boolean fileIO = true;\n    static FastScanner f;\n    static PrintWriter pw = new PrintWriter(System.out);\n    static Scanner S = new Scanner(System.in);\n    static long x0; static long y0;\n    static void solve()throws IOException {\n        int n = f.ni(); int k = f.ni();\n        long arr[] = inplong(n);\n        sort(arr);\n        long prod = 1l; \n        if (arr[n - 1] == 0l && k % 2 != 0l) {pn(0); return;} \n        if (arr[n - 1] <= 0l && k % 2 != 0l) { \n            for (int i = n - 1; i >= n - k; --i) \n                prod = mul(prod , arr[i]); \n            pn(Math.floorMod(prod , mod));\n            return; \n        } \n        int i = 0 , j = n - 1;\n        if (k % 2 != 0) { \n            prod = mul(prod , arr[j]); \n            --j; \n            --k; \n        }\n        k >>= 1; \n        for (int itr = 0; itr < k; ++itr) { \n            long lp = mul(arr[i] , arr[i + 1]);\n            long rp = mul(arr[j] , arr[j - 1]);\n            if (lp > rp) { \n                prod = mul(prod , lp);\n                i += 2; \n            } \n            else { \n                prod = mul(prod , rp);\n                j -= 2; \n            } \n        } \n        while(prod < 0) prod += mod;\n        pn(Math.floorMod(prod , mod));\n        return;\n    }\n    public static void main(String[] args)throws IOException {\n        init();\n        int t = 1;\n        while(t --> 0) {solve();}\n        pw.flush(); \n        pw.close();  \n    }\n    public static void init()throws IOException{if(fileIO){f=new FastScanner(\"\");}else{f=new FastScanner(System.in);}}\n    public static class FastScanner {\n        BufferedReader br;StringTokenizer st;\n        FastScanner(InputStream stream){try{br=new BufferedReader(new InputStreamReader(stream));}catch(Exception e){e.printStackTrace();}}\n        FastScanner(String str){try{br=new BufferedReader(new FileReader(\"!a.txt\"));}catch(Exception e){e.printStackTrace();}}\n        String next(){while(st==null||!st.hasMoreTokens()){try{st=new StringTokenizer(br.readLine());}catch(IOException e){e.printStackTrace();}}return st.nextToken();}\n        String nextLine()throws IOException{String fl=null;while(st==null||!st.hasMoreTokens()){try{fl=br.readLine();}catch(IOException e){throw new RuntimeException(e);}return fl;}return fl;}\n        int ni(){return Integer.parseInt(next());}long nl(){return Long.parseLong(next());}double nextDouble(){return Double.parseDouble(next());}\n    }\n    public static void pn(Object o){pw.println(o);}\n    public static void pi(Object o){pw.print(o);pw.flush();}\n    public static void p(Object o){pw.print(o);}\n    public static void pni(Object o){pw.println(o);pw.flush();}\n    static int gcd(int a,int b){if(b==0)return a;else{return gcd(b,a%b);}}\n    static long gcd(long a,long b){if(b==0l)return a;else{return gcd(b,a%b);}}\n    static long lcm(long a,long b){return (a*b/gcd(a,b));}\n    static long exgcd(long a,long b){if(b==0){x0=1;y0=0;return a;}long temp=exgcd(b,a%b);long t=x0;x0=y0;y0=t-a/b*y0;return temp;}\n    static long pow(long a,long b){long res=1;while(b>0){if((b&1)==1)res=res*a;b>>=1;a=a*a;}return res;}\n    static long mpow(long a,long b){long res=1;while(b>0){if((b&1)==1)res=((res%mod)*(a%mod))%mod;b>>=1;a=((a%mod)*(a%mod))%mod;}return res;}\n    static long mul(long a , long b){return ((a%mod)*(b%mod)%mod);}\n    static long adp(long a , long b){return ((a%mod)+(b%mod)%mod);}\n    static boolean isPrime(long n){if(n<=1)return false;if(n<=3)return true;if(n%2==0||n%3==0)return false;for(long i=5;i*i<=n;i=i+6)if(n%i==0||n%(i+2)==0)return false;return true;}\n    static boolean isPrime(int n){if(n<=1)return false;if(n<=3)return true;if(n%2==0||n%3==0)return false;for(int i=5;i*i<=n;i=i+6)if(n%i==0||n%(i+2)==0)return false;return true;}\n    static HashSet<Long> factors(long n){HashSet<Long> hs=new HashSet<Long>();for(long i=1;i<=(long)Math.sqrt(n);i++){if(n%i==0){hs.add(i);hs.add(n/i);}}return hs;}\n    static HashSet<Integer> factors(int n){HashSet<Integer> hs=new HashSet<Integer>();for(int i=1;i<=(int)Math.sqrt(n);i++){if(n%i==0){hs.add(i);hs.add(n/i);}}return hs;}\n    static HashSet<Long> pf(long n){HashSet<Long> ff=factors(n);HashSet<Long> ans=new HashSet<Long>();for(Long i:ff)if(isPrime(i))ans.add(i);return ans;}\n    static HashSet<Integer> pf(int n){HashSet<Integer> ff=factors(n);HashSet<Integer> ans=new HashSet<Integer>();for(Integer i:ff)if(isPrime(i))ans.add(i);return ans;}\n    static int[] inpint(int n){int arr[]=new int[n];for(int i=0;i<n;i++){arr[i]=f.ni();}return arr;}\n    static long[] inplong(int n){long arr[] = new long[n];for(int i=0;i<n;i++){arr[i]=f.nl();}return arr;}\n    static boolean ise(int x){return ((x&1)==0);}static boolean ise(long x){return ((x&1)==0);}\n    static int gnv(char c){return Character.getNumericValue(c);}\n    static int log(long x){return x==1?0:(1+log(x/2));} static int log(int x){return x==1?0:(1+log(x/2));}\n    static void sort(int[] a){ArrayList<Integer> l=new ArrayList<>();for(int i:a)l.add(i);Collections.sort(l);for(int i=0;i<a.length;++i)a[i]=l.get(i);}\n    static void sort(long[] a){ArrayList<Long> l=new ArrayList<>();for(long i:a)l.add(i);Collections.sort(l);for(int i=0;i<a.length;++i)a[i]=l.get(i);}\n    static void sort(ArrayList<Integer> a){Collections.sort(a);}\n}",
        "lines_of_code": 91,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s897475338",
        "complete_code": "import java.io.*;\nimport java.util.*;\nclass Main {\n\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint[] board = new int[9];\n\t\tStringTokenizer st = new StringTokenizer(br.readLine(),\" \");\n\t\tfor (int i = 0; i < 9; i++) {\n\t\t\tif (i==3||i==6) {\n\t\t\t\tst = new StringTokenizer(br.readLine(), \" \");\n\t\t\t}\n\t\t\tboard[i] = Integer.parseInt(st.nextToken());\n\t\t}\n\t\tDeque<state> mainq = new ArrayDeque<state>();\n\t\tBitSet cl = new BitSet(500000);\n\t\tmainq.add(new state(board, 0));\n\t\tcl.set(hashBoard(board));\n\t\tint minStep = -1;\n\t\twhile(!mainq.isEmpty()){\n\t\t\tfinal state s = mainq.remove();\n\t\t\tif (hashBoard(s.board) == 46233) {\n\t\t\t\tminStep = s.move;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint pos;\n\t\t\tfor(pos = 0; pos<9 && s.board[pos] != 0; pos++);\n\t\t\tif (pos%3 != 0) {\n\t\t\t\tfinal int[] next = Arrays.copyOf(s.board, s.board.length);\n\t\t\t\tnext[pos] = next[pos-1];\n\t\t\t\tnext[pos-1] = 0;\n\t\t\t\tfinal int h = hashBoard(next);\n\t\t\t\tif(!cl.get(h)){\n\t\t\t\t\tcl.set(h);\n\t\t\t\t\tmainq.add(new state(next, s.move+1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pos%3 != 2) {\n\t\t\t\tfinal int[] next = Arrays.copyOf(s.board, s.board.length);\n\t\t\t\tnext[pos] = next[pos+1];\n\t\t\t\tnext[pos+1] = 0;\n\t\t\t\tfinal int h = hashBoard(next);\n\t\t\t\tif(!cl.get(h)){\n\t\t\t\t\tcl.set(h);\n\t\t\t\t\tmainq.add(new state(next, s.move+1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pos > 2) {\n\t\t\t\tfinal int[] next = Arrays.copyOf(s.board, s.board.length);\n\t\t\t\tnext[pos] = next[pos - 3];\n\t\t\t\tnext[pos-3] = 0;\n\t\t\t\tfinal int h = hashBoard(next);\n\t\t\t\tif(!cl.get(h)){\n\t\t\t\t\tcl.set(h);\n\t\t\t\t\tmainq.add(new state(next, s.move+1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pos < 6) {\n\t\t\t\tfinal int[] next = Arrays.copyOf(s.board, s.board.length);\n\t\t\t\tnext[pos] = next[pos + 3];\n\t\t\t\tnext[pos+3] = 0;\n\t\t\t\tfinal int h = hashBoard(next);\n\t\t\t\tif(!cl.get(h)){\n\t\t\t\t\tcl.set(h);\n\t\t\t\t\tmainq.add(new state(next, s.move+1));\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\tSystem.out.println(minStep);\t\n\t}\n\tprivate static int hashBoard(int[] board){\n\t\tint h = board[0];\n\t\tfor (int i = 1; i < 8; i++) {\n\t\t\th = h*(9-i);\n\t\t\th = h+board[i];\n\t\t\tfor (int a = 0; a < i; a++) {\n\t\t\t\tif (board[a]<board[i]) {\n\t\t\t\t\t--h;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn h;\n\t}\n}\nclass state{\n\tfinal int[] board;\n\tfinal int move;\n\tstate(int[] board, int move){\n\t\tthis.board = board;\n\t\tthis.move = move;\n\t}\n}",
        "lines_of_code": 91,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nNumberFormatException\nRuntimeException"
        ]
    },
    {
        "submission_id": "s568679605",
        "complete_code": "import java.util.Scanner;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\npublic class Main {\n  public static void main (String args[]) {\n    Scanner sc = new Scanner(System.in);\n    int N = sc.nextInt();\n    int three = N/3;\n    ArrayList<Integer>[] edge  = new ArrayList[N];\n    for(int i = 0; i < N; i++){\n      edge[i] = new ArrayList<>();\n    }\n    while(sc.hasNext()){\n      int from = sc.nextInt()-1;\n      int to = sc.nextInt()-1;\n      edge[from].add(to);\n      edge[to].add(from);\n    }\n    int ans[] = new int[N];\n    int depth[] = new int[N];\n    depth[0] = 1;\n    int ki, gu;\n    ki = gu = 0;\n    ArrayDeque<Integer> adq = new ArrayDeque<>();\n    adq.add(0);\n    while(adq.size()>0){\n      int now = adq.pollFirst();\n      if(depth[now]==1){\n        gu++;\n      } else {\n        ki++;\n      }\n      for(int next : edge[now]){\n        if(depth[next]==0){\n          depth[next] = -depth[now];\n          adq.addLast(next);\n        }\n      }\n    }\n    boolean check[] = new boolean[N];\n    int k, l, m;\n    k = l = 0;\n    m = 1;\n    if(ki<=three){\n      for(int i=0;i<N;i++){\n        if(depth[i]==-1) {\n            ans[i]=3*m;\n            check[ans[i]-1]=true;\n            m++;\n        }\n      }\n    }\n    else if(gu<=three){\n      for(int i=0;i<N;i++){\n        if(depth[i]==1) {\n            ans[i]=3*m;\n            check[ans[i]-1]=true;\n            m++;\n        }\n      }\n    }\n    else {\n      for(int i=0;i<N;i++){\n        if(depth[i]==-1&&k<=three) {\n          ans[i]=3*k+1;\n          check[ans[i]-1]=true;\n          k++;\n        }\n        else if(depth[i]==1&&l<=three){\n          ans[i]=3*l+2;\n          check[ans[i]-1]=true;\n          l++;\n        }\n      }\n    }\n    int c = 0;\n    for(int i=0;i<N;i++){\n      if(ans[i]!=0){\n        System.out.print(ans[i]+\" \");\n      } else {\n        while(check[c]){ \n          c++;\n        }\n        System.out.print((c+1)+\" \");\n        c++;\n      }\n    }\n    for(int i = 0; i < N; i++){\n      System.err.println(depth[i]);\n    }\n  }\n}",
        "lines_of_code": 92,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nArrayIndexOutOfBoundsException\nNullPointerException"
        ]
    },
    {
        "submission_id": "s895594888",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.rmi.server.ExportException;\nimport java.util.Arrays;\n        import java.util.Scanner;\nclass Main {\n    static Scanner sc;\n    private static void nextArr(int[] h) {\n        for(int i = 0; i < h.length; i++) h[i] = sc.nextInt();\n    }\n    private static int nextInt() {\n        return sc.nextInt();\n    }\n    private static void print(Object... vals) {\n        for(int i = 0; i < vals.length; i++) {\n            if (i != vals.length - 1) {\n                System.out.print(vals[i] + \",\");\n            } else {\n                System.out.print(vals[i]);\n            }\n        }\n        System.out.println();\n    }\n    public static void main(String[] args) {\n        sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        String t = sc.nextLine();\n        int n = s.length();\n        int m = t.length();\n        int[][] dp = new int[n + 1][m + 1];\n        int[][][] prev = new int[n + 1][m + 1][2];\n        for(int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                dp[i][j] = Integer.MIN_VALUE;\n                dp[i][0] = 0;\n                dp[0][j] = 0;\n                prev[i][j][0] = -1;\n                prev[i][j][1] = -1;\n            }\n        }\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= m; j++) {\n                char left = s.charAt(i - 1);\n                char right = t.charAt(j - 1);\n                if (left == right && dp[i - 1][j - 1] != Integer.MIN_VALUE) {\n                    int val = dp[i - 1][j - 1] + 1;\n                    if (val >= dp[i][j]) {\n                        dp[i][j] = val;\n                        prev[i][j][0] = i - 1;\n                        prev[i][j][1] = j - 1;\n                    }\n                }\n                if (left != right) {\n                    if (dp[i][j - 1] != Integer.MIN_VALUE) {\n                        int val = dp[i][j - 1];\n                        if (val >= dp[i][j]) {\n                            dp[i][j] = val;\n                            prev[i][j][0] = i;\n                            prev[i][j][1] = j - 1;\n                        }\n                    }\n                    if (dp[i - 1][j] != Integer.MIN_VALUE) {\n                        int val = dp[i - 1][j];\n                        if (val >= dp[i][j]) {\n                            dp[i][j] = val;\n                            prev[i][j][0] = i - 1;\n                            prev[i][j][1] = j;\n                        }\n                    }\n                }\n            }\n        }\n        int x = n;\n        int y = m;\n        StringBuffer ans = new StringBuffer();\n        int count = 0;\n        while(x > 0 && y > 0) {\n            count += 1;\n            int px = x;\n            int py = y;\n            x = prev[px][py][0];\n            y = prev[px][py][1];\n            if (x >= 0 && y >= 0 && x == px - 1 && y == py - 1) {\n                ans.append(s.charAt(px - 1));\n            }\n            if (count >= 3010) {\n                throw new RuntimeException(\"WHAT\");\n            }\n        }\n        print(ans.reverse().toString());\n    }\n}",
        "lines_of_code": 92,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nNumberFormatException\nNullPointerException\nRuntimeException"
        ]
    },
    {
        "submission_id": "s871655845",
        "complete_code": "import java.io.*;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException{\n\t\tInputStreamReader is = new InputStreamReader(System.in);\n\t\tBufferedReader br = new BufferedReader(is);\n\t\twhile(true){\n\t\tString str = br.readLine();\n\t\tif(str.equals(\"\"))\n\t\t\tbreak;\n\t\tint count = 0;\n\t\tint index = -1;\n\t\twhile(true){\n\t\t\tindex = str.indexOf(\" \", index+1);\n\t\t\tcount++;\n\t\t\tif(index == -1)break;\n\t\t}\n\t\tint n = count;\n\t\tint zure = -1;\n\t\tboolean f = true;\n\t\tString c = str.toString();\n\t\tString[] star  = new String[n];\n\t\tchar[] ch  = new char[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(c.indexOf(\" \") !=  -1){\n\t\t\t\tString prestr = c.substring(0, c.indexOf(\" \"));\n\t\t\t\tstar[i] = prestr.toString();\n\t\t\t\tc = c.substring(c.indexOf(\" \") + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstar[i] = c.toString();\n\t\t\t}\n\t\t\tch = star[i].toCharArray();\n\t\t\tif((seisa(ch, star[i].length())) != -1){\n\t\t\t\tif(zure == -1){\n\t\t\t\t\tzure = seisa(ch, star[i].length());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n;i++){\n\t\t\tch = star[i].toCharArray();\n\t\t\tfor(int j = 0; j < star[i].length(); j++){\n\t\t\t\tif(ch[j] != '.'){\n\t\t\t\t\tch[j] += zure;\n\t\t\t\t\tif(ch[j] > 122)\n\t\t\t\t\t\tch[j] -= 26;\n\t\t\t\t}\n\t\t\t\tSystem.out.print(ch[j]);\n\t\t\t}\n\t\t\tif(i != n-1)\n\t\t\tSystem.out.print(\" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n\t}\n\tstatic int seisa(char[] prech, int len){\n\t\tchar[] ch = prech.clone();\n\t\tif(!(len == 3 || len == 4))return -1;\n\t\tif(len == 3){\n\t\t\tfor(int i = 0; i < 26;i++){\n\t\t\t\tif(ch[0] == 't' && ch[1] == 'h' && ch[2] == 'e')\n\t\t\t\t\treturn i;\n\t\t\t\tfor(int j = 0; j < len;j++){\n\t\t\t\t\tif(++ch[j] > 122)\n\t\t\t\t\t\tch[j] -= 26;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(len == 4){\n\t\t\tfor(int i = 0; i < 26;i++){\n\t\t\t\tif(ch[0] == 't' && ch[1] == 'h'\n\t\t\t\t\t&& ch[2] == 'i' && ch[3] == 's')\n\t\t\t\t\treturn i;\n\t\t\t\tfor(int j = 0; j < len;j++){\n\t\t\t\t\tif(++ch[j] > 122)\n\t\t\t\t\t\tch[j] -= 26;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(len == 4){\n\t\t\tfor(int i = 0; i < 26;i++){\n\t\t\t\tif(ch[0] == 't' && ch[1] == 'h' \n\t\t\t\t\t&& ch[2] == 'a' && ch[3] == 't')\n\t\t\t\t\treturn i;\n\t\t\t\tfor(int j = 0; j < len;j++){\n\t\t\t\t\tif(++ch[j] > 122)\n\t\t\t\t\t\tch[j] -= 26;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}",
        "lines_of_code": 92,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s875135580",
        "complete_code": "import java.io.*; \nimport java.util.*; \npublic class Main{ \n\tstatic class FastReader{ \n\t\tBufferedReader br; \n\t\tStringTokenizer st; \n\t\tpublic FastReader() \n\t\t{ \n\t\t\tbr = new BufferedReader(new\n\t\t\t\t\tInputStreamReader(System.in)); \n\t\t} \n\t\tString next() \n\t\t{ \n\t\t\twhile (st == null || !st.hasMoreElements()) \n\t\t\t{ \n\t\t\t\ttry\n\t\t\t\t{ \n\t\t\t\t\tst = new StringTokenizer(br.readLine()); \n\t\t\t\t} \n\t\t\t\tcatch (IOException e) \n\t\t\t\t{ \n\t\t\t\t\te.printStackTrace(); \n\t\t\t\t} \n\t\t\t} \n\t\t\treturn st.nextToken(); \n\t\t} \n\t\tint nextInt() \n\t\t{ \n\t\t\treturn Integer.parseInt(next()); \n\t\t} \n\t\tlong nextLong() \n\t\t{ \n\t\t\treturn Long.parseLong(next()); \n\t\t} \n\t\tdouble nextDouble() \n\t\t{ \n\t\t\treturn Double.parseDouble(next()); \n\t\t} \n\t\tString nextLine() \n\t\t{ \n\t\t\tString str = \"\"; \n\t\t\ttry\n\t\t\t{ \n\t\t\t\tstr = br.readLine(); \n\t\t\t} \n\t\t\tcatch (IOException e) \n\t\t\t{ \n\t\t\t\te.printStackTrace(); \n\t\t\t} \n\t\t\treturn str; \n\t\t} \n\t}\n\tpublic static void main(String[] args) \n\t{ \n        FastReader sc = new FastReader(); \n        PrintWriter out = new PrintWriter(System.out); \n        int n = sc.nextInt();\n        int w = sc.nextInt();\n        int maxv = 1000024;\n        long[][] arr = new long[n+1][2], dp = new long[n+1][maxv+1];\n        for(int i=1;i<=n;i++){\n        \tfor(int j=0;j<2;j++){\n        \t\tarr[i][j] = sc.nextLong();\t\n        \t}\n        }\n        for(int i=0;i<=n;i++)\n        \tfor(int v=0;v<=maxv;v++)\n        \t\tif(v!=0)\n        \t\t\tdp[i][v] = -1;\n        for(int i=1;i<=n;i++){\n        \tfor(int v=0;v<=maxv;v++){\n            \tif(arr[i][1]<=v && dp[i-1][v-(int)arr[i][1]]!=-1){\n            \t\tif(dp[i-1][v]!=-1)\n            \t\t\tdp[i][v] = Math.min(dp[i-1][v], dp[i-1][v-(int)arr[i][1]]+arr[i][0]);\n            \t\telse\n            \t\t\tdp[i][v] = dp[i-1][v-(int)arr[i][1]]+arr[i][0];\n            \t}\n            \telse{\n            \t\tdp[i][v] = dp[i-1][v];\n            \t}\n        \t}\n        }\n        int ans = 0;\n        for(int v=maxv;v>=0;v--)\n        \tif(dp[n][v]<=w && dp[n][v]!=-1){\n        \t\tans = v;\n        \t\tbreak;\n        \t}\n        out.println(ans);\n        out.close();\n\t} \n}",
        "lines_of_code": 92,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s957990651",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Main main = new Main();\n        main.solve();\n    }\n    public void solve() {\n        Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        PrintWriter out = new PrintWriter(System.out);\n        int N = scan.nextInt();\n        String X = scan.next();\n        char[] data = X.toCharArray();\n        int count_original = 0;\n        for (int j = 0; j < N; j++) {\n            if (data[j] == '1') {\n                count_original += 1;\n            }\n        }\n        long initial = 0;\n        long initial_negative = 0;\n        for (int i = 0; i < N; i++) {\n            if (data[i] == '1') {\n                initial += pow(2, N - 1 - i, count_original+1);\n                initial %= (count_original+1);\n            }\n        }\n        if (0 < count_original) {\n            for (int i = 0; i < N; i++) {\n                if (data[i] == '1') {\n                    initial_negative += pow(2, N - 1 - i, count_original-1);\n                    initial_negative %= (count_original-1);\n                }\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            long current = 0;\n            if (data[i] == '0') {\n                current = initial;\n                current += pow(2, N - 1 - i, (count_original+1));\n                current %= (count_original+1);\n            } else {\n                current = initial_negative;\n                current -= pow(2, N - 1 - i, (count_original-1));\n                current += (count_original-1);\n                current %= (count_original-1);\n            }\n            long ans = 1;\n            while (current != 0) {\n                char[] x = Long.toBinaryString(current).toCharArray();\n                int len = x.length;\n                int c = 0;\n                for (int j = 0; j < len; j++) {\n                    if (x[j] == '1') {\n                        c += 1;\n                    }\n                }\n                current = 0;\n                for (int j = 0; j < len; j++) {\n                    if (x[j] == '0') {\n                        continue;\n                    }\n                    current += pow(2, len - 1 - j, c);\n                    current %= c;\n                }\n                ans += 1;\n            }\n            out.println(ans);\n        }\n        out.flush();\n        out.close();\n    }\n    private long pow(int base, int count, long mod) {\n        if (count == 0) {\n            long t = 1 % mod;\n            return t;\n        }\n        if (count % 2 == 1) {\n            long t = base * pow(base, count - 1, mod);\n            t %= mod;\n            return t;\n        }\n        long t = pow(base, count / 2, mod);\n        t *= t;\n        t %= mod;\n        return t;\n    }\n}",
        "lines_of_code": 92,
        "vanilla_response": [
            "Possible Runtime Exceptions - None"
        ]
    },
    {
        "submission_id": "s108691168",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Main {\n\tprivate final static int SEATS = 17;\n\tprivate final static int GROUP = 10;\n\tprivate final static int INTERVAL = 5;\n\tprivate static int[] watingTimes = new int[GROUP];\n\tprivate static int[][] groupInfo = new int[GROUP][3];\n\tprivate final static int GROUP_INFO_ARRIVAL = 0;\n\tprivate final static int GROUP_INFO_PERSONS = 1;\n\tprivate final static int GROUP_INFO_EATING_MINUTES = 2;\n\tprivate static int[] seatsCondition = new int[SEATS];\n\tprivate static boolean openFlag = true;\n\tprivate static int lastArrivalGroup = -1;\n\tprivate static int watingGroups = 0;\n\tprivate static int passedMinutes = 0;\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        List<Integer> inputList = new ArrayList<Integer>();\n        String line = null;\n        while((line = br.readLine()) != null) {\n            inputList.add(Integer.parseInt(line));\n        }\n\t\tsetGroupInfo();\n\t\twhile (openFlag) {\n\t\t\tif (passedMinutes % INTERVAL == 0) {\n\t\t\t\tlastArrivalGroup++;\n\t\t\t\twatingGroups++;\n\t\t\t}\n\t\t\tif (watingGroups == 0) {\n\t\t\t\tpassedMinutes++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tboolean vacancyFlag = true; \n\t\t\tint nextGroup = lastArrivalGroup - watingGroups + 1; \n\t\t\twhile (watingGroups != 0 && vacancyFlag) {\n\t\t\t\tint numberOfPersons = groupInfo[nextGroup][GROUP_INFO_PERSONS]; \n\t\t\t\tint seatNumber = getSeatNumber(numberOfPersons);\n\t\t\t\tif (seatNumber != -1) {\n\t\t\t\t\tfor (int i = 0; i < numberOfPersons; i++) {\n\t\t\t\t\t\tseatsCondition[seatNumber] = passedMinutes\n\t\t\t\t\t\t\t\t+ groupInfo[nextGroup][GROUP_INFO_EATING_MINUTES];\n\t\t\t\t\t\tseatNumber++;\n\t\t\t\t\t}\n\t\t\t\t\twatingTimes[nextGroup] = passedMinutes\n\t\t\t\t\t\t\t- groupInfo[nextGroup][GROUP_INFO_ARRIVAL];\n\t\t\t\t\twatingGroups--;\n\t\t\t\t\tnextGroup = lastArrivalGroup - watingGroups + 1;\n\t\t\t\t} else {\n\t\t\t\t\tvacancyFlag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpassedMinutes++;\n\t\t\tif (nextGroup == GROUP - 1) {\n\t\t\t\topenFlag = false;\n\t\t\t}\n\t\t}\n\t\tfor (int i : inputList) {\n\t\t\tSystem.out.println(watingTimes[i]);\n\t\t}\n\t}\n\tprivate static void setGroupInfo() {\n\t\tfor (int i = 0; i < GROUP; i++) {\n\t\t\tgroupInfo[i][GROUP_INFO_ARRIVAL] = i * INTERVAL;\n\t\t\tgroupInfo[i][GROUP_INFO_PERSONS] = (i % 5 == 1 ? 5 : 2);\n\t\t\tgroupInfo[i][GROUP_INFO_EATING_MINUTES] = 17 * (i % 2) + 3\n\t\t\t\t\t* (i % 3) + 19;\n\t\t}\n\t}\n\tprivate static int getSeatNumber(int numberOfPersons) {\n\t\tint seatNumber = 0; \n\t\tint vacancySeats = 0; \n\t\tfor (int i = 0; i < SEATS; i++) {\n\t\t\tif (seatsCondition[i] <= passedMinutes) {\n\t\t\t\tseatsCondition[i] = 0;\n\t\t\t}\n\t\t\tif (seatsCondition[i] == 0) {\n\t\t\t\tvacancySeats++;\n\t\t\t\tif (vacancySeats == numberOfPersons) {\n\t\t\t\t\treturn seatNumber;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tseatNumber = i + 1;\n\t\t\t\tvacancySeats = 0;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}",
        "lines_of_code": 92,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNumberFormatException\nIOException"
        ]
    },
    {
        "submission_id": "s712578123",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Main {\n\tprivate\tstatic\tBufferedReader br = null;\n\tstatic {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t}\n\tpublic static void main(String[] args) {\n\t\tint\tpoint = 0;\n\t\twhile ((point = parseNum()) != 0) {\n\t\t\tint[][]\tmap     = new int[point][point];\n\t\t\tint\t\troute   = parseNum();\n\t\t\tint\t\tlantern = 0;\n\t\t\tfor (int i = 0; i < point; i++) {\n\t\t\t\tfor (int j = 0; j < point; j++) {\n\t\t\t\t\tmap[i][j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int n = 0; n < route; n++) {\n\t\t\t\tint[]\tdist = parseDist();\n\t\t\t\tmap[dist[0]][dist[1]] = dist[2];\n\t\t\t\tmap[dist[1]][dist[0]] = dist[2];\n\t\t\t}\n\t\t\tfor (int n = 0; n < route; n++) {\n\t\t\t\tint\ttmp = solve(1 << n, n, map);\n\t\t\t\tlantern = (lantern == 0) ? tmp : Math.min(tmp, lantern);\n\t\t\t}\n\t\t\tSystem.out.println(lantern);\n\t\t}\n\t}\n\tprivate static int solve(int cbit, int start, int[][] map) {\n\t\tint\t\tfbit    = 0;\n\t\tint\t\tlantern = 0;\n\t\tint\t\trest    = 0;\n\t\tboolean\tcomp    = true;\n\t\tfor (int n = 0; n < map.length; n++) {\n\t\t\tif ((cbit & 1 << n) == 0) {\n\t\t\t\tif (map[start][n] != -1) {\n\t\t\t\t\tfbit |= 1 << n;\n\t\t\t\t\tlantern += map[start][n];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcomp = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!comp) {\n\t\t\tfor (int n = 0; n < map.length; n++) {\n\t\t\t\tif (map[start][n] != -1 && (fbit & 1 << n) != 0) {\n\t\t\t\t\tint\ttmp = solve(cbit | fbit, n, map);\n\t\t\t\t\tif (tmp != 0) {\n\t\t\t\t\t\trest = (rest == 0) ? tmp : Math.min(tmp, rest);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn lantern + rest;\n\t}\n\tprivate static int[] parseDist() {\n\t\tint[]\tdist  = null;\n\t\tString\tstrIn = null;\n\t\tif ((strIn = parseStdin()) != null) {\n\t\t\tString[]\tsplit = strIn.split(\",\");\n\t\t\tdist    = new int[3];\n\t\t\tdist[0] = Integer.parseInt(split[0]); \n\t\t\tdist[1] = Integer.parseInt(split[1]); \n\t\t\tdist[2] = Integer.parseInt(split[2]) / 100 - 1; \n\t\t}\n\t\treturn dist;\n\t}\n\tprivate static int parseNum() {\n\t\tint\t\tnum   = 0;\n\t\tString\tstrIn = null;\n\t\tif ((strIn = parseStdin()) != null) {\n\t\t\tnum = Integer.parseInt(strIn); \n\t\t}\n\t\treturn num;\n\t}\n\tprivate static String parseStdin() {\n\t\tString\tstrNum = null;\n\t\ttry {\n\t\t\tString line = br.readLine();\n\t\t\tif (line != null) {\n\t\t\t\tif (!line.isEmpty()) {\n\t\t\t\t\tstrNum = line;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {}\n\t\treturn strNum;\n\t}\n}",
        "lines_of_code": 93,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s397927173",
        "complete_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext()){\n\t\t\tchar board[][] = new char[8][8];\n\t\t\tint ni=0, nj=0;\n\t\t\tfor(int k=0; k<8; k++){\n\t\t\t\tboard[k] = scan.nextLine().toCharArray();\n\t\t\t}\n\t\t\tSEARCH:\n\t\t\tfor(int i=0; i<8; i++){\n\t\t\t\tfor(int j=0; j<8; j++){\n\t\t\t\t\tif(board[i][j] == '1'){\n\t\t\t\t\t\tni=i; nj=j;\n\t\t\t\t\t\tbreak SEARCH;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tjudgeA(board, ni, nj);\n\t\t\tjudgeB(board, ni, nj);\n\t\t\tjudgeC(board, ni, nj);\n\t\t\tjudgeD(board, ni, nj);\n\t\t\tjudgeE(board, ni, nj);\n\t\t\tjudgeF(board, ni, nj);\n\t\t\tjudgeG(board, ni, nj);\n\t\t}\n\t}\n\tstatic void judgeA(char b[][],int k, int l){\n\t\ttry{\n\t\t\tif(b[k+1][l+1] == '1' && b[k+1][l] == '1'){\n\t\t\t\tSystem.out.println(\"A\");\n\t\t\t}\n\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\tSystem.out.println(\"Error\");\n\t\t\treturn;\n\t\t}\n\t}\n\tstatic void judgeB(char b[][],int k, int l){\n\t\ttry{\n\t\t\tif(b[k+3][l] == '1'){\n\t\t\t\tSystem.out.println(\"B\");\n\t\t\t}\n\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\treturn;\n\t\t}\n\t}\n\tstatic void judgeC(char b[][],int k, int l){\n\t\ttry{\n\t\t\tif(b[k][l+3] == '1'){\n\t\t\t\tSystem.out.println(\"C\");\n\t\t\t}\n\t\t}catch (ArrayIndexOutOfBoundsException e) {\n\t\t\treturn;\n\t\t}\n\t}\n\tstatic void judgeD(char b[][],int k, int l){\n\t\ttry{\n\t\t\tif(b[k+2][l-1] == '1'){\n\t\t\t\tSystem.out.println(\"D\");\n\t\t\t}\n\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\treturn;\n\t\t}\n\t}\n\tstatic void judgeE(char b[][],int k, int l){\n\t\ttry{\n\t\t\tif(b[k+1][l+2] == '1'){\n\t\t\t\tSystem.out.println(\"E\");\n\t\t\t}\n\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\treturn;\n\t\t}\n\t}\n\tstatic void judgeF(char b[][],int k, int l){\n\t\ttry{\n\t\t\tif(b[k+2][l+1] == '1'){\n\t\t\t\tSystem.out.println(\"F\");\n\t\t\t}\n\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\treturn;\n\t\t}\n\t}\n\tstatic void judgeG(char b[][],int k, int l){\n\t\ttry{\n\t\t\tif(b[k+1][l-1] == '1' && b[k][l+1] == '1'){\n\t\t\t\tSystem.out.println(\"G\");\n\t\t\t}\n\t\t}catch(ArrayIndexOutOfBoundsException e){\n\t\t\treturn;\n\t\t}\n\t}\n}",
        "lines_of_code": 93,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s185565337",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Main {\n\tstatic int h = -1;\n\tstatic int v = -1;\n\tstatic int goal = -1;\n\tstatic int[] route = null;\n\tstatic char[][] holizon = null;\n\tstatic boolean[][] checkLine = null;\n\tpublic static void main(String[] args) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString line = null;\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tint[] param = new int[4];\n\t\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\t\tline = br.readLine();\n\t\t\t\t\tif ((line = br.readLine()) == null || line.equals(\"0\") || line.equals(\"\")) {\n\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t}\n\t\t\t\t\tparam[i] = Integer.parseInt(line);\n\t\t\t\t}\n\t\t\t\tv = param[0];\n\t\t\t\th = param[3];\n\t\t\t\tgoal = param[2];\n\t\t\t\troute = new int[h + 1];\n\t\t\t\troute[0] = param[1];\n\t\t\t\tholizon = new char[h][v];\n\t\t\t\tcheckLine = new boolean[h][v - 1];\n\t\t\t\tfor (int i = 0; i < h; i++) {\n\t\t\t\t\tholizon[i] = br.readLine().trim().toCharArray();\n\t\t\t\t\troute[i + 1] = route[i];\n\t\t\t\t\tfor (int j = 0; j < v - 1; j++) {\n\t\t\t\t\t\tif (holizon[i][j] == '1') {\n\t\t\t\t\t\t\tif (j + 1 == route[i] || j + 2 == route[i]) {\n\t\t\t\t\t\t\t\troute[i + 1] += j + 1 == route[i] ? 1 : -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcheckLine[i][j] = true;\n\t\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\t\tcheckLine[i][j + 1] = true;\n\t\t\t\t\t\t\telse if (j == v - 2)\n\t\t\t\t\t\t\t\tcheckLine[i][j - 1] = true;\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tcheckLine[i][j + 1] = true;\n\t\t\t\t\t\t\t\tcheckLine[i][j - 1] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString ans = \"0\";\n\t\t\t\tif (route[h] != goal) {\n\t\t\t\t\tans = searchAddLine();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(ans);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tprivate static String searchAddLine() {\n\t\tString returnData = \"1\";\n\t\tfor (int i = 0; i < h; i++) {\n\t\t\tfor (int j = 0; j < v - 1; j++) {\n\t\t\t\tif ((j + 1 == route[i] || j + 2 == route[i])\n\t\t\t\t\t\t&& checkLine[i][j] == false) {\n\t\t\t\t\tif (checkResult(i, j) == true) {\n\t\t\t\t\t\treturnData = Integer.toString(i + 1) + \" \"\n\t\t\t\t\t\t\t\t+ Integer.toString(j + 1);\n\t\t\t\t\t\treturn returnData;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn returnData;\n\t}\n\tprivate static boolean checkResult(int ai, int aj) {\n\t\tint tmp = route[ai];\n\t\ttmp += aj + 1 == tmp ? 1 : -1;\n\t\tfor (int i = ai + 1; i < h; i++) {\n\t\t\tfor (int j = 0; j < v - 1; j++) {\n\t\t\t\tif ((j + 1 == tmp || j + 2 == tmp) && holizon[i][j] == '1') {\n\t\t\t\t\ttmp += j + 1 == tmp ? 1 : -1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (tmp == goal)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}",
        "lines_of_code": 93,
        "vanilla_response": [
            "Possible Runtime Exceptions:\n- IOException"
        ]
    },
    {
        "submission_id": "s564420744",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint H = Integer.parseInt(scan.next());\n\t\tint W = Integer.parseInt(scan.next());\n\t\tString[] S = new String[H];\n\t\tfor(int i = 0; i < H; i++) {\n\t\t\tS[i] = scan.next();\n\t\t}\n\t\tfor(int i = 0; i < H; i++) {\n\t\t\tfor(int j = 0; j < W; j++) {\n\t\t\t\tsearch(H, W, i, j, S);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tscan.close();\n\t}\n\tpublic static void search(int H, int W, int i, int j, String[] S) {\n\t\tint sum = 0;\n\t\tboolean R = true;\n\t\tboolean L = true;\n\t\tboolean U = true;\n\t\tboolean D = true;\n\t\tboolean RU = true;\n\t\tboolean RD = true;\n\t\tboolean LU = true;\n\t\tboolean LD = true;\n\t\tif(i == 0) {\n\t\t\tU = false;\n\t\t\tRU = false;\n\t\t\tLU = false;\n\t\t} else if(i == H - 1) {\n\t\t\tD = false;\n\t\t\tRD = false;\n\t\t\tLD = false;\n\t\t}\n\t\tif(j == 0) {\n\t\t\tL = false;\n\t\t\tLU = false;\n\t\t\tLD = false;\n\t\t} else if(j == W - 1) {\n\t\t\tR = false;\n\t\t\tRU = false;\n\t\t\tRD = false;\n\t\t}\n\t\tif(R) {\n\t\t\tif(S[i].substring(j + 1, j + 1 + 1).equals(\"#\")) {\n\t\t\t\tsum++;\n\t\t\t}\n\t\t}\n\t\tif(L) {\n\t\t\tif(S[i].substring(j - 1, j - 1 + 1).equals(\"#\")) {\n\t\t\t\tsum++;\n\t\t\t}\n\t\t}\n\t\tif(U) {\n\t\t\tif(S[i - 1].substring(j, j + 1).equals(\"#\")) {\n\t\t\t\tsum++;\n\t\t\t}\n\t\t}\n\t\tif(D) {\n\t\t\tif(S[i + 1].substring(j, j + 1).equals(\"#\")) {\n\t\t\t\tsum++;\n\t\t\t}\n\t\t}\n\t\tif(RU) {\n\t\t\tif(S[i - 1].substring(j + 1, j + 1 + 1).equals(\"#\")) {\n\t\t\t\tsum++;\n\t\t\t}\n\t\t}\n\t\tif(RD) {\n\t\t\tif(S[i + 1].substring(j + 1, j + 1 + 1).equals(\"#\")) {\n\t\t\t\tsum++;\n\t\t\t}\n\t\t}\n\t\tif(LU) {\n\t\t\tif(S[i - 1].substring(j - 1, j - 1 + 1).equals(\"#\")) {\n\t\t\t\tsum++;\n\t\t\t}\n\t\t}\n\t\tif(LD) {\n\t\t\tif(S[i + 1].substring(j - 1, j - 1 + 1).equals(\"#\")) {\n\t\t\t\tsum++;\n\t\t\t}\n\t\t}\n\t\tif(S[i].substring(j, j + 1).equals(\"#\")) {\n\t\t\tSystem.out.print(\"#\");\n\t\t} else {\n\t\t\tSystem.out.print(sum);\n\t\t}\n\t}\n}",
        "lines_of_code": 93,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1) ArrayIndexOutOfBoundsException\n2) NumberFormatException\n3) NullPointerException"
        ]
    },
    {
        "submission_id": "s523022832",
        "complete_code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tfinal int N = sc.nextInt();\n\t\tfinal int M = sc.nextInt();\n\t\tfinal int E = sc.nextInt();\n\t\tfinal int S = sc.nextInt();\n\t\tfinal int T = sc.nextInt();\n\t\tfinal int R = sc.nextInt();\n\t\tint[] as = new int[M];\n\t\tint[] bs = new int[M];\n\t\tboolean[][] adj = new boolean[M][M];\n\t\tfor(int i = 0; i < M; i++){\n\t\t\tfinal int a = sc.nextInt();\n\t\t\tfinal int b = sc.nextInt();\n\t\t\tas[i] = a;\n\t\t\tbs[i] = b;\n\t\t\tadj[a][b] = adj[b][a] = true;\n\t\t}\n\t\tint[] cs = new int[E];\n\t\tint[] cas = new int[E];\n\t\tint[] cbs = new int[E];\n\t\tfor(int i = 0; i < E; i++){\n\t\t\tfinal int a = sc.nextInt();\n\t\t\tfinal int b = sc.nextInt();\n\t\t\tfinal int c = sc.nextInt();\n\t\t\tcs[i] = c;\n\t\t\tcas[i] = a;\n\t\t\tcbs[i] = b;\n\t\t}\n\t\tboolean[][][] already = new boolean[N][R + 1][1 << E];\n\t\tLinkedList<Integer> time_queue = new LinkedList<Integer>();\n\t\tLinkedList<Integer> move_queue = new LinkedList<Integer>();\n\t\tLinkedList<Integer> bits_queue = new LinkedList<Integer>();\n\t\tLinkedList<Integer> city_queue= new LinkedList<Integer>();\n\t\tbits_queue.add(0);\n\t\tcity_queue.add(S);\n\t\ttime_queue.add(0);\n\t\tmove_queue.add(0);\n\t\talready[S][0][0] = true;\n\t\twhile(!city_queue.isEmpty()){\n\t\t\tfinal int city = city_queue.poll();\n\t\t\tfinal int time = time_queue.poll();\n\t\t\tint bits = bits_queue.poll();\n\t\t\tfinal int move = move_queue.poll();\n\t\t\tif(city == T){\n\t\t\t\tSystem.out.println(move);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor(int i = 0; i < E; i++){\n\t\t\t\tif(city == cs[i]){\n\t\t\t\t\tbits |= (1 << i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!already[S][0][bits]){ \n\t\t\t\talready[S][0][bits] = true;\n\t\t\t\tcity_queue.add(S);\n\t\t\t\ttime_queue.add(0);\n\t\t\t\tbits_queue.add(bits);\n\t\t\t\tmove_queue.add(move + 1);\n\t\t\t}\n\t\t\tif(time < R){\n\t\t\t\tfor(int i = 0; i < E; i++){\n\t\t\t\t\tif((bits & (1 << i)) != 0){\n\t\t\t\t\t\tadj[cas[i]][cbs[i]] = adj[cbs[i]][cas[i]] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int next = 0; next < N; next++){\n\t\t\t\t\tif(!adj[city][next]){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}else if(already[next][time + 1][bits]){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\talready[next][time + 1][bits] = true;\n\t\t\t\t\tcity_queue.add(next);\n\t\t\t\t\ttime_queue.add(time + 1);\n\t\t\t\t\tbits_queue.add(bits);\n\t\t\t\t\tmove_queue.add(move + 1);\n\t\t\t\t}\n\t\t\t\tfor(int i = 0; i < E; i++){\n\t\t\t\t\tif((bits & (1 << i)) != 0){\n\t\t\t\t\t\tadj[cas[i]][cbs[i]] = adj[cbs[i]][cas[i]] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(-1);\n\t}\n}",
        "lines_of_code": 93,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.NoSuchElementException\n2. java.lang.ArrayIndexOutOfBoundsException\n3. java.lang.NullPointerException"
        ]
    },
    {
        "submission_id": "s392725528",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main\n{\n\tstatic int[][] memo;\n\tstatic String s, t;\n\tstatic HashMap<String, String> hs = new HashMap<String, String>();\n\tstatic void trace(int i, int j){\n\t\tif(i > s.length() && j > t.length())\n\t\t\treturn ;\n\t\tif(dp(i,j) == 1+dp(i+1,j+1))\n\t\t{\n\t\t\tSystem.out.print(s.charAt(i));\n\t\t\ttrace(i+1,j+1);\n\t\t}\n\t\telse if(dp(i,j) == dp(i+1,j))\n\t\t\ttrace(i+1,j);\n\t\telse if(dp(i,j) == dp(i,j+1))\n\t\t\ttrace(i,j+1);\n\t}\n\tstatic int dp(int i, int j) {\n\t\tif (i == s.length() && j == t.length()) {\n\t\t\treturn 0;\n\t\t}\n\t\tif(i>=s.length()||j>=t.length())\n\t\t\treturn (int) -1e9;\n\t\tif (i < s.length() && j < t.length() && memo[i][j] != -1)\n\t\t\treturn memo[i][j];\n\t\tif (i < s.length() && j < t.length() && s.charAt(i) == t.charAt(j))\n\t\t\treturn memo[i][j] = 1 + dp(i + 1, j + 1);\n\t\tint iPlus = 0, jPlus = 0;\n\t\tif (i < s.length())\n\t\t\tiPlus = dp(i + 1, j);\n\t\tif (j < t.length())\n\t\t\tjPlus = dp(i, j + 1);\n\t\tint ret = Math.max(iPlus, jPlus);\n\t\treturn memo[i][j] = ret;\n\t}\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\ts = sc.next();\n\t\tt = sc.next();\n\t\tmemo = new int[s.length() + 5][t.length() + 5];\n\t\tfor (int[] a : memo)\n\t\t\tArrays.fill(a, -1);\n\t\ttrace(0,0);\n\t}\n\tstatic class Scanner {\n\t\tStringTokenizer st;\n\t\tBufferedReader br;\n\t\tpublic Scanner(InputStream s) {\n\t\t\tbr = new BufferedReader(new InputStreamReader(s));\n\t\t}\n\t\tpublic String next() throws IOException {\n\t\t\twhile (st == null || !st.hasMoreTokens())\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\treturn st.nextToken();\n\t\t}\n\t\tpublic int nextInt() throws IOException {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\t\tpublic long nextLong() throws IOException {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\t\tpublic String nextLine() throws IOException {\n\t\t\treturn br.readLine();\n\t\t}\n\t\tpublic double nextDouble() throws IOException {\n\t\t\tString x = next();\n\t\t\tStringBuilder sb = new StringBuilder(\"0\");\n\t\t\tdouble res = 0, f = 1;\n\t\t\tboolean dec = false, neg = false;\n\t\t\tint start = 0;\n\t\t\tif (x.charAt(0) == '-') {\n\t\t\t\tneg = true;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\tfor (int i = start; i < x.length(); i++)\n\t\t\t\tif (x.charAt(i) == '.') {\n\t\t\t\t\tres = Long.parseLong(sb.toString());\n\t\t\t\t\tsb = new StringBuilder(\"0\");\n\t\t\t\t\tdec = true;\n\t\t\t\t} else {\n\t\t\t\t\tsb.append(x.charAt(i));\n\t\t\t\t\tif (dec)\n\t\t\t\t\t\tf *= 10;\n\t\t\t\t}\n\t\t\tres += Long.parseLong(sb.toString()) / f;\n\t\t\treturn res * (neg ? -1 : 1);\n\t\t}\n\t\tpublic boolean ready() throws IOException {\n\t\t\treturn br.ready();\n\t\t}\n\t}\n}",
        "lines_of_code": 95,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s181766457",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.UncheckedIOException;\nimport java.util.StringTokenizer;\nclass Main{\n\tstatic long[][] ryori;\n\tpublic static void main(String[] args) {\n\t\tSC sc=new SC(System.in);\n\t\tint N=sc.nextInt();\n\t\tryori=new long[N][3];\n\t\tlong a,t;\n\t\tfor(int i=0; i<N; i++) {\n\t\t\tt=sc.nextLong();\n\t\t\ta=sc.nextLong();\n\t\t\tryori[i][0]=t+a;\n\t\t\tryori[i][1]=t;\n\t\t\tryori[i][2]=a;\n\t\t}\n\t\tlong tkhs=0;\n\t\tlong aoki=0;\n\t\tfor(int i=0; i<N; i++) {\n\t\t\tif(i%2==0) {\n\t\t\t\ttkhs+=ryori[N-1-i][1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\taoki+=ryori[N-i-i][2];\n\t\t\t}\n\t\t}\n\t\tpl(tkhs-aoki);\n\t}\n\tpublic static void pl(Object o) {\n\t\tSystem.out.println(o);\n\t}\n\tpublic static void pl() {\n\t\tSystem.out.println();\n\t}\n\tpublic static void p(Object o) {\n\t\tSystem.out.print(o);\n\t}\n\tstatic class SC {\n\t\tprivate BufferedReader reader = null;\n\t\tprivate StringTokenizer tokenizer = null;\n\t\tpublic SC(InputStream in) {\n\t\t\treader = new BufferedReader(new InputStreamReader(in));\n\t\t}\n\t\tpublic String next() {\n\t\t\tif (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t\t\t\ttry {\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new UncheckedIOException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokenizer.nextToken();\n\t\t}\n\t\tpublic int nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\t\tpublic String nextLine() {\n\t\t\ttry {\n\t\t\t\treturn reader.readLine();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new UncheckedIOException(e);\n\t\t\t}\n\t\t}\n\t}\n\tstatic void q(long[][] d, int left, int right) {\n\t\tif (left>=right) {\n\t\t\treturn;\n\t\t}\n\t\tlong p = d[(left+right)/2][0];\n\t\tint l = left, r = right;\n\t\tlong tmp,tmp1,tmp2;\n\t\twhile(l<=r) {\n\t\t\twhile(d[l][0] < p) { l++; }\n\t\t\twhile(d[r][0] > p) { r--; }\n\t\t\tif (l<=r) {\n\t\t\t\ttmp = d[l][0]; d[l][0] = d[r][0]; d[r][0] = tmp;\n\t\t\t\ttmp1=d[l][1]; tmp2=d[r][1]; d[l][1]=tmp2; d[r][1]=tmp1;\n\t\t\t\ttmp1=d[l][2]; tmp2=d[r][2]; d[l][2]=tmp2; d[r][2]=tmp1;\n\t\t\t\tl++; r--;\n\t\t\t}\n\t\t}\n\t\tq(d, left, r);\n\t\tq(d, l, right);\n\t}\n}",
        "lines_of_code": 95,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nUncheckedIOException"
        ]
    },
    {
        "submission_id": "s192588042",
        "complete_code": "import java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.util.Set;\npublic class Main{\n\tstatic Set<Integer> u;\n\tstatic Set<Integer>[] set;\n\tstatic Map<String, Integer> ref;\n\tstatic char[] s;\n\tstatic int index;\n\tstatic char c(){\n\t\treturn s[index++];\n\t}\n\tstatic Set<Integer> exp(){\n\t\tSet<Integer> ans = fac();\n\t\twhile(index < s.length){\n\t\t\tchar c = c();\n\t\t\tif(c=='u'){\n\t\t\t\tSet<Integer> e = fac();\n\t\t\t\tfor(int a:e)ans.add(a);\n\t\t\t}\n\t\t\telse if(c=='i'){\n\t\t\t\tSet<Integer> e = fac();\n\t\t\t\tSet<Integer> tmp = new HashSet<Integer>();\n\t\t\t\tfor(int a:e)if(ans.contains(a))tmp.add(a);\n\t\t\t\tans = tmp;\n\t\t\t}\n\t\t\telse if(c=='d'){\n\t\t\t\tSet<Integer> e = fac();\n\t\t\t\tfor(int a:e)ans.remove(a);\n\t\t\t}\n\t\t\telse if(c=='s'){\n\t\t\t\tSet<Integer> e = fac();\n\t\t\t\tSet<Integer> tmp = new HashSet<Integer>();\n\t\t\t\tfor(int a:e)if(!ans.contains(a))tmp.add(a);\n\t\t\t\tfor(int a:ans)if(!e.contains(a))tmp.add(a);\n\t\t\t\tans = tmp;\n\t\t\t}\n\t\t\telse break;\n\t\t}\n\t\treturn ans;\n\t}\n\tstatic Set<Integer> fac(){\n\t\tchar c = c();\n\t\tif(c=='(')return exp();\n\t\tif(c=='c'){\n\t\t\tSet<Integer> ans = new HashSet<Integer>();\n\t\t\tans.addAll(u);\n\t\t\tint id = ref.get(c()+\"\");\n\t\t\tfor(int a:set[id])ans.remove(a);\n\t\t\treturn ans;\n\t\t}\n\t\treturn set[ref.get(c+\"\")];\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tu = new HashSet<Integer>();\n\t\t\tset = new HashSet[5];\n\t\t\tref = new HashMap<String, Integer>();\n\t\t\tint id = 0;\n\t\t\twhile(true){\n\t\t\t\tString n = sc.next();\n\t\t\t\tint k = sc.nextInt();\n\t\t\t\tif(n.equals(\"R\"))break;\n\t\t\t\tref.put(n, id);\n\t\t\t\tset[id] = new HashSet<Integer>();\n\t\t\t\twhile(k--!=0){\n\t\t\t\t\tint x = sc.nextInt();\n\t\t\t\t\tset[id].add(x);\n\t\t\t\t\tu.add(x);\n\t\t\t\t}\n\t\t\t\tid++;\n\t\t\t}\n\t\t\ts = (sc.next()+\"$\").toCharArray();\n\t\t\tindex = 0;\n\t\t\tSet<Integer> a = exp();\n\t\t\tif(a.isEmpty())System.out.println(\"NULL\");\n\t\t\telse {\n\t\t\t\tPriorityQueue<Integer> q = new PriorityQueue<Integer>();\n\t\t\t\tfor(int i:a)q.add(i);\n\t\t\t\tboolean f = true;\n\t\t\t\twhile(!q.isEmpty()){\n\t\t\t\t\tif(!f)System.out.print(\" \");\n\t\t\t\t\tf = false;\n\t\t\t\t\tSystem.out.print(q.poll());\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n}",
        "lines_of_code": 95,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n- Runtimeexception\n- NullPointerException\n- NumberFormatException\n- IOException"
        ]
    },
    {
        "submission_id": "s625834710",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        FastReader scan = new FastReader();\n        PrintWriter out = new PrintWriter(System.out);\n        Task solver = new Task();\n        int t = 1;\n        while (t --> 0) solver.solve(1, scan, out);\n        out.close();\n    }\n    static class Task {\n        static int h, n;\n        static Monster[] m;\n        public void solve(int testNumber, FastReader scan, PrintWriter out) {\n            h = scan.nextInt();\n            n = scan.nextInt();\n            m = new Monster[n];\n            for(int i = 0; i < n; i++) m[i] = new Monster(scan.nextInt(), scan.nextInt());\n            long[] dp = new long[h+1];\n            Arrays.fill(dp, Integer.MAX_VALUE/1000);\n            dp[h] = 0;\n            for(int i = h; i >= 0; i--) {\n                for(int j = 0; j < n; j++) {\n                    int next = Math.max(0, i - m[j].a);\n                    dp[next] = Math.min(dp[next], dp[i] + m[j].b);\n                }\n            }\n            out.println(dp[0]);\n        }\n        static class Monster {\n            int a, b;\n            public Monster(int cc, int dd) {\n                a = cc;\n                b = dd;\n            }\n        }\n    }\n    static void shuffle(int[] a) {\n        Random get = new Random();\n        for (int i = 0; i < a.length; i++) {\n            int r = get.nextInt(a.length);\n            int temp = a[i];\n            a[i] = a[r];\n            a[r] = temp;\n        }\n    }\n    static void shuffle(long[] a) {\n        Random get = new Random();\n        for (int i = 0; i < a.length; i++) {\n            int r = get.nextInt(a.length);\n            long temp = a[i];\n            a[i] = a[r];\n            a[r] = temp;\n        }\n    }\n    static class FastReader {\n        BufferedReader br;\n        StringTokenizer st;\n        public FastReader() {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n        public FastReader(String s) throws FileNotFoundException {\n            br = new BufferedReader(new FileReader(new File(s)));\n        }\n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n        String nextLine() {\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n}",
        "lines_of_code": 95,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nFileNotFoundException\nIOException"
        ]
    },
    {
        "submission_id": "s536144310",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main {\n\tboolean main() throws IOException {\n\t\tString ss = reader.readLine();\n\t\tString[] sp = ss.split(\" \");\n\t\tString sss = sp[0];\n\t\tint N;\n\t\ttry {\n\t\t\tN = Integer.parseInt(sss);\n\t\t}catch(Exception e) {\n\t\t\tthrow new IOException();\n\t\t}\n\t\tif (N == 0) \n\t\t\treturn false; \n\t\tList<String> list = new ArrayList<String>();\n\t\tint[] cnt = new int[26]; \n\t\tint[] flag = new int[26]; \n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tString s = reader.readLine();\n\t\t\tlist.add(s);\n\t\t\tchar c1 = s.charAt(0); \n\t\t\tchar c2 = s.charAt(s.length() - 1); \n\t\t\tcnt[c1 - 'a']++;\n\t\t\tflag[c1 - 'a'] = 1;\n\t\t\tcnt[c2 - 'a']--;\n\t\t}\n\t\tboolean dame = false;\n\t\tfor(int i = 0; i < cnt.length; i++) {\n\t\t\tif (cnt[i] != 0) {\n\t\t\t\tdame = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!dame) {\n\t\t\tString s = list.get(0);\n\t\t\tchar c1 = s.charAt(0); \n\t\t\tchar c2 = s.charAt(s.length() - 1); \n\t\t\tflag[c1 - 'a'] = 0;\n\t\t\tfor(;;) {\n\t\t\t\tboolean modify = false;\n\t\t\t\tfor(int i = 0; i < list.size(); i++) {\n\t\t\t\t\ts = list.get(i);\n\t\t\t\t\tc1 = s.charAt(0); \n\t\t\t\t\tc2 = s.charAt(s.length() - 1); \n\t\t\t\t\tif (flag[c1 - 'a'] == 0 && flag[c2 - 'a'] != 0) {\n\t\t\t\t\t\tflag[c2 - 'a'] = 0;\n\t\t\t\t\t\tmodify = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!modify)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor(int i = 0; i < flag.length; i++) {\n\t\t\t\tif (flag[i] != 0) {\n\t\t\t\t\tdame = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.printf(\"%s\\n\", dame ? \"NG\" : \"OK\");\n\t\treturn true; \n\t}\n\tprivate final static boolean DEBUG = false; \n\tpublic static void main(String[] args) throws IOException {\n\t\tif (DEBUG) {\n\t\t\tlog = System.out;\n\t\t\tString inputStr = \"7\\nab\\nbc\\nca\\nde\\nef\\nfg\\ngd\\n\" + \"0\\n\";\n\t\t\treader = new BufferedReader(new StringReader(inputStr)); \n\t\t}\n\t\telse {\n\t\t\tlog = new PrintStream(new OutputStream() { public void write(int b) {} } ); \n\t\t\treader = new BufferedReader(new InputStreamReader(System.in)); \n\t\t}\n\t\tfor(int i = 0; ; i++) {\n\t\t\tboolean b = new Main().main();\n\t\t\tif (!b)\n\t\t\t\tbreak;\n\t\t}\t\t\n\t\treader.close();\n\t}\n\tstatic PrintStream log;\n\tstatic BufferedReader reader;\n\tprivate static int[] readIntArray() throws IOException {\n\t\tString s = reader.readLine();\n\t\tif (s == null)\n\t\t\treturn null;\n\t\tString[] sp = s.split(\" \");\n\t\tint[] a = new int[sp.length];\n\t\tfor(int i = 0; i < sp.length; i++) {\n\t\t\ta[i] = Integer.parseInt(sp[i]);\n\t\t}\n\t\treturn a;\n\t}\n}",
        "lines_of_code": 95,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nNumberFormatException"
        ]
    },
    {
        "submission_id": "s222624163",
        "complete_code": "import java.util.*;\nimport java.io.*;\npublic class Main {\n\tstatic ArrayList<Route>[] tree;\n\tstatic Node[] nodes;\n\tpublic static void main (String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString[] first = br.readLine().split(\" \", 2);\n\t\tint n = Integer.parseInt(first[0]);\n\t\tint q = Integer.parseInt(first[1]);\n\t\ttree = new ArrayList[n];\n\t\tnodes = new Node[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ttree[i] = new ArrayList<Route>();\n\t\t}\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tString[] line = br.readLine().split(\" \", 4);\n\t\t\tint a = Integer.parseInt(line[0]) - 1;\n\t\t\tint b = Integer.parseInt(line[1]) - 1;\n\t\t\tint c = Integer.parseInt(line[2]) - 1;\n\t\t\tint d = Integer.parseInt(line[3]);\n\t\t\tRoute route = new Route(c, d, a, b);\n\t\t\ttree[a].add(route);\n\t\t\ttree[b].add(route);\n\t\t}\n\t\taddNode(0, new ArrayList<Integer>(), new int[n], new int[n], 0);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < q; i++) {\n\t\t\tString[] line = br.readLine().split(\" \", 4);\n\t\t\tint x = Integer.parseInt(line[0]) - 1;\n\t\t\tint y = Integer.parseInt(line[1]);\n\t\t\tint u = Integer.parseInt(line[2]) - 1;\n\t\t\tint v = Integer.parseInt(line[3]) - 1;\n\t\t\tint idx = 0;\n\t\t\twhile (idx < nodes[u].fromRoot.size() && idx < nodes[v].fromRoot.size() && nodes[u].fromRoot.get(idx).equals(nodes[v].fromRoot.get(idx))) {\n\t\t\t\tidx++;\n\t\t\t}\n\t\t\tif (idx != 0) {\n\t\t\t\tidx--;\n\t\t\t}\n\t\t\tint total = nodes[u].total - nodes[u].colorSum[x] + nodes[u].colorNum[x] * y + nodes[v].total - nodes[v].colorSum[x] + nodes[v].colorNum[x] * y;\n\t\t\ttotal -= (nodes[idx].total - nodes[idx].colorSum[x] + nodes[idx].colorNum[x] * y) * 2;\n\t\t\tsb.append(total).append(\"\\n\");\n\t\t}\n\t\tSystem.out.print(sb);\n\t}\n\tstatic void addNode(int idx, ArrayList<Integer> fromRoot, int[] colorNum, int[] colorSum, int total) {\n\t\tnodes[idx] = new Node(fromRoot, colorNum, colorSum, total);\n\t\tfor (Route r : tree[idx]) {\n\t\t\tint to;\n\t\t\tif (r.to == idx) {\n\t\t\t\tto = r.from;\n\t\t\t} else {\n\t\t\t\tto = r.to;\n\t\t\t}\n\t\t\tif (nodes[to] == null) {\n\t\t\t\tArrayList<Integer> nextList = (ArrayList<Integer>)(fromRoot.clone());\n\t\t\t\tnextList.add(idx);\n\t\t\t\tint[] nextNum = (int[])(colorNum.clone());\n\t\t\t\tnextNum[r.color]++;\n\t\t\t\tint[] nextSum = (int[])(colorSum.clone());\n\t\t\t\tnextSum[r.color] += r.dist;\n\t\t\t\taddNode(to, nextList, nextNum, nextSum, total + r.dist);\n\t\t\t}\n\t\t}\n\t}\n\tstatic class Node {\n\t\tArrayList<Integer> fromRoot;\n\t\tint[] colorNum;\n\t\tint[] colorSum;\n\t\tint total;\n\t\tpublic Node(ArrayList<Integer> fromRoot, int[] colorNum, int[] colorSum, int total) {\n\t\t\tthis.fromRoot = fromRoot;\n\t\t\tthis.colorNum = colorNum;\n\t\t\tthis.colorSum = colorSum;\n\t\t\tthis.total = total;\n\t\t}\n\t}\n\tstatic class Route {\n\t\tint color;\n\t\tint dist;\n\t\tint from;\n\t\tint to;\n\t\tpublic Route(int color, int dist, int from, int to) {\n\t\t\tthis.color = color;\n\t\t\tthis.dist = dist;\n\t\t\tthis.from = from;\n\t\t\tthis.to = to;\n\t\t}\n\t\tpublic boolean equals(Object o) {\n\t\t\tRoute another = (Route) o;\n\t\t\treturn this.color == another.color && this.dist == another.dist && ((this.from == another.from && this.to == another.to) || (this.from == another.to && this.to == another.from));\n\t\t}\n\t}\n}",
        "lines_of_code": 95,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. IOException\n2. NumberFormatException\n3. ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s062512646",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\npublic class Main {\n  private static final long modulo = (long)(Math.pow(10, 9) + 7);\n  public static void main(String[] args) throws Exception {\n    try (final var stdin = new InputStreamReader(System.in);\n         final var br = new BufferedReader(stdin)) {\n      final var s = br.readLine().split(\" \");\n      final var n = Integer.parseInt(s[0]);\n      final var k = Integer.parseInt(s[1]);\n      final var positives = new ArrayList<Long>();\n      final var negatives = new ArrayList<Long>();\n      var zeroCount = 0;\n      final var alist = br.readLine().split(\" \");\n      for (String astr: alist) {\n        var a = Long.parseLong(astr);\n        if (a > 0) {\n          positives.add(a);\n        } else if (a < 0) {\n          negatives.add(-a);\n        } else {\n          zeroCount++;\n        }\n      }\n      positives.sort(Long::compareTo);\n      negatives.sort(Long::compareTo);\n      int positiveIdxDesc = positives.size() - 1;\n      int positiveIdxAsc = 0;\n      int negativeIdxDesc = negatives.size() - 1;\n      int negativeIdxAsc = 0;\n      int rest = k;\n      long sumDesc = 1;\n      long sumAsc = 1;\n      while (rest >= 2) {\n        long multiplierByPositiveDesc = positiveIdxDesc >= 1 ?\n                                        positives.get(positiveIdxDesc) * positives.get(positiveIdxDesc - 1) :\n                                        0;\n        long multiplierByNegativeDesc = negativeIdxDesc >= 1 ?\n                                        negatives.get(negativeIdxDesc) * negatives.get(negativeIdxDesc - 1) :\n                                        0;\n        long multiplierByPositiveAsc = positiveIdxAsc < positives.size() - 1 ?\n                                       positives.get(positiveIdxAsc) * positives.get(positiveIdxAsc + 1) :\n                                       0;\n        long multiplierByNegativeAsc = negativeIdxAsc < negatives.size() - 1 ?\n                                       negatives.get(negativeIdxAsc) * negatives.get(negativeIdxAsc + 1) :\n                                       0;\n        if (multiplierByNegativeDesc == 0 && multiplierByPositiveDesc == 0) {\n          break;\n        }\n        if (multiplierByPositiveDesc > multiplierByNegativeDesc) {\n          sumDesc = (sumDesc * positives.get(positiveIdxDesc)) % modulo;\n          sumDesc = (sumDesc * positives.get(positiveIdxDesc - 1)) % modulo;\n          positiveIdxDesc -= 2;\n        } else {\n          sumDesc = (sumDesc * negatives.get(negativeIdxDesc)) % modulo;\n          sumDesc = (sumDesc * negatives.get(negativeIdxDesc - 1)) % modulo;\n          negativeIdxDesc -= 2;\n        }\n        if (multiplierByPositiveAsc > multiplierByNegativeAsc) {\n          sumAsc = (sumAsc * positives.get(positiveIdxAsc)) % modulo;\n          sumAsc = (sumAsc * positives.get(positiveIdxAsc + 1)) % modulo;\n          positiveIdxAsc += 2;\n        } else {\n          sumAsc = (sumAsc * negatives.get(negativeIdxAsc)) % modulo;\n          sumAsc = (sumAsc * negatives.get(negativeIdxAsc + 1)) % modulo;\n          negativeIdxAsc += 2;\n        }\n        rest -= 2;\n      }\n      if (rest >= 2) {\n        sumDesc = (sumDesc * positives.get(0)) % modulo;\n        sumDesc = (sumDesc * -negatives.get(0));\n        sumDesc += modulo;\n        sumDesc %= modulo;\n        System.out.println(sumDesc);\n      } else if (rest >= 1) {\n        if (positiveIdxDesc >= 0) {\n          sumDesc = (sumDesc * positives.get(positiveIdxDesc)) % modulo;\n          System.out.println(sumDesc);\n        } else if (zeroCount >= 1) {\n          sumDesc = 0;\n          System.out.println(sumDesc);\n        } else {\n          sumAsc *= -negatives.get(negativeIdxAsc);\n          sumAsc += modulo;\n          sumAsc %= modulo;\n          System.out.println(sumAsc);\n        }\n      } else {\n        System.out.println(sumDesc);\n      }\n    }\n  }\n}",
        "lines_of_code": 95,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nNumberFormatException\nIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s954661431",
        "complete_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tnew Main().run();\n\t}\n\tint N;\n\tlong[] a;\n\tlong[] sum;\n\tint s = 0;\n\tArrayList<Integer> ans = new ArrayList<>();\n\tvoid erase(int i) {\n\t\tans.add(i);\n\t\tif (s + i == N - 1) {\n\t\t\t--N;\n\t\t\treturn;\n\t\t}\n\t\tif (i == 0) {\n\t\t\ts += 1;\n\t\t\treturn;\n\t\t} else if (i == 1) {\n\t\t\ta[s + 2] += a[s];\n\t\t\ts += 2;\n\t\t} else if (i == 2) {\n\t\t\ta[s + 3] += a[s + 1];\n\t\t\ta[s + 2] = a[s];\n\t\t\ts += 2;\n\t\t}\n\t}\n\tvoid run() {\n\t\tScanner sc = new Scanner(System.in);\n\t\tN = sc.nextInt();\n\t\ta = new long[N];\n\t\tsum = new long[2];\n\t\tboolean[] f = new boolean[] { true, true };\n\t\tfor (int i = 0; i < N; ++i) {\n\t\t\ta[i] = sc.nextLong();\n\t\t\tif (a[i] > 0)\n\t\t\t\tsum[i % 2] += a[i];\n\t\t\tf[i % 2] &= a[i] < 0;\n\t\t}\n\t\tif (f[0] && f[1]) {\n\t\t\tlong max = -Long.MAX_VALUE / 3;\n\t\t\tint idx = -1;\n\t\t\tfor (int i = 0; i < N; ++i) {\n\t\t\t\tif (max < a[i]) {\n\t\t\t\t\tidx = i;\n\t\t\t\t\tmax = a[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (a[s] != max) {\n\t\t\t\terase(1);\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif (s == N - 1)\n\t\t\t\t\tbreak;\n\t\t\t\tif (s == N - 2) {\n\t\t\t\t\terase(1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\terase(2);\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t} else {\n\t\t\tif (sum[0] < sum[1]) {\n\t\t\t\terase(0);\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif (s == N - 1)\n\t\t\t\t\tbreak;\n\t\t\t\tif (s == N - 2) {\n\t\t\t\t\terase(1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (a[s] < 0) {\n\t\t\t\t\terase(0);\n\t\t\t\t\terase(0);\n\t\t\t\t} else if (a[s + 2] > 0) {\n\t\t\t\t\terase(1);\n\t\t\t\t} else if (a[s + 2] <= 0) {\n\t\t\t\t\terase(2);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(Math.max(sum[0], sum[1]));\n\t\t}\n\t\tSystem.out.println(ans.size());\n\t\tfor (int v : ans) {\n\t\t\tSystem.out.println(v + 1);\n\t\t}\n\t}\n\tstatic void tr(Object... objects) {\n\t\tSystem.out.println(Arrays.deepToString(objects));\n\t}\n}",
        "lines_of_code": 95,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s578990209",
        "complete_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n    \tMain main = new Main();\n    \tScanner sc = new Scanner(System.in);\n    \tint N = sc.nextInt();\n    \tint M = sc.nextInt();\n    \tList<Integer> Goal = new ArrayList<>();\n    \tMap<Integer, Room> roomList = new HashMap<>();\n    \tfor (int i = 0; i < M; i++) {\n    \t\tint rootA = sc.nextInt();\n    \t\tint rootB = sc.nextInt();\n    \t\tif (roomList.containsKey(rootA)) {\n    \t\t\tRoom room = roomList.get(rootA);\n    \t\t\troom.setRoot(rootB);\n    \t\t} else {\n    \t\t\tif (rootA != 1) {\n        \t\t\tRoom room = main.new Room(rootA);\n        \t\t\troom.setRoot(rootB);\n        \t\t\troomList.put(rootA, room);\n        \t\t\tif (rootB == 1) {\n        \t\t\t\tGoal.add(rootA);\n        \t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tif (roomList.containsKey(rootB)) {\n    \t\t\tRoom room = roomList.get(rootB);\n    \t\t\troom.setRoot(rootA);\n    \t\t} else {\n    \t\t\tif (rootB != 1) {\n        \t\t\tRoom room = main.new Room(rootB);\n        \t\t\troom.setRoot(rootA);\n        \t\t\troomList.put(rootB, room);\n        \t\t\tif (rootA == 1) {\n        \t\t\t\tGoal.add(rootB);\n        \t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    \tinNum(Goal, roomList);\n    \tfor (int i = 2; i < N; i++) {\n    \t\tRoom room = roomList.get(i);\n    \t\tif (room.getHasNum() == 0) {\n    \t\t\tSystem.out.println(\"No\");\n    \t\t\tSystem.exit(0);\n    \t\t}\n    \t}\n    \tStringBuilder sb = new StringBuilder();\n    \tfor (int i = 2; i < N; i++) {\n    \t\tRoom room = roomList.get(i);\n    \t\tsb.append(room.getHasNum() + \"\\n\");\n    \t}\n    \tSystem.out.println(sb);\n    }\n    public static void inNum(List<Integer> Goal, Map<Integer, Room> roomList) {\n    \t\tList<Integer> Goal2 = new ArrayList<>();\n        \tfor (int i = 0; i < Goal.size(); i++) {\n        \t\tRoom room = roomList.get(Goal.get(i));\n        \t\tGoal2.add(room.getRoomNum());\n        \t\tSet<Integer> root = room.getRoot();\n        \t\tfor (Integer num : root) {\n        \t\t\tRoom next = roomList.get(num);\n        \t\t\tnext.setNext(room.getRoomNum());\n        \t\t}\n        \t}\n        \tinNum(Goal2,roomList);\n    }\n    private class  Room {\n    \tSet<Integer> root = new HashSet<>();\n    \tboolean hasGoal = false;\n    \tint hasNum = 0;\n    \tint roomNum = 0;\n    \tpublic Room(int i) {\n    \t\troomNum = i;\n    \t}\n    \tpublic void setRoot(Integer i) {\n    \t\tif (i == 1) {\n    \t\t\thasGoal = true;\n    \t\t\thasNum = 1;\n    \t\t}\n    \t\troot.add(i);\n    \t}\n    \tpublic void setNext(Integer i) {\n    \t\t\thasGoal = true;\n    \t\t\thasNum = i;\n    \t}\n    \tpublic Set<Integer> getRoot() {\n    \t\treturn root;\n    \t}\n    \tpublic Integer getRoomNum() {\n    \t\treturn roomNum;\n    \t}\n    \tpublic Integer getHasNum() {\n    \t\treturn hasNum;\n    \t}\n    }\n}",
        "lines_of_code": 97,
        "vanilla_response": [
            "Possible Runtime Exceptions -\n1. java.util.NoSuchElementException\n2. java.lang.NumberFormatException\n3. java.lang.NullPointerException"
        ]
    },
    {
        "submission_id": "s848854755",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main {\n\tboolean main() throws IOException {\n\t\tString ss = reader.readLine();\n\t\tString[] sp = ss.split(\" \");\n\t\tString sss = sp[0];\n\t\tint N;\n\t\ttry {\n\t\t\tN = Integer.parseInt(sss);\n\t\t}catch(Exception e) {\n\t\t\tif (sss.length() == 0)\n\t\t\t\tthrow new IOException();\n\t\t\treturn false; \n\t\t}\n\t\tif (N == 0) \n\t\t\treturn false; \n\t\tList<String> list = new ArrayList<String>();\n\t\tint[] cnt = new int[26]; \n\t\tint[] flag = new int[26]; \n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tString s = reader.readLine();\n\t\t\tlist.add(s);\n\t\t\tchar c1 = s.charAt(0); \n\t\t\tchar c2 = s.charAt(s.length() - 1); \n\t\t\tcnt[c1 - 'a']++;\n\t\t\tflag[c1 - 'a'] = 1;\n\t\t\tcnt[c2 - 'a']--;\n\t\t}\n\t\tboolean dame = false;\n\t\tfor(int i = 0; i < cnt.length; i++) {\n\t\t\tif (cnt[i] != 0) {\n\t\t\t\tdame = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!dame) {\n\t\t\tString s = list.get(0);\n\t\t\tchar c1 = s.charAt(0); \n\t\t\tchar c2 = s.charAt(s.length() - 1); \n\t\t\tflag[c1 - 'a'] = 0;\n\t\t\tfor(;;) {\n\t\t\t\tboolean modify = false;\n\t\t\t\tfor(int i = 0; i < list.size(); i++) {\n\t\t\t\t\ts = list.get(i);\n\t\t\t\t\tc1 = s.charAt(0); \n\t\t\t\t\tc2 = s.charAt(s.length() - 1); \n\t\t\t\t\tif (flag[c1 - 'a'] == 0 && flag[c2 - 'a'] != 0) {\n\t\t\t\t\t\tflag[c2 - 'a'] = 0;\n\t\t\t\t\t\tmodify = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!modify)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor(int i = 0; i < flag.length; i++) {\n\t\t\t\tif (flag[i] != 0) {\n\t\t\t\t\tdame = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.printf(\"%s\\n\", dame ? \"NG\" : \"OK\");\n\t\treturn true; \n\t}\n\tprivate final static boolean DEBUG = false; \n\tpublic static void main(String[] args) throws IOException {\n\t\tif (DEBUG) {\n\t\t\tlog = System.out;\n\t\t\tString inputStr = \"7\\nab\\nbc\\nca\\nde\\nef\\nfg\\ngd\\n\" + \"0\\n\";\n\t\t\treader = new BufferedReader(new StringReader(inputStr)); \n\t\t}\n\t\telse {\n\t\t\tlog = new PrintStream(new OutputStream() { public void write(int b) {} } ); \n\t\t\treader = new BufferedReader(new InputStreamReader(System.in)); \n\t\t}\n\t\tfor(int i = 0; ; i++) {\n\t\t\tboolean b = new Main().main();\n\t\t\tif (!b)\n\t\t\t\tbreak;\n\t\t}\t\t\n\t\treader.close();\n\t}\n\tstatic PrintStream log;\n\tstatic BufferedReader reader;\n\tprivate static int[] readIntArray() throws IOException {\n\t\tString s = reader.readLine();\n\t\tif (s == null)\n\t\t\treturn null;\n\t\tString[] sp = s.split(\" \");\n\t\tint[] a = new int[sp.length];\n\t\tfor(int i = 0; i < sp.length; i++) {\n\t\t\ta[i] = Integer.parseInt(sp[i]);\n\t\t}\n\t\treturn a;\n\t}\n}",
        "lines_of_code": 97,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nNumberFormatException"
        ]
    },
    {
        "submission_id": "s449703693",
        "complete_code": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n\tnew Main().run();\n    }\n    Scanner sc = new Scanner(System.in);\n    int w, h, xs, ys, xg, yg, n;\n    int c, d, x, y;\n    int[][] block;\n    boolean[][] route;\n    int[] dirX = {1, 0, -1, 0};\n    int[] dirY = {0, 1, 0, -1};\n    void run(){\n\twhile(sc.hasNext()){\n\t    w = sc.nextInt()+1;\n\t    h = sc.nextInt()+1;\n\t    if(w==1 && h==1) break;\n\t    put();\n\t    makeRoute();\n\t    if(!route[ys][xs] || !route[yg][xg]){\n\t\tSystem.out.println(\"NG\");\n\t\tcontinue;\n\t    }\n\t    else System.out.println(search(xs, ys) ? \"OK\":\"NG\");\n\t}\n    }\n    boolean search(int x, int y){\n\tint d = getD(x, y);\n\tboolean goodRoute = false;\n\tif(d==0) return true;\n\tfor(int i=0; i<dirX.length; i++){\n\t    int a = x+dirX[i];\n\t    int b = y+dirY[i];\n\t    if(a>0 && a<h && b>0 && b<w){\n\t\tif(route[b][a] && getD(a, b)<d){\n\t\t    goodRoute = true;\n\t\t    if(search(a, b)) return true;\n\t\t}\n\t\telse if(!goodRoute && route[b][a])\n\t\t    if(search(a, b)) return true;\n\t    }\n\t}\n\treturn false;\n    }\n    int getD(int x, int y){ return Math.abs(xg-x) + Math.abs(yg-y); }\n    void show(){\n\tfor(int i=1; i<w; i++){\n\t    for(int k=1; k<h; k++)\n\t\tSystem.out.print(route[i][k] ? \"\u25a1\":\"\u25a0\");\n\t    System.out.println();\n\t}\n\tSystem.out.println(\"----------------\");\n    }\n    void put(){\n\txs = sc.nextInt();\n\tys = sc.nextInt();\n\txg = sc.nextInt();\n\tyg = sc.nextInt();\n\tn = sc.nextInt();\n\tblock = new int[h][w];\n\troute = new boolean[h][w];\n\tfor(int i=0; i<n; i++){\n\t    c = sc.nextInt();\n\t    d = sc.nextInt();\n\t    x = sc.nextInt();\n\t    y = sc.nextInt();\n\t    if(d==0)\n\t\tfor(int a=x; a<x+4; a++)\n\t\t    for(int b=y; b<y+2; b++)\n\t\t\tblock[b][a] = c;    \n\t    else\n\t\tfor(int a=x; a<x+2; a++)\n\t\t    for(int b=y; b<y+4; b++)\n\t\t\tblock[b][a] = c;\n\t}\n    }\n    void makeRoute(){\n\tint tcolor = block[ys][xs];\n\tfor(int i=0; i<w; i++)\n\t    for(int k=0; k<h; k++)\n\t\tif(block[k][i]==tcolor) route[k][i] = true;\n    }\n}",
        "lines_of_code": 83,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nInputMismatchException\nArrayIndexOutOfBoundsException\nNullPointerException"
        ]
    },
    {
        "submission_id": "s117667553",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Main main = new Main();\n        main.solve();\n    }\n    public void solve() throws Exception {\n        Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int N = scan.nextInt();\n        int Q = scan.nextInt();\n        Map<Integer, Node> map = new HashMap<>();\n        Node root = new Node(1);\n        map.put(1, root);\n        for (int i = 1; i < N; i++) {\n            int a = scan.nextInt();\n            int b = scan.nextInt();\n            if (!map.containsKey(a)) {\n                Node a_n = new Node(a);\n                map.put(a,a_n);\n            }\n            if (!map.containsKey(b)) {\n                Node b_n = new Node(b);\n                map.put(b,b_n);\n            }\n            Node a_n = map.get(a);\n            Node b_n = map.get(b);\n            a_n.add(b_n);\n            b_n.parent(a_n);\n        }\n        for (int i = 0; i < Q; i++) {\n            int p = scan.nextInt();\n            long x = scan.nextLong();\n            Node n = map.get(p);\n            n.increment += x;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 1; i <= N; i++) {\n            Node x = map.get(i);\n            sb.append(x.score());\n            sb.append(\" \");\n        }\n        System.out.println(sb.substring(0, sb.length()-1));\n    }\n    class Node {\n        int x;\n        long increment;\n        long score;\n        Node parent;\n        List<Node> neibors;\n        Node(int x) {\n            this.x = x;\n            this.parent = null;\n            this.increment = 0;\n            this.score = -1;\n            this.neibors = new ArrayList<>();\n        }\n        void add(Node child) {\n            neibors.add(child);\n        }\n        void parent(Node parent) {\n            if (this.parent == null) {\n                this.parent = parent;\n            }\n            if (this.parent.x != parent.x) {\n                throw new Error();\n            }\n        }\n        long score() {\n            if (this.score != -1) {\n                return this.score;\n            }\n            Node parent = this.parent;\n            if (parent == null) {\n                this.score = this.increment;\n                return this.score;\n            }\n            this.score = this.increment + this.parent.score();\n            return this.score;\n        }\n    }\n}",
        "lines_of_code": 83,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nError"
        ]
    },
    {
        "submission_id": "s858061999",
        "complete_code": "import java.util.*;\nimport java.io.*;\npublic class Main {\n\tpublic int calculate(String str){\n\t\tStringBuilder ans = new StringBuilder(str);\n\t\twhile( true ){\n\t\t\tStringBuilder temp = new StringBuilder();\n\t\t\tint key = 0;\n\t\t\tint before = -1;\n\t\t\tint after = ans.length();\n\t\t\tfor(int i = 0; i < ans.length(); i++){\n\t\t\t\tif( !Character.isDigit(ans.charAt(i)) ){\n\t\t\t\t\tif( ans.charAt(i) == '*' || ans.charAt(i) == '/' ){\n\t\t\t\t\t\tkey = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if( key == 0 ){\n\t\t\t\t\t\tkey = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( key == 0 ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor(int i = key-1; i > 0; i--){\n\t\t\t\tif( !Character.isDigit(ans.charAt(i)) ){\n\t\t\t\t\tbefore = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = key+1; i < ans.length(); i++){\n\t\t\t\tif( !Character.isDigit(ans.charAt(i)) ){\n\t\t\t\t\tafter = i;\n\t\t\t\t\tbreak;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\ttemp.append(ans.toString().substring(0, before+1));\n\t\t\tint x = Integer.parseInt(ans.toString().substring(before+1, key));\n\t\t\tint y = Integer.parseInt(ans.toString().substring(key+1, after));\n\t\t\tswitch( ans.charAt(key) ){\n\t\t\t\tcase '*' : temp.append(x*y); break;\n\t\t\t\tcase '/' : temp.append(x/y); break;\n\t\t\t\tcase '+' : temp.append(x+y); break;\n\t\t\t\tcase '-' : temp.append(x-y); break;\n\t\t\t}\n\t\t\ttemp.append(ans.toString().substring(after));\n\t\t\tans = new StringBuilder(temp);\n\t\t}\n\t\treturn Integer.parseInt(ans.toString());\n\t}\n\tpublic int step(String str){\n\t\tStringBuilder ans = new StringBuilder(str);\n\t\twhile( true ){\n\t\t\tStringBuilder temp = new StringBuilder();\n\t\t\tint n = ans.indexOf(\")\");\n\t\t\tint m = ans.lastIndexOf(\"(\", n);\n\t\t\tif( n < 0 ){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp.append(ans.toString().substring(0, m));\n\t\t\ttemp.append(calculate(ans.toString().substring(m+1, n)));\n\t\t\ttemp.append(ans.toString().substring(n+1, ans.length()));\n\t\t\tans = new StringBuilder(temp);\n\t\t}\n\t\treturn calculate(ans.toString());\n\t}\n\tpublic void solve() throws IOException{\n\t\tScanner stdIn = null;\n\t\ttry{\n\t\t\tstdIn = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t\twhile( stdIn.hasNext() ){\n\t\t\t\tString str = stdIn.next();\n\t\t\t\tSystem.out.println(step(str));\n\t\t\t}\n\t\t} finally {\n\t\t\tif( stdIn != null ){\n\t\t\t\tstdIn.close();\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main (String args[]) throws IOException{\n\t\tnew Main().solve();\t\t\n\t}\n}",
        "lines_of_code": 83,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNumberFormatException\nIndexOutOfBoundsException\nArithmeticException"
        ]
    },
    {
        "submission_id": "s360841501",
        "complete_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.Serializable;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tMain myself = new Main();\n\t\tSet<Object> answerSet = myself.execute();\n\t\tSystem.out.print(answerSet.size());\n\t}\n\tpublic Set<Object> execute() {\n\t\tfinal List<String> lines = readStdin();\n\t\tfinal InputData inputData = parse(lines);\n\t\tSet<Object> answerSet = new HashSet<>();\n\t\tfor (Integer a : inputData.ArrayA) {\n\t\t\tfor (Integer b : inputData.ArrayB) {\n\t\t\t\tif (!(a < b)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (Integer c : inputData.ArrayC) {\n\t\t\t\t\tif (!(b < c)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (a < b && b < c) {\n\t\t\t\t\t\tfinal Unit myUnit = new Unit(a,b,c);\n\t\t\t\t\t\tanswerSet.add(myUnit);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn answerSet;\n\t}\n\tprivate List<String> readStdin() {\n\t\tList<String> lines = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8)).lines()\n\t\t\t\t.collect(Collectors.toList());\n\t\treturn lines;\n\t}\n\tprivate InputData parse(List<String> inputlines) {\n\t\tInputData data = new InputData();\n\t\tString line1 = inputlines.get(0);\n\t\tString line2 = inputlines.get(1);\n\t\tString line3 = inputlines.get(2);\n\t\tString line4 = inputlines.get(3);\n\t\tdata.N = Integer.parseInt(line1.trim());\n\t\tString[] line2_strarray = line2.split(\" \");\n\t\tString[] line3_strarray = line3.split(\" \");\n\t\tString[] line4_strarray = line4.split(\" \");\n\t\tfor (String a : line2_strarray) {\n\t\t\tdata.ArrayA.add(Integer.parseInt(a));\n\t\t}\n\t\tfor (String b : line3_strarray) {\n\t\t\tdata.ArrayB.add(Integer.parseInt(b));\n\t\t}\n\t\tfor (String c : line4_strarray) {\n\t\t\tdata.ArrayC.add(Integer.parseInt(c));\n\t\t}\n\t\treturn data;\n\t}\n\tprivate class InputData implements Serializable {\n\t\tprivate static final long serialVersionUID = -6938809350516466787L;\n\t\tpublic int N = 0;\n\t\tpublic List<Integer> ArrayA = new ArrayList<>();\n\t\tpublic List<Integer> ArrayB = new ArrayList<>();\n\t\tpublic List<Integer> ArrayC = new ArrayList<>();\n\t}\n\tprivate class Unit implements Serializable {\n\t\tprivate static final long serialVersionUID = 6884978599619621376L;\n\t\tpublic int A = 0;\n\t\tpublic int B = 0;\n\t\tpublic int C = 0;\n\t\tpublic Unit(int A, int B, int C) {\n\t\t\tsuper();\n\t\t\tthis.A = A;\n\t\t\tthis.B = B;\n\t\t\tthis.C = C;\n\t\t}\n\t}\n}",
        "lines_of_code": 83,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNumberFormatException\nRuntimeException\nFileNotFoundException\nClassCastException"
        ]
    },
    {
        "submission_id": "s341430587",
        "complete_code": "import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n\tstatic int M = (int) Math.pow(4, 12);\n\tstatic class Hash {\n\t\tstatic int[] T = new int[M];\n\t\tpublic Hash() {\n\t\t\tArrays.fill(T, -1);\n\t\t}\n\t\tstatic int h1(int key) {\n\t\t\treturn key % M;\n\t\t}\n\t\tstatic int h2(int key) {\n\t\t\treturn 1 + key % (M - 1);\n\t\t}\n\t\tstatic int h(int key, int i) {\n\t\t\treturn (h1(key) + i * h2(key)) % M;\n\t\t}\n\t\tstatic void insert(int key) {\n\t\t\tint i = 0;\n\t\t\twhile (true) {\n\t\t\t\tint j = h(key, i);\n\t\t\t\tif (T[j] == -1) {\n\t\t\t\t\tT[j] = key;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstatic String find(int key) {\n\t\t\tint i = 0;\n\t\t\twhile (true) {\n\t\t\t\tint j = h(key, i);\n\t\t\t\tif (T[j] == key) {\n\t\t\t\t\treturn \"yes\";\n\t\t\t\t}else if (i >= M || T[j] == -1) {\n\t\t\t\t\treturn \"no\";\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t\tpublic String toString() {\n\t\t\treturn Arrays.toString(T);\n\t\t}\n\t}\n\tpublic static int keyToInt(String key){\n\t\tString s = \"\";\n\t\tfor (int i = 0; i < key.length(); i++) {\n\t\t\tchar c = key.charAt(i);\n\t\t\tif (c == 'A') {\n\t\t\t\ts += \"1\";\n\t\t\t}else if (c == 'C') {\n\t\t\t\ts += \"2\";\n\t\t\t}else if (c == 'G') {\n\t\t\t\ts += 3;\n\t\t\t}else if (c == 'T') {\n\t\t\t\ts += 4;\n\t\t\t}\n\t\t}\n\t\treturn Integer.parseInt(s);\n\t}\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint N = scan.nextInt();\n\t\tString[][] input = new String[N][2];\n\t\tHash hash = new Hash();\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tinput[i][0] = scan.next();\n\t\t\tinput[i][1]= scan.next();\n\t\t}\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tif (input[i][0].equals(\"insert\")) {\n\t\t\t\thash.insert(keyToInt(input[i][1]));\n\t\t\t}else if (input[i][0].equals(\"find\")) {\n\t\t\t\tSystem.out.println(hash.find(keyToInt(input[i][1])));\n\t\t\t}\n\t\t}\n\t\tscan.close();\n\t}\n\tpublic static void insert(int[] T, int data) {\n\t}\n}",
        "lines_of_code": 84,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNumberFormatException\nArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s767896684",
        "complete_code": "import java.util.*;\nimport java.io.*;\npublic class Main {\n\tprivate static void solve(){\n\t\tint n = ni();\n\t\tint m = ni();\n\t\tint[] a = na(n);\n\t\tint[] div2 = new int[n];\n\t\tlong result = 0;\n\t\tfor(int i = 0; i < n; i++)a[i] /= 2;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tlong tmp = a[i];\n\t\t\twhile(tmp %2 == 0) {\n\t\t\t\tdiv2[i]++;\n\t\t\t\ttmp /= 2;\n\t\t\t}\n\t\t\tif(i > 0 && div2[i] != div2[i - 1]) {\n\t\t\t\tSystem.out.println(0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tint lcm = 1;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tlcm = lcm(lcm,a[i]);\n\t\t}\n\t\tresult = m / lcm;\n\t\tresult = result % 2 == 1 ? result / 2 + 1 : result / 2;\n\t\tSystem.out.println(result);\n\t}\n\tstatic int gcd (int a, int b) {\n\t\treturn b > 0 ? gcd(b, a%b) : a;\n\t}\n\tstatic int lcm (int a, int b) {\n\t\treturn a * b / gcd(a, b);\n\t}\n\tprivate static BufferedReader br;\n\tpublic static void main(String[] args){\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\tString debugDataPath = System.getenv(\"DD_PATH\");        \n\t\tif(debugDataPath != null){\n\t\t\ttry{\n\t\t\t\tbr = new BufferedReader(new InputStreamReader(new FileInputStream(new File(debugDataPath))));\n\t\t\t}catch(Exception e){\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\tsolve();\n\t}\n\tprivate static StringTokenizer tokenizer = null;\n\tpublic static String next() {\n\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\ttokenizer = new StringTokenizer(br.readLine());\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn tokenizer.nextToken();\n\t}\n\tprivate static int ni() {\n\t\treturn Integer.parseInt(next());\n\t}\n\tprivate static long nl() {\n\t\treturn Long.parseLong(next());\n\t}\n\tprivate static double nd() {\n\t\treturn Double.parseDouble(next());\n\t}\n\tprivate static int[] na(int n) {\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = ni();\n\t\treturn a;\n\t}\n\tprivate static char[] ns() {\n\t\treturn next().toCharArray();\n\t}\n\tprivate static long[] nal(int n) {\n\t\tlong[] a = new long[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = nl();\n\t\treturn a;\n\t}\n}",
        "lines_of_code": 84,
        "vanilla_response": [
            "Possible Runtime Exceptions - None"
        ]
    },
    {
        "submission_id": "s024106548",
        "complete_code": "import java.io.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\ttry {\n\t\t\tint n;\n\t\t\tint id = 1;\n\t\t\twhile(true){\n\t\t\t\tString line = r.readLine();\n\t\t\t\tn = Integer.parseInt(line);\n\t\t\t\tif(n==0){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tint[][] m = new int[n][n];\n\t\t\t\tm[0][0] = 1;\n\t\t\t\tfor(int column=0;column<n;column++){\n\t\t\t\t\tif(column%2==1){\n\t\t\t\t\t\tm[0][column] = m[0][column-1] + 1;\n\t\t\t\t\t} else if(column!=0){\n\t\t\t\t\t\tm[0][column] = m[0][column-1] + 2*column;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int row=1;row<n-1;row++){\n\t\t\t\t\tif(row%2==1){\n\t\t\t\t\t\tfor(int column=0;column<n-1;column++){\n\t\t\t\t\t\t\tif(column%2==0){\n\t\t\t\t\t\t\t\tm[row][column] = m[row-1][column+1] + 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tm[row][column] = m[row-1][column+1] - 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(n%2==0){\n\t\t\t\t\t\t\tm[row][n-1] = m[row-1][n-1] + (n-row)*2;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tm[row][n-1] = m[row-1][n-1] + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor(int column=0;column<n-1;column++){\n\t\t\t\t\t\t\tif(column%2==0){\n\t\t\t\t\t\t\t\tm[row][column] = m[row-1][column+1] - 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tm[row][column] = m[row-1][column+1] + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(n%2==1){\n\t\t\t\t\t\t\tm[row][n-1] = m[row-1][n-1] + (n-row)*2;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tm[row][n-1] = m[row-1][n-1] + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(n%2==0){\n\t\t\t\t\tm[n-1][0] = m[n-2][1] + 1;\n\t\t\t\t\tfor(int column=1;column<n;column++){\n\t\t\t\t\t\tif(column%2==1){\n\t\t\t\t\t\t\tm[n-1][column] = m[n-1][column-1] + 1;\n\t\t\t\t\t\t} else if(column!=0){\n\t\t\t\t\t\t\tm[n-1][column] = m[n-1][column-1] + (n-column)*2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tm[n-1][0] = m[n-2][0] + 1;\n\t\t\t\t\tfor(int column=1;column<n;column++){\n\t\t\t\t\t\tif(column%2==1){\n\t\t\t\t\t\t\tm[n-1][column] = m[n-1][column-1] + (n-column)*2;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tm[n-1][column] = m[n-1][column-1] + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"Case \" + id + \":\");\n\t\t\t\tfor(int row=0;row<n;row++){\n\t\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\t\tSystem.out.print(String.format(\"%3d\",m[row][i]));\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t}\n\t\t\t\tid++;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}",
        "lines_of_code": 84,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException\nNumberFormatException"
        ]
    },
    {
        "submission_id": "s078247147",
        "complete_code": "import java.util.*;\nclass Main{\n    int n, m, sz;\n    char[] kakko;\n    int[] a, bkt, add;\n    void solve(){\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt();\n        m = sc.nextInt();\n        kakko = sc.next().toCharArray();\n        sz = (int)Math.sqrt(n) - 1;\n        a = new int[n];\n        bkt = new int[n/sz+10];\n        add = new int[n/sz+10];\n        TreeSet<Integer> set = new TreeSet<Integer>();\n        for(int i=0; i<n; i++){\n            if(i==0) a[i] = 1;\n            else{\n                if(kakko[i]=='(') a[i] = a[i-1] + 1;\n                else{\n                    a[i] = a[i-1] - 1;\n                    set.add(new Integer(i));\n                }\n            }\n            bkt[i/sz] = Math.min(a[i], bkt[i/sz]);\n        }\n        for(int i=0; i<m; i++){\n            int q = sc.nextInt()-1;\n            int idx = 0;\n            if(kakko[q]=='('){\n                kakko[q] = ')';\n                set.add(new Integer(q));\n                add(q, n, -2);\n                idx = set.higher(new Integer(-1));\n                kakko[idx] = '(';\n                set.remove(new Integer(idx));\n                add(idx, n, 2);\n            }else{\n                kakko[q] = '(';\n                set.remove(new Integer(q));\n                add(q, n, 2);\n                idx = search(q);\n                kakko[idx] = ')';\n                add(idx, n, -2);\n                set.add(new Integer(idx));\n            }\n            System.out.println(idx+1);\n        }\n    }\n    void add(int start, int last, int num){\n        int from = start - start%sz;\n        int to = from + sz;\n        for(int i=start/sz; i<=last/sz; i++){\n            if(start<=from && to<=last){\n                add[i] += num;\n            }else{\n                for(int j=from; j<to; j++){\n                    if(start<=j && j<last){\n                        a[j] += num;\n                        if(a[j] < bkt[i]) bkt[i] = a[j];\n                    }\n                }\n            }\n            from = to;\n            to += sz;\n        }\n    }\n    int search(int f){        \n        int from = f - f%sz;\n        int to = from + sz;\n        for(int i=f/sz; i>=0; i--){\n            if(bkt[i]+add[i]<=1){\n                for(int j=Math.min(f-1, to-1); j>=from; j--){\n                    if(a[j]+add[i]==1) return j+1;\n                }\n            }\n            to = from;\n            from -= sz;\n        }\n        return 0;\n    }\n    public static void main(String[] args){\n        new Main().solve();\n    }\n}",
        "lines_of_code": 85,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException\n2. NoSuchElementException\n3. IOException\n4. RuntimeException\n5. ClassCastException"
        ]
    },
    {
        "submission_id": "s336705911",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        Heap heap = new Heap();\n        while (true){\n            String action = in.next();\n            int num = 0;\n            if(action.equals(\"insert\")){\n                num = in.nextInt();\n            }\n            if(action.equals(\"insert\")){\n                heap.insert(num);\n            } else if(action.equals(\"extract\")){\n                int popped = heap.extractMax();\n                System.out.println(popped);\n            } else{\n                break;\n            }\n        }\n    }\n}\nclass Heap {\n    private int [] heap;\n    private int size;\n    public Heap(){\n        heap = new int[2000001];\n        size = 0;\n    }\n    private int parent(int pos){\n        if(pos == 1){\n            return 1;\n        }\n        return pos/2;\n    }\n    private int leftChild(int pos){\n            return (pos * 2);\n    }\n    private int rightChild(int pos){\n        return (pos * 2)+1;\n    }\n    private boolean isLeaf(int pos) {\n        if (pos>1 && pos >= (size / 2) && heap[pos*2] == 0 && heap[(pos*2)+1]==0) {\n            return true;\n        }\n        return false;\n    }\n    private void swap(int fpos, int spos){\n        int tmp;\n        tmp = this.heap[fpos];\n        this.heap[fpos] = this.heap[spos];\n        this.heap[spos] = tmp;\n    }\n    private void maxHeapify(int pos){\n        if(pos<size) {\n            if (heap[pos] < heap[leftChild(pos)] || heap[pos] < heap[rightChild(pos)]) {\n                if (heap[leftChild(pos)] > heap[rightChild(pos)]) {\n                    swap(pos, leftChild(pos));\n                    maxHeapify(leftChild(pos));\n                } else {\n                    swap(pos, rightChild(pos));\n                    maxHeapify(rightChild(pos));\n                }\n            }\n        }\n        return;\n    }\n    public void insert(int k){\n        heap[size+1] = k;\n        size++;\n        int current = size;\n        while (current>1 && heap[current]>heap[parent(current)]){\n            swap(current, parent(current));\n            current = parent(current);\n        }\n    }\n    public int extractMax(){\n        int popped = heap[1];\n        heap[1] = heap[size];\n        heap[size] = 0;\n        size--;\n        maxHeapify(1);\n        return popped;\n    }\n}",
        "lines_of_code": 85,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.NoSuchElementException\n2. java.lang.ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s940749367",
        "complete_code": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\npublic class Main {\n\tScanner sc = new Scanner(System.in);\n\tclass P {\n\t\tlong x;\n\t\tlong y;\n\t\tP(long x, long y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\t\tP org(P a) {\n\t\t\treturn new P(x - a.x, y - a.y);\n\t\t}\n\t}\n\tvoid run() {\n\t\tfor (;;) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint m = sc.nextInt();\n\t\t\tif ((n | m) == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tP b[] = new P[n];\n\t\t\tP w[] = new P[m];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tb[i] = new P(sc.nextLong(), sc.nextLong());\n\t\t\t}\n\t\t\tfor (int i = 0; i < m; i++) {\n\t\t\t\tw[i] = new P(sc.nextLong(), sc.nextLong());\n\t\t\t}\n\t\t\tboolean ok = false;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tboolean check = true;\n\t\t\t\t\tP rot = b[i].org(w[j]);\n\t\t\t\t\tfor (int x = 0; x < n && check; x++) {\n\t\t\t\t\t\tif(i == x){\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tP org = b[x].org(w[j]);\n\t\t\t\t\t\tlong v = org.y * rot.x - org.x *rot.y;\n\t\t\t\t\t\tif(v < 0){\n\t\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(v == 0){\n\t\t\t\t\t\t\tlong v2 =rot.x * org.x + rot.y*org.y;\n\t\t\t\t\t\t\tif(v2 < 0){\n\t\t\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (int x = 0; x < m && check; x++) {\n\t\t\t\t\t\tif(j == x){\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tP org = w[x].org(w[j]);\n\t\t\t\t\t\tlong v = org.y * rot.x - org.x *rot.y;\n\t\t\t\t\t\tif(v > 0){\n\t\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(v == 0){\n\t\t\t\t\t\t\tlong v2 =rot.x * org.x + rot.y*org.y;\n\t\t\t\t\t\t\tif(v2 > 0){\n\t\t\t\t\t\t\t\tcheck = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(check){\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ok) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(ok ? \"YES\" : \"NO\");\n\t\t}\n\t}\n\tpublic static void main(String[] a) {\n\t\tMain m = new Main();\n\t\tm.run();\n\t}\n}",
        "lines_of_code": 85,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nNumberFormatException\nIOException\nRuntimeException"
        ]
    },
    {
        "submission_id": "s582543622",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    private void solve() {\n        int N = sc.nextInt();\n        int K = sc.nextInt();\n        int C = sc.nextInt() + 1;\n        String s = sc.next();\n        int[] pre = new int[N];\n        for (int i = 0; i < N; ++i) {\n            char c = s.charAt(i);\n            if (c == 'o') {\n                pre[i] = i < C ?  1 : pre[i - C] + 1;\n            }\n            if (i > 0) {\n                pre[i] = Math.max(pre[i], pre[i - 1]);\n            }\n        }\n        int[] suf = new int[N];\n        for (int i = N - 1; i >= 0; --i) {\n            char c = s.charAt(i);\n            if (c == 'o') {\n                suf[i] = i + C >= N ? 1 : suf[i + C] + 1;\n            }\n            if (i + 1 < N) {\n                suf[i] = Math.max(suf[i], suf[i + 1]);\n            }\n        }\n        PriorityQueue<int[]> q = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n        for (int i = 0; i < C; i++) {\n            int li = i - C;\n            int lv = li >= 0 ? pre[li] : 0;\n            int rv = suf[i];\n            q.add(new int[] { lv + rv, i });\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < N; i++) {\n            while (!q.isEmpty() && q.peek()[1] <= i) {\n                q.poll();\n            }\n            if (!q.isEmpty() && q.peek()[0] < K) {\n                ans.add(i + 1);\n            }\n            int ri = i + C;\n            int lv = pre[i];\n            int rv = ri < N ? suf[ri] : 0;\n            q.add(new int[] { lv + rv, i + C});\n        }\n        ans.forEach(out::println);\n    }\n    private static PrintWriter out;\n    private static MyScanner sc;\n    private static class MyScanner {\n        BufferedReader br;\n        StringTokenizer st;\n        private MyScanner() {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\n    public static void main(String[] args) {\n        out = new PrintWriter(new BufferedOutputStream(System.out));\n        sc = new MyScanner();\n        new Main().solve();\n        out.close();\n    }\n}",
        "lines_of_code": 85,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException\n2. IOException"
        ]
    },
    {
        "submission_id": "s204365679",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n\tstatic long[][] cmb;\n\tfinal static int LIMIT_OF_ARRAY = 10000;\n\tstatic boolean isHuge = false;\n\tpublic static void main(String[] args) {\n\t\tlong mod = 1_000_000_007L;\n\t\tScanner in = new Scanner(System.in);\n\t\tint num = in.nextInt();\n\t\tint bstepNum = in.nextInt();\n\t\tif (LIMIT_OF_ARRAY <= num) {\n\t\t\tcmb = new long[LIMIT_OF_ARRAY][LIMIT_OF_ARRAY/2 + 1];\n\t\t} else {\n\t\t\tcmb = new long[num + 1][(num + 1)/2 + 1];\n\t\t}\n\t\tint[] brokenStep = new int[bstepNum];\n\t\tlong ans = 0;\n\t\tfor (int i = 0; i < bstepNum; i++) {\n\t\t\tbrokenStep[i] = Integer.parseInt(in.next());\n\t\t\tif (i != 0 && brokenStep[i-1] + 1 == brokenStep[i]) {\n\t\t\t\tSystem.out.println(ans);\n\t\t\t\tin.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tin.close();\n\t\tint diffmax = 0;\n\t\tfor (int i = 1; i < bstepNum; i++) {\n\t\t\tif (brokenStep[i] - brokenStep[i - 1] > 0) {\n\t\t\t\tdiffmax = brokenStep[i] - brokenStep[i - 1];\n\t\t\t}\n\t\t}\n\t\tif (diffmax > 7500) {\n\t\t\tfor (int j = 0; j < 2500; j++) {\n\t\t\t\tfor (int k = 0; k < j; k++) {\n\t\t\t\t\tcombination(j, k, mod);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (diffmax >= LIMIT_OF_ARRAY) {\n\t\t\t\tisHuge = true;\n\t\t\t}\n\t\t}\n\t\tans = 1;\n\t\tint pos = 0;\n\t\tfor (int i = 0; i < bstepNum; i++) {\n\t\t\tint step = brokenStep[i] - pos - 1;\n\t\t\tlong tmp = 0;\n\t\t\tfor (int j = step, skip = 0; j >= 0; j -= 2, skip++) {\n\t\t\t\ttmp += combination(j + skip, skip, mod);\n\t\t\t}\n\t\t\tans *= tmp;\n\t\t\tif (ans > mod) {\n\t\t\t\tans %= mod;\n\t\t\t}\n\t\t\tpos = brokenStep[i] + 1;\n\t\t}\n\t\tlong lt = 0;\n\t\tfor (int i = num - pos, skip = 0; i >= 0; i -= 2, skip++) {\n\t\t\tlt += combination(i + skip, skip, mod);\n\t\t}\n\t\tans *= lt;\n\t\tans %= mod;\n\t\tSystem.out.println(ans);\n\t}\n\tpublic static long combination(int a, int b, long mod) {\n\t\tif (a >= cmb.length || b >= cmb[a].length) {\n\t\t\treturn combination(a-1, b-1, mod) + combination(a-1, b, mod);\n\t\t} else {\n\t\t\tif (cmb[a][b] != 0) return cmb[a][b];\n\t\t\tif (a == b) {\n\t\t\t\treturn cmb[a][b] = 1L;\n\t\t\t} else if (b == 0) {\n\t\t\t\treturn cmb[a][b] = 1L;\n\t\t\t} else if (b == 1) {\n\t\t\t\treturn cmb[a][b] = a;\n\t\t\t} else {\n\t\t\t\tlong tmp = combination(a-1, b-1, mod) + combination(a-1, b, mod);\n\t\t\t\tif (mod < tmp) {\n\t\t\t\t\ttmp %= mod;\n\t\t\t\t}\n\t\t\t\treturn cmb[a][b] = tmp;\n\t\t\t}\n\t\t}\n\t}\n}",
        "lines_of_code": 85,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. NumberFormatException\n2. ArrayIndexOutOfBoundsException\n3. StackOverflowError"
        ]
    },
    {
        "submission_id": "s367318234",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main {\n\tstatic class FastReader { \n        BufferedReader br; \n        StringTokenizer st; \n        public FastReader() \n        { \n            br = new BufferedReader(new\n                     InputStreamReader(System.in)); \n        } \n        String next() \n        { \n            while (st == null || !st.hasMoreElements()) \n            { \n                try\n                { \n                    st = new StringTokenizer(br.readLine()); \n                } \n                catch (IOException  e) \n                { \n                    e.printStackTrace(); \n                } \n            } \n            return st.nextToken(); \n        } \n        int nextInt() \n        { \n            return Integer.parseInt(next()); \n        } \n        long nextLong() \n        { \n            return Long.parseLong(next()); \n        } \n        double nextDouble() \n        { \n            return Double.parseDouble(next()); \n        } \n        String nextLine() \n        { \n            String str = \"\"; \n            try\n            { \n                str = br.readLine(); \n            } \n            catch (IOException e) \n            { \n                e.printStackTrace(); \n            } \n            return str; \n        } \n    } \n\tpublic static List<Integer>[] edges;\n\tpublic static long[] fac,inv;\n\tpublic static int mod = (int) (1e9+7),MAX = (int) (1e5+1);\n\tpublic static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n\tpublic static void main(String[] args) {\n\t\tFastReader sc = new FastReader();\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tfac = new long[n+1];\n\t\tinv = new long[n+1];\n\t\tfac[0] = 1;\n\t\tfor(int i=1;i<fac.length;++i) fac[i] = (i*fac[i-1])%mod;\n\t\tinv[n]=pow(fac[n],mod-2);\n\t\tfor(int i=n-1;i>=0;i--){\n\t\t\tinv[i]=(inv[i+1]*(i+1))%mod;\n\t\t}\n\t\tfor(int i=1;i<=k;++i) {\n\t\t\tlong ans = (ncr(n-k+1,i)*ncr(k-1,i-1))%mod;\n\t\t\tout.println(ans);\n\t\t}\n        out.close();\n\t}\n\tprivate static long ncr(int n, int r) {\n\t\treturn ((fac[n]*inv[r])%mod*inv[n-r])%mod;\n\t}\n\tprivate static long pow(long a, int b) {\n\t\tif(b == 0) return 1;\n\t\tlong p =pow(a,b/2);\n\t\tp = (p*p)%mod;\n\t\tif((b&1) == 1) p = (a*p)%mod;\n\t\treturn p;\n\t}\n}",
        "lines_of_code": 85,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },
    {
        "submission_id": "s526417413",
        "complete_code": "import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n\tstatic int N;\n\tpublic static void main(String[] args) {\n\t\tScanner cin=new Scanner(System.in);\n\t\twhile(true){\n\t\t\tN=cin.nextInt();\n\t\t\tif(N==0)break;\n\t\t\tAns[] ans=new Ans[N];\n\t\t\tint[][] score=new int[N][11];\n\t\t\tfor(int i=0;i<N;i++){\n\t\t\t\tscore[i][0]=cin.nextInt();\n\t\t\t\tint first=0;\n\t\t\t\tint[] strike=new int[11];\n\t\t\t\tint[] spare=new int[11];\n\t\t\t\tfor(int frame=1;frame<=10;){\n\t\t\t\t\tif(first==2&&strike[10]==0){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(first==3)break;\n\t\t\t\t\tint p=cin.nextInt();\n\t\t\t\t\tfor(int j=1;j<10;j++){\n\t\t\t\t\t\tif(strike[j]==1||strike[j]==2){\n\t\t\t\t\t\t\tscore[i][j]+=p;\n\t\t\t\t\t\t\tstrike[j]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(spare[j]==1){\n\t\t\t\t\t\t\tscore[i][j]+=p;\n\t\t\t\t\t\t\tspare[j]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(frame==10){\n\t\t\t\t\t\tscore[i][frame]+=p;\n\t\t\t\t\t\tif(score[i][frame]>=10&&first<=1){\n\t\t\t\t\t\t\tstrike[frame]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfirst++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(p==10){\n\t\t\t\t\t\tscore[i][frame]+=p;\n\t\t\t\t\t\tstrike[frame]++;\n\t\t\t\t\t\tframe++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(first==0){\n\t\t\t\t\t\tfirst++;\n\t\t\t\t\t\tscore[i][frame]+=p;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tscore[i][frame]+=p;\n\t\t\t\t\t\tif(score[i][frame]==10){\n\t\t\t\t\t\t\tspare[frame]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfirst=0;\n\t\t\t\t\t\tframe++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint sum=0;\n\t\t\t\tfor(int j=1;j<=10;j++){\n\t\t\t\t\tsum+=score[i][j];\n\t\t\t\t}\n\t\t\t\tans[i]=new Ans(score[i][0],sum);\n\t\t\t}\n\t\t\tArrays.sort(ans);\n\t\t\tfor(int i=0;i<N;i++){\n\t\t\t\tSystem.out.println(ans[i].name+\" \"+ans[i].score);\n\t\t\t}\n\t\t}\n\t}\n\tstatic class Ans implements Comparable<Ans>{\n\t\tint name;\n\t\tint score;\n\t\tAns(int a,int b){\n\t\t\tname=a;\n\t\t\tscore=b;\n\t\t}\n\t\tpublic int compareTo(Ans o) {\n\t\t\tif(this.score==o.score)\n\t\t\t\treturn name-o.name;\n\t\t\treturn -(this.score-o.score);\n\t\t}\n\t}\n}",
        "lines_of_code": 85,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.InputMismatchException\n2. java.lang.ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s449041495",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main{\n\tpublic static void main(String[] args) throws Exception {\n\t\tSystem.setIn(new FileInputStream(\"T02CityID22.txt\"));\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint N=Integer.parseInt(st.nextToken().trim());\n\t\tint M=Integer.parseInt(st.nextToken().trim());\n\t\tInteger[][] cities = new Integer[M][4];\n\t\tfor(int i=0;i<M;i++)\n\t\t{\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint p=Integer.parseInt(st.nextToken().trim());\n\t\t\tint y=Integer.parseInt(st.nextToken().trim());\n\t\t\tcities[i][0]=i;\n\t\t\tcities[i][1]=p;\n\t\t\tcities[i][2]=p*1000000+y;\n\t    }\n\t\tArrays.sort(cities,0,M,new Comparator<Integer[]>() {\n            public int compare(Integer[] x, Integer[] y) {\n                if(x[2] < y[2]){\n                    return -1;\n                } else if(x[2] > y[2]){\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n\t\t});\n\t\tint pchange=0,ychange=0;\n\t\tfor(int i=0;i<M;i++)\n\t\t{\n\t\t\tint p= cities[i][1];\n\t\t\tint y= cities[i][2];\n\t\t\tif(pchange!=p)\n\t\t\t{\n\t\t\t\tpchange=p;\n\t\t\t\tychange=1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\t\t\t\t\n\t\t\t\tychange++;\n\t\t\t}\n\t\t\tcities[i][3]=pchange*1000000+ychange;\n\t\t}\n\t\tArrays.sort(cities,0,M,new Comparator<Integer[]>() {\n            public int compare(Integer[] x, Integer[] y) {\n                if(x[0] < y[0]){\n                    return -1;\n                } else if(x[0] > y[0]){\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n\t\t});\t\n\t\tfor(int i=0;i<M;i++)\n\t\t{\n\t\t\tint p= cities[i][1]/1000000;\n\t\t\tif(p<10)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"00000\" + cities[i][3]);\n\t\t\t}\n\t\t\telse if(p<100)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"0000\" + cities[i][3]);\n\t\t\t}\n\t\t\telse if(p<1000)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"000\" + cities[i][3]);\n\t\t\t}\n\t\t\telse if(p<10000)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"00\" + cities[i][3]);\n\t\t\t}\n\t\t\telse if(p<100000)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"0\" + cities[i][3]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.println(cities[i][3]);\n\t\t\t}\t\t\t\n\t\t}\n\t}\n}",
        "lines_of_code": 87,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nFileNotFoundException\nIOException\nNumberFormatException\nRuntimeException"
        ]
    },
    {
        "submission_id": "s402418464",
        "complete_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        Heap heap = new Heap();\n        while (true){\n            String action = in.next();\n            int num = 0;\n            if(action.equals(\"insert\")){\n                num = in.nextInt();\n            }\n            if(action.equals(\"insert\")){\n                heap.insert(num);\n            } else if(action.equals(\"extract\")){\n                int popped = heap.extractMax();\n                System.out.println(popped);\n            } else{\n                break;\n            }\n        }\n    }\n}\nclass Heap {\n    private int [] heap;\n    private int size;\n    public Heap(){\n        heap = new int[2000001];\n        size = 0;\n    }\n    private int parent(int pos){\n        if(pos == 1){\n            return 1;\n        }\n        return pos/2;\n    }\n    private int leftChild(int pos){\n            return (pos * 2);\n    }\n    private int rightChild(int pos){\n        return (pos * 2)+1;\n    }\n    private boolean isLeaf(int pos) {\n        if (pos>1 && pos >= (size / 2) && heap[pos*2] == 0 && heap[(pos*2)+1]==0) {\n            return true;\n        }\n        return false;\n    }\n    private void swap(int fpos, int spos){\n        int tmp;\n        tmp = this.heap[fpos];\n        this.heap[fpos] = this.heap[spos];\n        this.heap[spos] = tmp;\n    }\n    private void maxHeapify(int pos){\n        if (isLeaf(pos)) {\n            return;\n        }\n        if(heap[pos] < heap[leftChild(pos)] || heap[pos] < heap[rightChild(pos)]){\n            if (heap[leftChild(pos)] > heap[rightChild(pos)]) {\n                swap(pos, leftChild(pos));\n                maxHeapify(leftChild(pos));\n            }\n            else {\n                swap(pos, rightChild(pos));\n                maxHeapify(rightChild(pos));\n            }\n        }\n        return;\n    }\n    public void insert(int k){\n        heap[size+1] = k;\n        size++;\n        int current = size;\n        while (current>1 && heap[current]>heap[parent(current)]){\n            swap(current, parent(current));\n            current = parent(current);\n        }\n    }\n    public int extractMax(){\n        int popped = heap[1];\n        heap[1] = heap[size];\n        heap[size] = 0;\n        size--;\n        maxHeapify(1);\n        return popped;\n    }\n}",
        "lines_of_code": 87,
        "vanilla_response": [
            "Possible Runtime Exceptions - \n1. java.util.NoSuchElementException\n2. java.lang.ArrayIndexOutOfBoundsException"
        ]
    },
    {
        "submission_id": "s989077935",
        "complete_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner stdIn = new Scanner(System.in);\n\t\tint n = stdIn.nextInt();\n\t\tString[] result = new String[100];\n\t\tint index = 0;\n\t\twhile( n != 0 ){\t\t\t\n\t\t\tint[][] stone = new int[n][2];\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tstone[i][0] = stdIn.nextInt();\n\t\t\t\tstone[i][1] = stdIn.nextInt();\n\t\t\t}\n\t\t\tint m = stdIn.nextInt();\n\t\t\tString[] direction = new String[m];\n\t\t\tint[] distance = new int[m];\n\t\t\tfor(int i = 0; i < m; i++){\n\t\t\t\tdirection[i] = stdIn.next();\n\t\t\t\tdistance[i]= stdIn.nextInt();\n\t\t\t}\n\t\t\tint[] now = new int[2];\n\t\t\tnow[0] = 10;\n\t\t\tnow[1] = 10;\n\t\t\tint count = 0;\n\t\t\tfor(int i = 0; i < m; i++){\n\t\t\t\tif( direction[i].equals(\"N\")){\n\t\t\t\t\tfor(int j = 1; j <= distance[i]; j++){\n\t\t\t\t\t\tnow[1]++;\n\t\t\t\t\t\tfor(int k = 0; k < stone.length; k++){\n\t\t\t\t\t\t\tif( stone[k][0] == now[0] && stone[k][1] == now[1] ){\n\t\t\t\t\t\t\t\tstone[k][0] = -1;\n\t\t\t\t\t\t\t\tstone[k][1] = -1;\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if( direction[i].equals(\"S\")){\n\t\t\t\t\tfor(int j = 1; j <= distance[i]; j++){\n\t\t\t\t\t\tnow[1]--;\n\t\t\t\t\t\tfor(int k = 0; k < stone.length; k++){\n\t\t\t\t\t\t\tif( stone[k][0] == now[0] && stone[k][1] == now[1] ){\n\t\t\t\t\t\t\t\tstone[k][0] = -1;\n\t\t\t\t\t\t\t\tstone[k][1] = -1;\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if( direction[i].equals(\"E\")){\n\t\t\t\t\tfor(int j = 1; j <= distance[i]; j++){\n\t\t\t\t\t\tnow[0]++;\n\t\t\t\t\t\tfor(int k = 0; k < stone.length; k++){\n\t\t\t\t\t\t\tif( stone[k][0] == now[0] && stone[k][1] == now[1] ){\n\t\t\t\t\t\t\t\tstone[k][0] = -1;\n\t\t\t\t\t\t\t\tstone[k][1] = -1;\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if( direction[i].equals(\"W\")){\n\t\t\t\t\tfor(int j = 1; j <= distance[i]; j++){\n\t\t\t\t\t\tnow[0]--;\n\t\t\t\t\t\tfor(int k = 0; k < stone.length; k++){\n\t\t\t\t\t\t\tif( stone[k][0] == now[0] && stone[k][1] == now[1] ){\n\t\t\t\t\t\t\t\tstone[k][0] = -1;\n\t\t\t\t\t\t\t\tstone[k][1] = -1;\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( count == n ){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( count == n ){\n\t\t\t\tresult[index] = new String(\"Yes\");\n\t\t\t} else {\n\t\t\t \tresult[index] = new String(\"No\");\n\t\t\t}\n\t\t\tindex++;\n\t\t\tn = stdIn.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < index; i++){\n\t\t\tSystem.out.println(result[i]);\n\t\t}\n\t}\n}",
        "lines_of_code": 87,
        "vanilla_response": [
            "Possible Runtime Exceptions -\nInputMismatchException"
        ]
    },
    {
        "submission_id": "s899291778",
        "complete_code": "import java.io.*;\nimport java.util.*;\npublic class Main {\n\tboolean main() throws IOException {\n\t\tint N = readIntArray()[0];\n\t\tif (N == 0) \n\t\t\treturn false; \n\t\tList<String> list = new ArrayList<String>();\n\t\tint[] cnt = new int[26]; \n\t\tint[] flag = new int[26]; \n\t\tfor(int i = 0; i < N; i++) {\n\t\t\tString s = reader.readLine();\n\t\t\tlist.add(s);\n\t\t\tchar c1 = s.charAt(0); \n\t\t\tchar c2 = s.charAt(s.length() - 1); \n\t\t\tcnt[c1 - 'a']++;\n\t\t\tflag[c1 - 'a'] = 1;\n\t\t\tcnt[c2 - 'a']--;\n\t\t}\n\t\tboolean dame = false;\n\t\tfor(int i = 0; i < cnt.length; i++) {\n\t\t\tif (cnt[i] != 0) {\n\t\t\t\tdame = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!dame) {\n\t\t\tString s = list.get(0);\n\t\t\tchar c1 = s.charAt(0); \n\t\t\tchar c2 = s.charAt(s.length() - 1); \n\t\t\tflag[c1 - 'a'] = 0;\n\t\t\tfor(;;) {\n\t\t\t\tboolean modify = false;\n\t\t\t\tfor(int i = 0; i < list.size(); i++) {\n\t\t\t\t\ts = list.get(i);\n\t\t\t\t\tc1 = s.charAt(0); \n\t\t\t\t\tc2 = s.charAt(s.length() - 1); \n\t\t\t\t\tif (flag[c1 - 'a'] == 0 && flag[c2 - 'a'] != 0) {\n\t\t\t\t\t\tflag[c2 - 'a'] = 0;\n\t\t\t\t\t\tmodify = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!modify)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor(int i = 0; i < flag.length; i++) {\n\t\t\t\tif (flag[i] != 0) {\n\t\t\t\t\tdame = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.printf(\"%s\\n\", dame ? \"NG\" : \"OK\");\n\t\treturn true; \n\t}\n\tprivate final static boolean DEBUG = false; \n\tpublic static void main(String[] args) throws IOException {\n\t\tif (DEBUG) {\n\t\t\tlog = System.out;\n\t\t\tString inputStr = \"7\\nab\\nbc\\nca\\nde\\nef\\nfg\\ngd\\n\" + \"0\\n\";\n\t\t\treader = new BufferedReader(new StringReader(inputStr)); \n\t\t}\n\t\telse {\n\t\t\tlog = new PrintStream(new OutputStream() { public void write(int b) {} } ); \n\t\t\treader = new BufferedReader(new InputStreamReader(System.in)); \n\t\t}\n\t\tfor(int i = 0; ; i++) {\n\t\t\tboolean b = new Main().main();\n\t\t\tif (!b)\n\t\t\t\tbreak;\n\t\t}\t\t\n\t\treader.close();\n\t}\n\tstatic PrintStream log;\n\tstatic BufferedReader reader;\n\tprivate static int[] readIntArray() throws IOException {\n\t\tString s = reader.readLine();\n\t\tif (s == null)\n\t\t\treturn null;\n\t\tString[] sp = s.split(\" \");\n\t\tint[] a = new int[sp.length];\n\t\tfor(int i = 0; i < sp.length; i++) {\n\t\t\ta[i] = Integer.parseInt(sp[i]);\n\t\t}\n\t\treturn a;\n\t}\n}",
        "lines_of_code": 87,
        "vanilla_response": [
            "Possible Runtime Exceptions - \nIOException"
        ]
    },{}
]
